// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.17020
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

using Eina;
using System;
using System.Runtime.InteropServices;


namespace Enesim {
    
    
    public class Matrix {
        
        protected IntPtr raw;
        
        public Matrix() {
            raw = Marshal.AllocHGlobal(Marshal.SizeOf(typeof(MatrixStruct)));
        }
        
        public System.IntPtr Raw {
            get {
                return this.raw;
            }
        }
        
        [StructLayout(System.Runtime.InteropServices.LayoutKind.Sequential)]
        public struct MatrixStruct {
            
            public double xx;
            
            public double xy;
            
            public double xz;
            
            public double yx;
            
            public double yy;
            
            public double yz;
            
            public double zx;
            
            public double zy;
            
            public double zz;
        }
        
        public enum TypeEnum {
            
            Identity,
            
            Affine,
            
            Projective,
        }
    }
    
    public enum ChannelEnum {
        
        Red,
        
        Green,
        
        Blue,
        
        Alpha,
        
        Luminance,
    }
    
    public enum QualityEnum {
        
        Best,
        
        Good,
        
        Fast,
    }
    
    public enum AplhaHintEnum {
        
        Normal,
        
        Sparse,
        
        Opaque,
    }
    
    public enum RopEnum {
        
        Blend,
        
        Fill,
    }
    
    public class Renderer : IDisposable {
        
        protected IntPtr raw;
        
        private bool disposed;
        
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void enesim_renderer_private_set(IntPtr self, string name, IntPtr data);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern IntPtr enesim_renderer_private_get(IntPtr self, string name);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern IntPtr enesim_renderer_ref(IntPtr self);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void enesim_renderer_unref(IntPtr self);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern int enesim_renderer_ref_count(IntPtr self);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void enesim_renderer_lock(IntPtr self);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void enesim_renderer_unlock(IntPtr self);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void enesim_renderer_name_set(IntPtr self, string name);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern IntPtr enesim_renderer_name_get(IntPtr self);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void enesim_renderer_transformation_set(IntPtr self, IntPtr m);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void enesim_renderer_transformation_get(IntPtr self, IntPtr m);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern Enesim.Matrix.TypeEnum enesim_renderer_transformation_type_get(IntPtr self);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void enesim_renderer_origin_set(IntPtr self, double x, double y);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void enesim_renderer_origin_get(IntPtr self, out double x, out double y);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void enesim_renderer_x_origin_set(IntPtr self, double x);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern double enesim_renderer_x_origin_get(IntPtr self);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void enesim_renderer_y_origin_set(IntPtr self, double y);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern double enesim_renderer_y_origin_get(IntPtr self);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void enesim_renderer_visibility_set(IntPtr self, bool visibility);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern bool enesim_renderer_visibility_get(IntPtr self);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void enesim_renderer_color_set(IntPtr self, uint color);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern uint enesim_renderer_color_get(IntPtr self);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void enesim_renderer_mask_set(IntPtr self, IntPtr mask);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern IntPtr enesim_renderer_mask_get(IntPtr self);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void enesim_renderer_mask_channel_set(IntPtr self, Enesim.ChannelEnum channel);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern Enesim.ChannelEnum enesim_renderer_mask_channel_get(IntPtr self);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void enesim_renderer_quality_set(IntPtr self, Enesim.QualityEnum quality);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern Enesim.QualityEnum enesim_renderer_quality_get(IntPtr self);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern Enesim.AplhaHintEnum enesim_renderer_alpha_hints_get(IntPtr self);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern bool enesim_renderer_is_supported(IntPtr self, IntPtr s);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern bool enesim_renderer_bounds_get(IntPtr self, IntPtr rect);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern bool enesim_renderer_bounds_get_extended(IntPtr self, IntPtr prev, IntPtr curr);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern bool enesim_renderer_destination_bounds_get(IntPtr self, IntPtr rect, int x, int y);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern bool enesim_renderer_destination_bounds_get_extended(IntPtr self, IntPtr prev, IntPtr curr, int x, int y);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern Enesim.Renderer.FeatureEnum enesim_renderer_features_get(IntPtr self);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern bool enesim_renderer_is_inside(IntPtr self, double x, double y);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern bool enesim_renderer_has_changed(IntPtr self);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern bool enesim_renderer_damages_get(IntPtr self, IntPtr cb, IntPtr data);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern bool enesim_renderer_draw(IntPtr self, IntPtr s, Enesim.RopEnum rop, IntPtr clip, int x, int y, out IntPtr log);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern bool enesim_renderer_draw_list(IntPtr self, IntPtr s, Enesim.RopEnum rop, IntPtr clips, int x, int y, out IntPtr log);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void enesim_renderer_default_quality_set(Enesim.QualityEnum quality);
~Renderer() { Dispose(false); }
        
        protected Renderer() {
        }
        
        protected internal Renderer(System.IntPtr i, bool owned) {
            Initialize(i, owned);
        }
        
        public System.IntPtr Raw {
            get {
                return this.raw;
            }
        }
        
        public virtual void Dispose() {
            Dispose(false);
            GC.SuppressFinalize(this);
        }
        
        protected virtual void Dispose(bool disposing) {
            if (disposed) {
            }
            else {
                enesim_renderer_unref(raw);
                raw = IntPtr.Zero;
                disposed = false;
            }
        }
        
        protected virtual void Initialize(System.IntPtr i, bool owned) {
            raw = i;
            if (owned) {
                enesim_renderer_ref(i);
            }
        }
        
        public void SetPrivate(string name, System.IntPtr data) {
            enesim_renderer_private_set(raw, name, data);
        }
        
        public System.IntPtr GetPrivate(string name) {
            System.IntPtr ret = enesim_renderer_private_get(raw, name);
            return ret;
        }
        
        public int RefCount() {
            int ret = enesim_renderer_ref_count(raw);
            return ret;
        }
        
        public void Lock() {
            enesim_renderer_lock(raw);
        }
        
        public void Unlock() {
            enesim_renderer_unlock(raw);
        }
        
        public void SetName(string name) {
            enesim_renderer_name_set(raw, name);
        }
        
        public string GetName() {
            System.IntPtr ret = enesim_renderer_name_get(raw);
            return Marshal.PtrToStringAnsi(ret);
        }
        
        public void SetTransformation(Enesim.Matrix m) {
            System.IntPtr mRaw;
            if ((m == null)) {
                mRaw = IntPtr.Zero;
            }
            else {
                mRaw = m.Raw;
            }
            enesim_renderer_transformation_set(raw, mRaw);
        }
        
        public void GetTransformation(out Enesim.Matrix m) {
            m = new Enesim.Matrix();
            enesim_renderer_transformation_get(raw, m.Raw);
        }
        
        public Enesim.Matrix.TypeEnum GetTransformationType() {
            Enesim.Matrix.TypeEnum ret = enesim_renderer_transformation_type_get(raw);
            return ret;
        }
        
        public void SetOrigin(double x, double y) {
            enesim_renderer_origin_set(raw, x, y);
        }
        
        public void GetOrigin(out double x, out double y) {
            enesim_renderer_origin_get(raw, out  x, out  y);
        }
        
        public void SetXOrigin(double x) {
            enesim_renderer_x_origin_set(raw, x);
        }
        
        public double GetXOrigin() {
            double ret = enesim_renderer_x_origin_get(raw);
            return ret;
        }
        
        public void SetYOrigin(double y) {
            enesim_renderer_y_origin_set(raw, y);
        }
        
        public double GetYOrigin() {
            double ret = enesim_renderer_y_origin_get(raw);
            return ret;
        }
        
        public void SetVisibility(bool visibility) {
            enesim_renderer_visibility_set(raw, visibility);
        }
        
        public bool GetVisibility() {
            bool ret = enesim_renderer_visibility_get(raw);
            return ret;
        }
        
        public void SetColor(Enesim.Color color) {
            enesim_renderer_color_set(raw, color);
        }
        
        public Enesim.Color GetColor() {
            uint ret = enesim_renderer_color_get(raw);
            return new Color(ret);
        }
        
        public void SetMask(Enesim.Renderer mask) {
            System.IntPtr maskRaw;
            if ((mask == null)) {
                maskRaw = IntPtr.Zero;
            }
            else {
                maskRaw = mask.Raw;
            }
            enesim_renderer_mask_set(raw, maskRaw);
        }
        
        public Enesim.Renderer GetMask() {
            System.IntPtr ret = enesim_renderer_mask_get(raw);
            return new Renderer(ret, false);
        }
        
        public void SetMaskChannel(Enesim.ChannelEnum channel) {
            enesim_renderer_mask_channel_set(raw, channel);
        }
        
        public Enesim.ChannelEnum GetMaskChannel() {
            Enesim.ChannelEnum ret = enesim_renderer_mask_channel_get(raw);
            return ret;
        }
        
        public void SetQuality(Enesim.QualityEnum quality) {
            enesim_renderer_quality_set(raw, quality);
        }
        
        public Enesim.QualityEnum GetQuality() {
            Enesim.QualityEnum ret = enesim_renderer_quality_get(raw);
            return ret;
        }
        
        public Enesim.AplhaHintEnum GetAlphaHints() {
            Enesim.AplhaHintEnum ret = enesim_renderer_alpha_hints_get(raw);
            return ret;
        }
        
        public bool IsSupported(Enesim.Surface s) {
            System.IntPtr sRaw;
            if ((s == null)) {
                sRaw = IntPtr.Zero;
            }
            else {
                sRaw = s.Raw;
            }
            bool ret = enesim_renderer_is_supported(raw, sRaw);
            return ret;
        }
        
        public bool GetBounds(out Enesim.Rectangle rect) {
            rect = new Enesim.Rectangle();
            bool ret = enesim_renderer_bounds_get(raw, rect.Raw);
            return ret;
        }
        
        public bool GetBounds(out Enesim.Rectangle prev, out Enesim.Rectangle curr) {
            prev = new Enesim.Rectangle();
            curr = new Enesim.Rectangle();
            bool ret = enesim_renderer_bounds_get_extended(raw, prev.Raw, curr.Raw);
            return ret;
        }
        
        public bool GetDestinationBounds(out Eina.Rectangle rect, int x, int y) {
            rect = new Eina.Rectangle();
            bool ret = enesim_renderer_destination_bounds_get(raw, rect.Raw, x, y);
            return ret;
        }
        
        public bool GetDestinationBounds(out Eina.Rectangle prev, out Eina.Rectangle curr, int x, int y) {
            prev = new Eina.Rectangle();
            curr = new Eina.Rectangle();
            bool ret = enesim_renderer_destination_bounds_get_extended(raw, prev.Raw, curr.Raw, x, y);
            return ret;
        }
        
        public Enesim.Renderer.FeatureEnum GetFeatures() {
            Enesim.Renderer.FeatureEnum ret = enesim_renderer_features_get(raw);
            return ret;
        }
        
        public bool IsInside(double x, double y) {
            bool ret = enesim_renderer_is_inside(raw, x, y);
            return ret;
        }
        
        public bool HasChanged() {
            bool ret = enesim_renderer_has_changed(raw);
            return ret;
        }
        
        public bool GetDamages(System.IntPtr cb, System.IntPtr data) {
            bool ret = enesim_renderer_damages_get(raw, cb, data);
            return ret;
        }
        
        public bool Draw(Enesim.Surface s, Enesim.RopEnum rop, Eina.Rectangle clip, int x, int y, out Enesim.Log log) {
            System.IntPtr sRaw;
            if ((s == null)) {
                sRaw = IntPtr.Zero;
            }
            else {
                sRaw = s.Raw;
            }
            System.IntPtr clipRaw;
            if ((clip == null)) {
                clipRaw = IntPtr.Zero;
            }
            else {
                clipRaw = clip.Raw;
            }
            System.IntPtr logRaw;
            bool ret = enesim_renderer_draw(raw, sRaw, rop, clipRaw, x, y, out  logRaw);
            log = new Enesim.Log(logRaw, false);
            return ret;
        }
        
        public bool DrawList(Enesim.Surface s, Enesim.RopEnum rop, System.IntPtr clips, int x, int y, out Enesim.Log log) {
            System.IntPtr sRaw;
            if ((s == null)) {
                sRaw = IntPtr.Zero;
            }
            else {
                sRaw = s.Raw;
            }
            System.IntPtr logRaw;
            bool ret = enesim_renderer_draw_list(raw, sRaw, rop, clips, x, y, out  logRaw);
            log = new Enesim.Log(logRaw, false);
            return ret;
        }
        
        public static void SetDefaultQuality(Enesim.QualityEnum quality) {
            enesim_renderer_default_quality_set(quality);
        }
        
        public enum FeatureEnum {
            
            Translate,
            
            Affine,
            
            Projective,
            
            A8,
            
            Argb8888,
            
            Quality,
            
            BackendSoftware,
            
            BackendOpengl,
        }
        
        public class Dispmap : Renderer {
            
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern IntPtr enesim_renderer_dispmap_new();
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern IntPtr enesim_renderer_dispmap_map_surface_get(IntPtr self);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void enesim_renderer_dispmap_map_surface_set(IntPtr self, IntPtr map);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern IntPtr enesim_renderer_dispmap_source_surface_get(IntPtr self);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void enesim_renderer_dispmap_source_surface_set(IntPtr self, IntPtr src);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern double enesim_renderer_dispmap_factor_get(IntPtr self);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void enesim_renderer_dispmap_factor_set(IntPtr self, double factor);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void enesim_renderer_dispmap_x_channel_set(IntPtr self, Enesim.ChannelEnum channel);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void enesim_renderer_dispmap_y_channel_set(IntPtr self, Enesim.ChannelEnum channel);
            
            protected internal Dispmap(System.IntPtr i, bool owned) : 
                    base(i, owned) {
                Initialize(i, owned);
            }
            
            public Dispmap() {
                System.IntPtr ret = enesim_renderer_dispmap_new();
                Initialize(ret, false);
            }
            
            public Enesim.Surface MapSurface {
                get {
                    System.IntPtr ret = enesim_renderer_dispmap_map_surface_get(raw);
                    return new Surface(ret, false);
                }
                set {
                    Enesim.Surface map;
                    map = value;
                    System.IntPtr mapRaw;
                    if ((map == null)) {
                        mapRaw = IntPtr.Zero;
                    }
                    else {
                        mapRaw = map.Raw;
                    }
                    enesim_renderer_dispmap_map_surface_set(raw, mapRaw);
                }
            }
            
            public Enesim.Surface SourceSurface {
                get {
                    System.IntPtr ret = enesim_renderer_dispmap_source_surface_get(raw);
                    return new Surface(ret, false);
                }
                set {
                    Enesim.Surface src;
                    src = value;
                    System.IntPtr srcRaw;
                    if ((src == null)) {
                        srcRaw = IntPtr.Zero;
                    }
                    else {
                        srcRaw = src.Raw;
                    }
                    enesim_renderer_dispmap_source_surface_set(raw, srcRaw);
                }
            }
            
            public double Factor {
                get {
                    double ret = enesim_renderer_dispmap_factor_get(raw);
                    return ret;
                }
                set {
                    double factor;
                    factor = value;
                    enesim_renderer_dispmap_factor_set(raw, factor);
                }
            }
            
            public Enesim.ChannelEnum XChannel {
                set {
                    Enesim.ChannelEnum channel;
                    channel = value;
                    enesim_renderer_dispmap_x_channel_set(raw, channel);
                }
            }
            
            public Enesim.ChannelEnum YChannel {
                set {
                    Enesim.ChannelEnum channel;
                    channel = value;
                    enesim_renderer_dispmap_y_channel_set(raw, channel);
                }
            }
        }
        
        public class Shape : Renderer {
            
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern Enesim.Renderer.Shape.FeatureEnum enesim_renderer_shape_shape_features_get(IntPtr self);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void enesim_renderer_shape_stroke_dash_add_simple(IntPtr self, double length, double gap);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void enesim_renderer_shape_stroke_dash_add(IntPtr self, IntPtr dash);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void enesim_renderer_shape_stroke_dash_clear(IntPtr self);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern bool enesim_renderer_shape_geometry_get(IntPtr self, IntPtr geometry);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern bool enesim_renderer_shape_destination_geometry_get(IntPtr self, IntPtr geometry);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern uint enesim_renderer_shape_stroke_color_get(IntPtr self);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void enesim_renderer_shape_stroke_color_set(IntPtr self, uint stroke_color);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern IntPtr enesim_renderer_shape_stroke_renderer_get(IntPtr self);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void enesim_renderer_shape_stroke_renderer_set(IntPtr self, IntPtr stroke);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern double enesim_renderer_shape_stroke_weight_get(IntPtr self);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void enesim_renderer_shape_stroke_weight_set(IntPtr self, double weight);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern Enesim.Renderer.Shape.StrokeLocationEnum enesim_renderer_shape_stroke_location_get(IntPtr self);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void enesim_renderer_shape_stroke_location_set(IntPtr self, Enesim.Renderer.Shape.StrokeLocationEnum location);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern Enesim.Renderer.Shape.StrokeCapEnum enesim_renderer_shape_stroke_cap_get(IntPtr self);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void enesim_renderer_shape_stroke_cap_set(IntPtr self, Enesim.Renderer.Shape.StrokeCapEnum cap);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern Enesim.Renderer.Shape.StrokeJoinEnum enesim_renderer_shape_stroke_join_get(IntPtr self);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void enesim_renderer_shape_stroke_join_set(IntPtr self, Enesim.Renderer.Shape.StrokeJoinEnum join);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern bool enesim_renderer_shape_stroke_scalable_get(IntPtr self);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void enesim_renderer_shape_stroke_scalable_set(IntPtr self, bool scalable);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern uint enesim_renderer_shape_fill_color_get(IntPtr self);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void enesim_renderer_shape_fill_color_set(IntPtr self, uint fill_color);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern IntPtr enesim_renderer_shape_fill_renderer_get(IntPtr self);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void enesim_renderer_shape_fill_renderer_set(IntPtr self, IntPtr fill);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern Enesim.Renderer.Shape.FillRuleEnum enesim_renderer_shape_fill_rule_get(IntPtr self);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void enesim_renderer_shape_fill_rule_set(IntPtr self, Enesim.Renderer.Shape.FillRuleEnum rule);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern Enesim.Renderer.Shape.DrawModeEnum enesim_renderer_shape_draw_mode_get(IntPtr self);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void enesim_renderer_shape_draw_mode_set(IntPtr self, Enesim.Renderer.Shape.DrawModeEnum draw_mode);
            
            protected Shape() {
            }
            
            protected internal Shape(System.IntPtr i, bool owned) : 
                    base(i, owned) {
                Initialize(i, owned);
            }
            
            public Enesim.Color StrokeColor {
                get {
                    uint ret = enesim_renderer_shape_stroke_color_get(raw);
                    return new Color(ret);
                }
                set {
                    Enesim.Color stroke_color;
                    stroke_color = value;
                    enesim_renderer_shape_stroke_color_set(raw, stroke_color);
                }
            }
            
            public Enesim.Renderer StrokeRenderer {
                get {
                    System.IntPtr ret = enesim_renderer_shape_stroke_renderer_get(raw);
                    return new Renderer(ret, false);
                }
                set {
                    Enesim.Renderer stroke;
                    stroke = value;
                    System.IntPtr strokeRaw;
                    if ((stroke == null)) {
                        strokeRaw = IntPtr.Zero;
                    }
                    else {
                        strokeRaw = stroke.Raw;
                    }
                    enesim_renderer_shape_stroke_renderer_set(raw, strokeRaw);
                }
            }
            
            public double StrokeWeight {
                get {
                    double ret = enesim_renderer_shape_stroke_weight_get(raw);
                    return ret;
                }
                set {
                    double weight;
                    weight = value;
                    enesim_renderer_shape_stroke_weight_set(raw, weight);
                }
            }
            
            public Enesim.Renderer.Shape.StrokeLocationEnum StrokeLocation {
                get {
                    Enesim.Renderer.Shape.StrokeLocationEnum ret = enesim_renderer_shape_stroke_location_get(raw);
                    return ret;
                }
                set {
                    Enesim.Renderer.Shape.StrokeLocationEnum location;
                    location = value;
                    enesim_renderer_shape_stroke_location_set(raw, location);
                }
            }
            
            public Enesim.Renderer.Shape.StrokeCapEnum StrokeCap {
                get {
                    Enesim.Renderer.Shape.StrokeCapEnum ret = enesim_renderer_shape_stroke_cap_get(raw);
                    return ret;
                }
                set {
                    Enesim.Renderer.Shape.StrokeCapEnum cap;
                    cap = value;
                    enesim_renderer_shape_stroke_cap_set(raw, cap);
                }
            }
            
            public Enesim.Renderer.Shape.StrokeJoinEnum StrokeJoin {
                get {
                    Enesim.Renderer.Shape.StrokeJoinEnum ret = enesim_renderer_shape_stroke_join_get(raw);
                    return ret;
                }
                set {
                    Enesim.Renderer.Shape.StrokeJoinEnum join;
                    join = value;
                    enesim_renderer_shape_stroke_join_set(raw, join);
                }
            }
            
            public bool StrokeScalable {
                get {
                    bool ret = enesim_renderer_shape_stroke_scalable_get(raw);
                    return ret;
                }
                set {
                    bool scalable;
                    scalable = value;
                    enesim_renderer_shape_stroke_scalable_set(raw, scalable);
                }
            }
            
            public Enesim.Color FillColor {
                get {
                    uint ret = enesim_renderer_shape_fill_color_get(raw);
                    return new Color(ret);
                }
                set {
                    Enesim.Color fill_color;
                    fill_color = value;
                    enesim_renderer_shape_fill_color_set(raw, fill_color);
                }
            }
            
            public Enesim.Renderer FillRenderer {
                get {
                    System.IntPtr ret = enesim_renderer_shape_fill_renderer_get(raw);
                    return new Renderer(ret, false);
                }
                set {
                    Enesim.Renderer fill;
                    fill = value;
                    System.IntPtr fillRaw;
                    if ((fill == null)) {
                        fillRaw = IntPtr.Zero;
                    }
                    else {
                        fillRaw = fill.Raw;
                    }
                    enesim_renderer_shape_fill_renderer_set(raw, fillRaw);
                }
            }
            
            public Enesim.Renderer.Shape.FillRuleEnum FillRule {
                get {
                    Enesim.Renderer.Shape.FillRuleEnum ret = enesim_renderer_shape_fill_rule_get(raw);
                    return ret;
                }
                set {
                    Enesim.Renderer.Shape.FillRuleEnum rule;
                    rule = value;
                    enesim_renderer_shape_fill_rule_set(raw, rule);
                }
            }
            
            public Enesim.Renderer.Shape.DrawModeEnum DrawMode {
                get {
                    Enesim.Renderer.Shape.DrawModeEnum ret = enesim_renderer_shape_draw_mode_get(raw);
                    return ret;
                }
                set {
                    Enesim.Renderer.Shape.DrawModeEnum draw_mode;
                    draw_mode = value;
                    enesim_renderer_shape_draw_mode_set(raw, draw_mode);
                }
            }
            
            public Enesim.Renderer.Shape.FeatureEnum GetShapeFeatures() {
                Enesim.Renderer.Shape.FeatureEnum ret = enesim_renderer_shape_shape_features_get(raw);
                return ret;
            }
            
            public void StrokeDashAddSimple(double length, double gap) {
                enesim_renderer_shape_stroke_dash_add_simple(raw, length, gap);
            }
            
            public void StrokeDashAdd(Enesim.Renderer.Shape.StrokeDash dash) {
                System.IntPtr dashRaw;
                if ((dash == null)) {
                    dashRaw = IntPtr.Zero;
                }
                else {
                    dashRaw = dash.Raw;
                }
                enesim_renderer_shape_stroke_dash_add(raw, dashRaw);
            }
            
            public void StrokeDashClear() {
                enesim_renderer_shape_stroke_dash_clear(raw);
            }
            
            public bool GetGeometry(out Enesim.Rectangle geometry) {
                geometry = new Enesim.Rectangle();
                bool ret = enesim_renderer_shape_geometry_get(raw, geometry.Raw);
                return ret;
            }
            
            public bool GetDestinationGeometry(out Enesim.Rectangle geometry) {
                geometry = new Enesim.Rectangle();
                bool ret = enesim_renderer_shape_destination_geometry_get(raw, geometry.Raw);
                return ret;
            }
            
            public enum FeatureEnum {
                
                FillRenderer,
                
                StrokeRenderer,
                
                StrokeLocation,
                
                StrokeDash,
            }
            
            public enum StrokeLocationEnum {
                
                Inside,
                
                Outside,
                
                Center,
            }
            
            public enum StrokeCapEnum {
                
                Butt,
                
                Round,
                
                Square,
            }
            
            public enum StrokeJoinEnum {
                
                Miter,
                
                Round,
                
                Bevel,
            }
            
            public enum FillRuleEnum {
                
                NonZero,
                
                EvenOdd,
            }
            
            public enum DrawModeEnum {
                
                Fill,
                
                Stroke,
            }
            
            public class StrokeDash {
                
                protected IntPtr raw;
                
                public StrokeDash() {
                    raw = Marshal.AllocHGlobal(Marshal.SizeOf(typeof(StrokeDashStruct)));
                }
                
                public System.IntPtr Raw {
                    get {
                        return this.raw;
                    }
                }
                
                [StructLayout(System.Runtime.InteropServices.LayoutKind.Sequential)]
                public struct StrokeDashStruct {
                    
                    public double length;
                    
                    public double gap;
                }
            }
        }
        
        public class Figure : Shape {
            
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern IntPtr enesim_renderer_figure_new();
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void enesim_renderer_figure_polygon_add(IntPtr self);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void enesim_renderer_figure_polygon_vertex_add(IntPtr self, double x, double y);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void enesim_renderer_figure_polygon_close(IntPtr self);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void enesim_renderer_figure_clear(IntPtr self);
            
            protected internal Figure(System.IntPtr i, bool owned) : 
                    base(i, owned) {
                Initialize(i, owned);
            }
            
            public Figure() {
                System.IntPtr ret = enesim_renderer_figure_new();
                Initialize(ret, false);
            }
            
            public void PolygonAdd() {
                enesim_renderer_figure_polygon_add(raw);
            }
            
            public void PolygonVertexAdd(double x, double y) {
                enesim_renderer_figure_polygon_vertex_add(raw, x, y);
            }
            
            public void PolygonClose() {
                enesim_renderer_figure_polygon_close(raw);
            }
            
            public void Clear() {
                enesim_renderer_figure_clear(raw);
            }
        }
        
        public class Gradient : Renderer {
            
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void enesim_renderer_gradient_stop_add(IntPtr self, IntPtr stop);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void enesim_renderer_gradient_stop_clear(IntPtr self);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern Enesim.RepeatModeEnum enesim_renderer_gradient_repeat_mode_get(IntPtr self);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void enesim_renderer_gradient_repeat_mode_set(IntPtr self, Enesim.RepeatModeEnum mode);
            
            protected Gradient() {
            }
            
            protected internal Gradient(System.IntPtr i, bool owned) : 
                    base(i, owned) {
                Initialize(i, owned);
            }
            
            public Enesim.RepeatModeEnum RepeatMode {
                get {
                    Enesim.RepeatModeEnum ret = enesim_renderer_gradient_repeat_mode_get(raw);
                    return ret;
                }
                set {
                    Enesim.RepeatModeEnum mode;
                    mode = value;
                    enesim_renderer_gradient_repeat_mode_set(raw, mode);
                }
            }
            
            public void StopAdd(Enesim.Renderer.Gradient.Stop stop) {
                System.IntPtr stopRaw;
                if ((stop == null)) {
                    stopRaw = IntPtr.Zero;
                }
                else {
                    stopRaw = stop.Raw;
                }
                enesim_renderer_gradient_stop_add(raw, stopRaw);
            }
            
            public void StopClear() {
                enesim_renderer_gradient_stop_clear(raw);
            }
            
            public class Radial : Gradient {
                
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern IntPtr enesim_renderer_gradient_radial_new();
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void enesim_renderer_gradient_radial_center_set(IntPtr self, double center_x, double center_y);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void enesim_renderer_gradient_radial_center_get(IntPtr self, out double center_x, out double center_y);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void enesim_renderer_gradient_radial_focus_set(IntPtr self, double focus_x, double focus_y);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void enesim_renderer_gradient_radial_focus_get(IntPtr self, out double focus_x, out double focus_y);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern double enesim_renderer_gradient_radial_center_x_get(IntPtr self);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void enesim_renderer_gradient_radial_center_x_set(IntPtr self, double center_x);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern double enesim_renderer_gradient_radial_center_y_get(IntPtr self);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void enesim_renderer_gradient_radial_center_y_set(IntPtr self, double center_y);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern double enesim_renderer_gradient_radial_focus_x_get(IntPtr self);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void enesim_renderer_gradient_radial_focus_x_set(IntPtr self, double focus_x);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern double enesim_renderer_gradient_radial_focus_y_get(IntPtr self);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void enesim_renderer_gradient_radial_focus_y_set(IntPtr self, double focus_y);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern double enesim_renderer_gradient_radial_radius_get(IntPtr self);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void enesim_renderer_gradient_radial_radius_set(IntPtr self, double radius);
                
                protected internal Radial(System.IntPtr i, bool owned) : 
                        base(i, owned) {
                    Initialize(i, owned);
                }
                
                public Radial() {
                    System.IntPtr ret = enesim_renderer_gradient_radial_new();
                    Initialize(ret, false);
                }
                
                public double CenterX {
                    get {
                        double ret = enesim_renderer_gradient_radial_center_x_get(raw);
                        return ret;
                    }
                    set {
                        double center_x;
                        center_x = value;
                        enesim_renderer_gradient_radial_center_x_set(raw, center_x);
                    }
                }
                
                public double CenterY {
                    get {
                        double ret = enesim_renderer_gradient_radial_center_y_get(raw);
                        return ret;
                    }
                    set {
                        double center_y;
                        center_y = value;
                        enesim_renderer_gradient_radial_center_y_set(raw, center_y);
                    }
                }
                
                public double FocusX {
                    get {
                        double ret = enesim_renderer_gradient_radial_focus_x_get(raw);
                        return ret;
                    }
                    set {
                        double focus_x;
                        focus_x = value;
                        enesim_renderer_gradient_radial_focus_x_set(raw, focus_x);
                    }
                }
                
                public double FocusY {
                    get {
                        double ret = enesim_renderer_gradient_radial_focus_y_get(raw);
                        return ret;
                    }
                    set {
                        double focus_y;
                        focus_y = value;
                        enesim_renderer_gradient_radial_focus_y_set(raw, focus_y);
                    }
                }
                
                public double Radius {
                    get {
                        double ret = enesim_renderer_gradient_radial_radius_get(raw);
                        return ret;
                    }
                    set {
                        double radius;
                        radius = value;
                        enesim_renderer_gradient_radial_radius_set(raw, radius);
                    }
                }
                
                public void SetCenter(double center_x, double center_y) {
                    enesim_renderer_gradient_radial_center_set(raw, center_x, center_y);
                }
                
                public void GetCenter(out double center_x, out double center_y) {
                    enesim_renderer_gradient_radial_center_get(raw, out  center_x, out  center_y);
                }
                
                public void SetFocus(double focus_x, double focus_y) {
                    enesim_renderer_gradient_radial_focus_set(raw, focus_x, focus_y);
                }
                
                public void GetFocus(out double focus_x, out double focus_y) {
                    enesim_renderer_gradient_radial_focus_get(raw, out  focus_x, out  focus_y);
                }
            }
            
            public class Linear : Gradient {
                
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern IntPtr enesim_renderer_gradient_linear_new();
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void enesim_renderer_gradient_linear_position_set(IntPtr self, double x0, double y0, double x1, double y1);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void enesim_renderer_gradient_linear_position_get(IntPtr self, out double x0, out double y0, out double x1, out double y1);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern double enesim_renderer_gradient_linear_x0_get(IntPtr self);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void enesim_renderer_gradient_linear_x0_set(IntPtr self, double x0);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern double enesim_renderer_gradient_linear_y0_get(IntPtr self);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void enesim_renderer_gradient_linear_y0_set(IntPtr self, double y0);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern double enesim_renderer_gradient_linear_x1_get(IntPtr self);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void enesim_renderer_gradient_linear_x1_set(IntPtr self, double x1);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern double enesim_renderer_gradient_linear_y1_get(IntPtr self);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void enesim_renderer_gradient_linear_y1_set(IntPtr self, double y1);
                
                protected internal Linear(System.IntPtr i, bool owned) : 
                        base(i, owned) {
                    Initialize(i, owned);
                }
                
                public Linear() {
                    System.IntPtr ret = enesim_renderer_gradient_linear_new();
                    Initialize(ret, false);
                }
                
                public double X0 {
                    get {
                        double ret = enesim_renderer_gradient_linear_x0_get(raw);
                        return ret;
                    }
                    set {
                        double x0;
                        x0 = value;
                        enesim_renderer_gradient_linear_x0_set(raw, x0);
                    }
                }
                
                public double Y0 {
                    get {
                        double ret = enesim_renderer_gradient_linear_y0_get(raw);
                        return ret;
                    }
                    set {
                        double y0;
                        y0 = value;
                        enesim_renderer_gradient_linear_y0_set(raw, y0);
                    }
                }
                
                public double X1 {
                    get {
                        double ret = enesim_renderer_gradient_linear_x1_get(raw);
                        return ret;
                    }
                    set {
                        double x1;
                        x1 = value;
                        enesim_renderer_gradient_linear_x1_set(raw, x1);
                    }
                }
                
                public double Y1 {
                    get {
                        double ret = enesim_renderer_gradient_linear_y1_get(raw);
                        return ret;
                    }
                    set {
                        double y1;
                        y1 = value;
                        enesim_renderer_gradient_linear_y1_set(raw, y1);
                    }
                }
                
                public void SetPosition(double x0, double y0, double x1, double y1) {
                    enesim_renderer_gradient_linear_position_set(raw, x0, y0, x1, y1);
                }
                
                public void GetPosition(out double x0, out double y0, out double x1, out double y1) {
                    enesim_renderer_gradient_linear_position_get(raw, out  x0, out  y0, out  x1, out  y1);
                }
            }
            
            public class Stop {
                
                protected IntPtr raw;
                
                public Stop() {
                    raw = Marshal.AllocHGlobal(Marshal.SizeOf(typeof(StopStruct)));
                }
                
                public System.IntPtr Raw {
                    get {
                        return this.raw;
                    }
                }
                
                [StructLayout(System.Runtime.InteropServices.LayoutKind.Sequential)]
                public struct StopStruct {
                    
                    public uint argb;
                    
                    public double pos;
                }
            }
        }
        
        public class Background : Renderer {
            
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern IntPtr enesim_renderer_background_new();
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern uint enesim_renderer_background_color_get(IntPtr self);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void enesim_renderer_background_color_set(IntPtr self, uint color);
            
            protected internal Background(System.IntPtr i, bool owned) : 
                    base(i, owned) {
                Initialize(i, owned);
            }
            
            public Background() {
                System.IntPtr ret = enesim_renderer_background_new();
                Initialize(ret, false);
            }
            
            public Enesim.Color Color {
                get {
                    uint ret = enesim_renderer_background_color_get(raw);
                    return new Color(ret);
                }
                set {
                    Enesim.Color color;
                    color = value;
                    enesim_renderer_background_color_set(raw, color);
                }
            }
        }
        
        public class Ellipse : Shape {
            
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern IntPtr enesim_renderer_ellipse_new();
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void enesim_renderer_ellipse_center_set(IntPtr self, double x, double y);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void enesim_renderer_ellipse_center_get(IntPtr self, out double x, out double y);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void enesim_renderer_ellipse_radii_set(IntPtr self, double radius_x, double radius_y);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void enesim_renderer_ellipse_radii_get(IntPtr self, out double radius_x, out double radius_y);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern double enesim_renderer_ellipse_x_get(IntPtr self);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void enesim_renderer_ellipse_x_set(IntPtr self, double x);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern double enesim_renderer_ellipse_y_get(IntPtr self);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void enesim_renderer_ellipse_y_set(IntPtr self, double y);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern double enesim_renderer_ellipse_radius_x_get(IntPtr self);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void enesim_renderer_ellipse_radius_x_set(IntPtr self, double rad);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern double enesim_renderer_ellipse_radius_y_get(IntPtr self);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void enesim_renderer_ellipse_radius_y_set(IntPtr self, double rad);
            
            protected internal Ellipse(System.IntPtr i, bool owned) : 
                    base(i, owned) {
                Initialize(i, owned);
            }
            
            public Ellipse() {
                System.IntPtr ret = enesim_renderer_ellipse_new();
                Initialize(ret, false);
            }
            
            public double X {
                get {
                    double ret = enesim_renderer_ellipse_x_get(raw);
                    return ret;
                }
                set {
                    double x;
                    x = value;
                    enesim_renderer_ellipse_x_set(raw, x);
                }
            }
            
            public double Y {
                get {
                    double ret = enesim_renderer_ellipse_y_get(raw);
                    return ret;
                }
                set {
                    double y;
                    y = value;
                    enesim_renderer_ellipse_y_set(raw, y);
                }
            }
            
            public double RadiusX {
                get {
                    double ret = enesim_renderer_ellipse_radius_x_get(raw);
                    return ret;
                }
                set {
                    double rad;
                    rad = value;
                    enesim_renderer_ellipse_radius_x_set(raw, rad);
                }
            }
            
            public double RadiusY {
                get {
                    double ret = enesim_renderer_ellipse_radius_y_get(raw);
                    return ret;
                }
                set {
                    double rad;
                    rad = value;
                    enesim_renderer_ellipse_radius_y_set(raw, rad);
                }
            }
            
            public void SetCenter(double x, double y) {
                enesim_renderer_ellipse_center_set(raw, x, y);
            }
            
            public void GetCenter(out double x, out double y) {
                enesim_renderer_ellipse_center_get(raw, out  x, out  y);
            }
            
            public void SetRadii(double radius_x, double radius_y) {
                enesim_renderer_ellipse_radii_set(raw, radius_x, radius_y);
            }
            
            public void GetRadii(out double radius_x, out double radius_y) {
                enesim_renderer_ellipse_radii_get(raw, out  radius_x, out  radius_y);
            }
        }
        
        public class Stripes : Renderer {
            
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern IntPtr enesim_renderer_stripes_new();
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern uint enesim_renderer_stripes_even_color_get(IntPtr self);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void enesim_renderer_stripes_even_color_set(IntPtr self, uint color);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern IntPtr enesim_renderer_stripes_even_renderer_get(IntPtr self);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void enesim_renderer_stripes_even_renderer_set(IntPtr self, IntPtr paint);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern double enesim_renderer_stripes_even_thickness_get(IntPtr self);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void enesim_renderer_stripes_even_thickness_set(IntPtr self, double thickness);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern uint enesim_renderer_stripes_odd_color_get(IntPtr self);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void enesim_renderer_stripes_odd_color_set(IntPtr self, uint color);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern IntPtr enesim_renderer_stripes_odd_renderer_get(IntPtr self);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void enesim_renderer_stripes_odd_renderer_set(IntPtr self, IntPtr paint);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern double enesim_renderer_stripes_odd_thickness_get(IntPtr self);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void enesim_renderer_stripes_odd_thickness_set(IntPtr self, double thickness);
            
            protected internal Stripes(System.IntPtr i, bool owned) : 
                    base(i, owned) {
                Initialize(i, owned);
            }
            
            public Stripes() {
                System.IntPtr ret = enesim_renderer_stripes_new();
                Initialize(ret, false);
            }
            
            public Enesim.Color EvenColor {
                get {
                    uint ret = enesim_renderer_stripes_even_color_get(raw);
                    return new Color(ret);
                }
                set {
                    Enesim.Color color;
                    color = value;
                    enesim_renderer_stripes_even_color_set(raw, color);
                }
            }
            
            public Enesim.Renderer EvenRenderer {
                get {
                    System.IntPtr ret = enesim_renderer_stripes_even_renderer_get(raw);
                    return new Renderer(ret, false);
                }
                set {
                    Enesim.Renderer paint;
                    paint = value;
                    System.IntPtr paintRaw;
                    if ((paint == null)) {
                        paintRaw = IntPtr.Zero;
                    }
                    else {
                        paintRaw = paint.Raw;
                    }
                    enesim_renderer_stripes_even_renderer_set(raw, paintRaw);
                }
            }
            
            public double EvenThickness {
                get {
                    double ret = enesim_renderer_stripes_even_thickness_get(raw);
                    return ret;
                }
                set {
                    double thickness;
                    thickness = value;
                    enesim_renderer_stripes_even_thickness_set(raw, thickness);
                }
            }
            
            public Enesim.Color OddColor {
                get {
                    uint ret = enesim_renderer_stripes_odd_color_get(raw);
                    return new Color(ret);
                }
                set {
                    Enesim.Color color;
                    color = value;
                    enesim_renderer_stripes_odd_color_set(raw, color);
                }
            }
            
            public Enesim.Renderer OddRenderer {
                get {
                    System.IntPtr ret = enesim_renderer_stripes_odd_renderer_get(raw);
                    return new Renderer(ret, false);
                }
                set {
                    Enesim.Renderer paint;
                    paint = value;
                    System.IntPtr paintRaw;
                    if ((paint == null)) {
                        paintRaw = IntPtr.Zero;
                    }
                    else {
                        paintRaw = paint.Raw;
                    }
                    enesim_renderer_stripes_odd_renderer_set(raw, paintRaw);
                }
            }
            
            public double OddThickness {
                get {
                    double ret = enesim_renderer_stripes_odd_thickness_get(raw);
                    return ret;
                }
                set {
                    double thickness;
                    thickness = value;
                    enesim_renderer_stripes_odd_thickness_set(raw, thickness);
                }
            }
        }
        
        public class Path : Shape {
            
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern IntPtr enesim_renderer_path_new();
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern IntPtr enesim_renderer_path_path_get(IntPtr self);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void enesim_renderer_path_path_set(IntPtr self, IntPtr path);
            
            protected internal Path(System.IntPtr i, bool owned) : 
                    base(i, owned) {
                Initialize(i, owned);
            }
            
            public Path() {
                System.IntPtr ret = enesim_renderer_path_new();
                Initialize(ret, false);
            }
            
            public Enesim.Path Path {
                get {
                    System.IntPtr ret = enesim_renderer_path_path_get(raw);
                    return new Path(ret, false);
                }
                set {
                    Enesim.Path path;
                    path = value;
                    System.IntPtr pathRaw;
                    if ((path == null)) {
                        pathRaw = IntPtr.Zero;
                    }
                    else {
                        pathRaw = path.Raw;
                    }
                    enesim_renderer_path_path_set(raw, pathRaw);
                }
            }
        }
        
        public class Raddist : Renderer {
            
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern IntPtr enesim_renderer_raddist_new();
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern double enesim_renderer_raddist_radius_get(IntPtr self);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void enesim_renderer_raddist_radius_set(IntPtr self, double radius);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern double enesim_renderer_raddist_factor_get(IntPtr self);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void enesim_renderer_raddist_factor_set(IntPtr self, double factor);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern IntPtr enesim_renderer_raddist_source_surface_get(IntPtr self);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void enesim_renderer_raddist_source_surface_set(IntPtr self, IntPtr src);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void enesim_renderer_raddist_x_set(IntPtr self, double ox);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void enesim_renderer_raddist_y_set(IntPtr self, double oy);
            
            protected internal Raddist(System.IntPtr i, bool owned) : 
                    base(i, owned) {
                Initialize(i, owned);
            }
            
            public Raddist() {
                System.IntPtr ret = enesim_renderer_raddist_new();
                Initialize(ret, false);
            }
            
            public double Radius {
                get {
                    double ret = enesim_renderer_raddist_radius_get(raw);
                    return ret;
                }
                set {
                    double radius;
                    radius = value;
                    enesim_renderer_raddist_radius_set(raw, radius);
                }
            }
            
            public double Factor {
                get {
                    double ret = enesim_renderer_raddist_factor_get(raw);
                    return ret;
                }
                set {
                    double factor;
                    factor = value;
                    enesim_renderer_raddist_factor_set(raw, factor);
                }
            }
            
            public Enesim.Surface SourceSurface {
                get {
                    System.IntPtr ret = enesim_renderer_raddist_source_surface_get(raw);
                    return new Surface(ret, false);
                }
                set {
                    Enesim.Surface src;
                    src = value;
                    System.IntPtr srcRaw;
                    if ((src == null)) {
                        srcRaw = IntPtr.Zero;
                    }
                    else {
                        srcRaw = src.Raw;
                    }
                    enesim_renderer_raddist_source_surface_set(raw, srcRaw);
                }
            }
            
            public double X {
                set {
                    double ox;
                    ox = value;
                    enesim_renderer_raddist_x_set(raw, ox);
                }
            }
            
            public double Y {
                set {
                    double oy;
                    oy = value;
                    enesim_renderer_raddist_y_set(raw, oy);
                }
            }
        }
        
        public class Grid : Renderer {
            
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern IntPtr enesim_renderer_grid_new();
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern uint enesim_renderer_grid_inside_width_get(IntPtr self);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void enesim_renderer_grid_inside_width_set(IntPtr self, uint width);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern uint enesim_renderer_grid_inside_height_get(IntPtr self);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void enesim_renderer_grid_inside_height_set(IntPtr self, uint height);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern uint enesim_renderer_grid_inside_color_get(IntPtr self);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void enesim_renderer_grid_inside_color_set(IntPtr self, uint color);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern uint enesim_renderer_grid_border_hthickness_get(IntPtr self);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void enesim_renderer_grid_border_hthickness_set(IntPtr self, uint hthickness);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern uint enesim_renderer_grid_border_vthickness_get(IntPtr self);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void enesim_renderer_grid_border_vthickness_set(IntPtr self, uint vthickness);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern uint enesim_renderer_grid_border_color_get(IntPtr self);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void enesim_renderer_grid_border_color_set(IntPtr self, uint color);
            
            protected internal Grid(System.IntPtr i, bool owned) : 
                    base(i, owned) {
                Initialize(i, owned);
            }
            
            public Grid() {
                System.IntPtr ret = enesim_renderer_grid_new();
                Initialize(ret, false);
            }
            
            public uint InsideWidth {
                get {
                    uint ret = enesim_renderer_grid_inside_width_get(raw);
                    return ret;
                }
                set {
                    uint width;
                    width = value;
                    enesim_renderer_grid_inside_width_set(raw, width);
                }
            }
            
            public uint InsideHeight {
                get {
                    uint ret = enesim_renderer_grid_inside_height_get(raw);
                    return ret;
                }
                set {
                    uint height;
                    height = value;
                    enesim_renderer_grid_inside_height_set(raw, height);
                }
            }
            
            public Enesim.Color InsideColor {
                get {
                    uint ret = enesim_renderer_grid_inside_color_get(raw);
                    return new Color(ret);
                }
                set {
                    Enesim.Color color;
                    color = value;
                    enesim_renderer_grid_inside_color_set(raw, color);
                }
            }
            
            public uint BorderHthickness {
                get {
                    uint ret = enesim_renderer_grid_border_hthickness_get(raw);
                    return ret;
                }
                set {
                    uint hthickness;
                    hthickness = value;
                    enesim_renderer_grid_border_hthickness_set(raw, hthickness);
                }
            }
            
            public uint BorderVthickness {
                get {
                    uint ret = enesim_renderer_grid_border_vthickness_get(raw);
                    return ret;
                }
                set {
                    uint vthickness;
                    vthickness = value;
                    enesim_renderer_grid_border_vthickness_set(raw, vthickness);
                }
            }
            
            public Enesim.Color BorderColor {
                get {
                    uint ret = enesim_renderer_grid_border_color_get(raw);
                    return new Color(ret);
                }
                set {
                    Enesim.Color color;
                    color = value;
                    enesim_renderer_grid_border_color_set(raw, color);
                }
            }
        }
        
        public class Perlin : Renderer {
            
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern IntPtr enesim_renderer_perlin_new();
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void enesim_renderer_perlin_octaves_set(IntPtr self, uint octaves);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void enesim_renderer_perlin_persistence_set(IntPtr self, double persistence);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void enesim_renderer_perlin_amplitude_set(IntPtr self, double ampl);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void enesim_renderer_perlin_xfrequency_set(IntPtr self, double freq);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void enesim_renderer_perlin_yfrequency_set(IntPtr self, double freq);
            
            protected internal Perlin(System.IntPtr i, bool owned) : 
                    base(i, owned) {
                Initialize(i, owned);
            }
            
            public Perlin() {
                System.IntPtr ret = enesim_renderer_perlin_new();
                Initialize(ret, false);
            }
            
            public uint Octaves {
                set {
                    uint octaves;
                    octaves = value;
                    enesim_renderer_perlin_octaves_set(raw, octaves);
                }
            }
            
            public double Persistence {
                set {
                    double persistence;
                    persistence = value;
                    enesim_renderer_perlin_persistence_set(raw, persistence);
                }
            }
            
            public double Amplitude {
                set {
                    double ampl;
                    ampl = value;
                    enesim_renderer_perlin_amplitude_set(raw, ampl);
                }
            }
            
            public double Xfrequency {
                set {
                    double freq;
                    freq = value;
                    enesim_renderer_perlin_xfrequency_set(raw, freq);
                }
            }
            
            public double Yfrequency {
                set {
                    double freq;
                    freq = value;
                    enesim_renderer_perlin_yfrequency_set(raw, freq);
                }
            }
        }
        
        public class Compound : Renderer {
            
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern IntPtr enesim_renderer_compound_new();
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void enesim_renderer_compound_layer_add(IntPtr self, IntPtr layer);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void enesim_renderer_compound_layer_remove(IntPtr self, IntPtr layer);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void enesim_renderer_compound_layer_clear(IntPtr self);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void enesim_renderer_compound_layer_foreach(IntPtr self, IntPtr cb, IntPtr data);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void enesim_renderer_compound_layer_reverse_foreach(IntPtr self, IntPtr cb, IntPtr data);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern bool enesim_renderer_compound_background_enable_get(IntPtr self);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void enesim_renderer_compound_background_enable_set(IntPtr self, bool enable);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern uint enesim_renderer_compound_background_color_get(IntPtr self);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void enesim_renderer_compound_background_color_set(IntPtr self, uint color);
            
            protected internal Compound(System.IntPtr i, bool owned) : 
                    base(i, owned) {
                Initialize(i, owned);
            }
            
            public Compound() {
                System.IntPtr ret = enesim_renderer_compound_new();
                Initialize(ret, false);
            }
            
            public bool BackgroundEnable {
                get {
                    bool ret = enesim_renderer_compound_background_enable_get(raw);
                    return ret;
                }
                set {
                    bool enable;
                    enable = value;
                    enesim_renderer_compound_background_enable_set(raw, enable);
                }
            }
            
            public Enesim.Color BackgroundColor {
                get {
                    uint ret = enesim_renderer_compound_background_color_get(raw);
                    return new Color(ret);
                }
                set {
                    Enesim.Color color;
                    color = value;
                    enesim_renderer_compound_background_color_set(raw, color);
                }
            }
            
            public void LayerAdd(Enesim.Renderer.Compound.Layer layer) {
                System.IntPtr layerRaw;
                if ((layer == null)) {
                    layerRaw = IntPtr.Zero;
                }
                else {
                    layerRaw = layer.Raw;
                }
                enesim_renderer_compound_layer_add(raw, layerRaw);
            }
            
            public void LayerRemove(Enesim.Renderer.Compound.Layer layer) {
                System.IntPtr layerRaw;
                if ((layer == null)) {
                    layerRaw = IntPtr.Zero;
                }
                else {
                    layerRaw = layer.Raw;
                }
                enesim_renderer_compound_layer_remove(raw, layerRaw);
            }
            
            public void LayerClear() {
                enesim_renderer_compound_layer_clear(raw);
            }
            
            public void LayerForeach(System.IntPtr cb, System.IntPtr data) {
                enesim_renderer_compound_layer_foreach(raw, cb, data);
            }
            
            public void LayerReverseForeach(System.IntPtr cb, System.IntPtr data) {
                enesim_renderer_compound_layer_reverse_foreach(raw, cb, data);
            }
            
            public class Layer : IDisposable {
                
                protected IntPtr raw;
                
                private bool disposed;
                
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern IntPtr enesim_renderer_compound_layer_new();
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern IntPtr enesim_renderer_compound_layer_ref(IntPtr self);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void enesim_renderer_compound_layer_unref(IntPtr self);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void enesim_renderer_compound_layer_renderer_set(IntPtr self, IntPtr r);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void enesim_renderer_compound_layer_rop_set(IntPtr self, Enesim.RopEnum rop);
~Layer() { Dispose(false); }
                
                protected internal Layer(System.IntPtr i, bool owned) {
                    Initialize(i, owned);
                }
                
                public Layer() {
                    System.IntPtr ret = enesim_renderer_compound_layer_new();
                    Initialize(ret, false);
                }
                
                public System.IntPtr Raw {
                    get {
                        return this.raw;
                    }
                }
                
                public Enesim.Renderer Renderer {
                    set {
                        Enesim.Renderer r;
                        r = value;
                        System.IntPtr rRaw;
                        if ((r == null)) {
                            rRaw = IntPtr.Zero;
                        }
                        else {
                            rRaw = r.Raw;
                        }
                        enesim_renderer_compound_layer_renderer_set(raw, rRaw);
                    }
                }
                
                public Enesim.RopEnum Rop {
                    set {
                        Enesim.RopEnum rop;
                        rop = value;
                        enesim_renderer_compound_layer_rop_set(raw, rop);
                    }
                }
                
                public virtual void Dispose() {
                    Dispose(false);
                    GC.SuppressFinalize(this);
                }
                
                protected virtual void Dispose(bool disposing) {
                    if (disposed) {
                    }
                    else {
                        enesim_renderer_compound_layer_unref(raw);
                        raw = IntPtr.Zero;
                        disposed = false;
                    }
                }
                
                protected virtual void Initialize(System.IntPtr i, bool owned) {
                    raw = i;
                    if (owned) {
                        enesim_renderer_compound_layer_ref(i);
                    }
                }
            }
        }
        
        public class Checker : Renderer {
            
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern IntPtr enesim_renderer_checker_new();
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern uint enesim_renderer_checker_even_color_get(IntPtr self);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void enesim_renderer_checker_even_color_set(IntPtr self, uint color);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern uint enesim_renderer_checker_odd_color_get(IntPtr self);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void enesim_renderer_checker_odd_color_set(IntPtr self, uint color);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern int enesim_renderer_checker_width_get(IntPtr self);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void enesim_renderer_checker_width_set(IntPtr self, int width);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern int enesim_renderer_checker_height_get(IntPtr self);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void enesim_renderer_checker_height_set(IntPtr self, int height);
            
            protected internal Checker(System.IntPtr i, bool owned) : 
                    base(i, owned) {
                Initialize(i, owned);
            }
            
            public Checker() {
                System.IntPtr ret = enesim_renderer_checker_new();
                Initialize(ret, false);
            }
            
            public Enesim.Color EvenColor {
                get {
                    uint ret = enesim_renderer_checker_even_color_get(raw);
                    return new Color(ret);
                }
                set {
                    Enesim.Color color;
                    color = value;
                    enesim_renderer_checker_even_color_set(raw, color);
                }
            }
            
            public Enesim.Color OddColor {
                get {
                    uint ret = enesim_renderer_checker_odd_color_get(raw);
                    return new Color(ret);
                }
                set {
                    Enesim.Color color;
                    color = value;
                    enesim_renderer_checker_odd_color_set(raw, color);
                }
            }
            
            public int Width {
                get {
                    int ret = enesim_renderer_checker_width_get(raw);
                    return ret;
                }
                set {
                    int width;
                    width = value;
                    enesim_renderer_checker_width_set(raw, width);
                }
            }
            
            public int Height {
                get {
                    int ret = enesim_renderer_checker_height_get(raw);
                    return ret;
                }
                set {
                    int height;
                    height = value;
                    enesim_renderer_checker_height_set(raw, height);
                }
            }
        }
        
        public class Line : Shape {
            
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern IntPtr enesim_renderer_line_new();
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void enesim_renderer_line_coords_set(IntPtr self, double x0, double y0, double x1, double y1);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void enesim_renderer_line_coords_get(IntPtr self, out double x0, out double y0, out double x1, out double y1);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern double enesim_renderer_line_x0_get(IntPtr self);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void enesim_renderer_line_x0_set(IntPtr self, double x0);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern double enesim_renderer_line_y0_get(IntPtr self);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void enesim_renderer_line_y0_set(IntPtr self, double y0);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern double enesim_renderer_line_x1_get(IntPtr self);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void enesim_renderer_line_x1_set(IntPtr self, double x1);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern double enesim_renderer_line_y1_get(IntPtr self);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void enesim_renderer_line_y1_set(IntPtr self, double y1);
            
            protected internal Line(System.IntPtr i, bool owned) : 
                    base(i, owned) {
                Initialize(i, owned);
            }
            
            public Line() {
                System.IntPtr ret = enesim_renderer_line_new();
                Initialize(ret, false);
            }
            
            public double X0 {
                get {
                    double ret = enesim_renderer_line_x0_get(raw);
                    return ret;
                }
                set {
                    double x0;
                    x0 = value;
                    enesim_renderer_line_x0_set(raw, x0);
                }
            }
            
            public double Y0 {
                get {
                    double ret = enesim_renderer_line_y0_get(raw);
                    return ret;
                }
                set {
                    double y0;
                    y0 = value;
                    enesim_renderer_line_y0_set(raw, y0);
                }
            }
            
            public double X1 {
                get {
                    double ret = enesim_renderer_line_x1_get(raw);
                    return ret;
                }
                set {
                    double x1;
                    x1 = value;
                    enesim_renderer_line_x1_set(raw, x1);
                }
            }
            
            public double Y1 {
                get {
                    double ret = enesim_renderer_line_y1_get(raw);
                    return ret;
                }
                set {
                    double y1;
                    y1 = value;
                    enesim_renderer_line_y1_set(raw, y1);
                }
            }
            
            public void SetCoords(double x0, double y0, double x1, double y1) {
                enesim_renderer_line_coords_set(raw, x0, y0, x1, y1);
            }
            
            public void GetCoords(out double x0, out double y0, out double x1, out double y1) {
                enesim_renderer_line_coords_get(raw, out  x0, out  y0, out  x1, out  y1);
            }
        }
        
        public class Blur : Renderer {
            
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern IntPtr enesim_renderer_blur_new();
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern IntPtr enesim_renderer_blur_source_surface_get(IntPtr self);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void enesim_renderer_blur_source_surface_set(IntPtr self, IntPtr src);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern IntPtr enesim_renderer_blur_source_renderer_get(IntPtr self);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void enesim_renderer_blur_source_renderer_set(IntPtr self, IntPtr sr);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern Enesim.Renderer.Blur.ChannelEnum enesim_renderer_blur_channel_get(IntPtr self);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void enesim_renderer_blur_channel_set(IntPtr self, Enesim.Renderer.Blur.ChannelEnum channel);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern double enesim_renderer_blur_radius_x_get(IntPtr self);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void enesim_renderer_blur_radius_x_set(IntPtr self, double rx);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern double enesim_renderer_blur_radius_y_get(IntPtr self);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void enesim_renderer_blur_radius_y_set(IntPtr self, double ry);
            
            protected internal Blur(System.IntPtr i, bool owned) : 
                    base(i, owned) {
                Initialize(i, owned);
            }
            
            public Blur() {
                System.IntPtr ret = enesim_renderer_blur_new();
                Initialize(ret, false);
            }
            
            public Enesim.Surface SourceSurface {
                get {
                    System.IntPtr ret = enesim_renderer_blur_source_surface_get(raw);
                    return new Surface(ret, false);
                }
                set {
                    Enesim.Surface src;
                    src = value;
                    System.IntPtr srcRaw;
                    if ((src == null)) {
                        srcRaw = IntPtr.Zero;
                    }
                    else {
                        srcRaw = src.Raw;
                    }
                    enesim_renderer_blur_source_surface_set(raw, srcRaw);
                }
            }
            
            public Enesim.Renderer SourceRenderer {
                get {
                    System.IntPtr ret = enesim_renderer_blur_source_renderer_get(raw);
                    return new Renderer(ret, false);
                }
                set {
                    Enesim.Renderer sr;
                    sr = value;
                    System.IntPtr srRaw;
                    if ((sr == null)) {
                        srRaw = IntPtr.Zero;
                    }
                    else {
                        srRaw = sr.Raw;
                    }
                    enesim_renderer_blur_source_renderer_set(raw, srRaw);
                }
            }
            
            public Enesim.Renderer.Blur.ChannelEnum Channel {
                get {
                    Enesim.Renderer.Blur.ChannelEnum ret = enesim_renderer_blur_channel_get(raw);
                    return ret;
                }
                set {
                    Enesim.Renderer.Blur.ChannelEnum channel;
                    channel = value;
                    enesim_renderer_blur_channel_set(raw, channel);
                }
            }
            
            public double RadiusX {
                get {
                    double ret = enesim_renderer_blur_radius_x_get(raw);
                    return ret;
                }
                set {
                    double rx;
                    rx = value;
                    enesim_renderer_blur_radius_x_set(raw, rx);
                }
            }
            
            public double RadiusY {
                get {
                    double ret = enesim_renderer_blur_radius_y_get(raw);
                    return ret;
                }
                set {
                    double ry;
                    ry = value;
                    enesim_renderer_blur_radius_y_set(raw, ry);
                }
            }
            
            public enum ChannelEnum {
                
                Color,
                
                Alpha,
            }
        }
        
        public class Rectangle : Shape {
            
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern IntPtr enesim_renderer_rectangle_new();
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void enesim_renderer_rectangle_position_set(IntPtr self, double x, double y);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void enesim_renderer_rectangle_position_get(IntPtr self, out double x, out double y);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void enesim_renderer_rectangle_size_set(IntPtr self, double w, double h);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void enesim_renderer_rectangle_size_get(IntPtr self, out double w, out double h);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void enesim_renderer_rectangle_corner_radius_x_set(IntPtr self, double rx);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern double enesim_renderer_rectangle_corner_radius_x_get(IntPtr self);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void enesim_renderer_rectangle_corner_radius_y_set(IntPtr self, double ry);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern double enesim_renderer_rectangle_corner_radius_y_get(IntPtr self);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void enesim_renderer_rectangle_corner_radii_set(IntPtr self, double rx, double ry);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void enesim_renderer_rectangle_corner_radii_get(IntPtr self, double rx, double ry);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void enesim_renderer_rectangle_corners_set(IntPtr self, bool tl, bool tr, bool bl, bool br);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void enesim_renderer_rectangle_corners_get(IntPtr self, out bool tl, out bool tr, out bool bl, out bool br);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void enesim_renderer_rectangle_top_left_corner_set(IntPtr self, bool rounded);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern bool enesim_renderer_rectangle_top_left_corner_get(IntPtr self);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void enesim_renderer_rectangle_top_right_corner_set(IntPtr self, bool rounded);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern bool enesim_renderer_rectangle_top_right_corner_get(IntPtr self);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void enesim_renderer_rectangle_bottom_left_corner_set(IntPtr self, bool rounded);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern bool enesim_renderer_rectangle_bottom_left_corner_get(IntPtr self);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void enesim_renderer_rectangle_bottom_right_corner_set(IntPtr self, bool rounded);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern bool enesim_renderer_rectangle_bottom_right_corner_get(IntPtr self);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern double enesim_renderer_rectangle_x_get(IntPtr self);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void enesim_renderer_rectangle_x_set(IntPtr self, double x);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern double enesim_renderer_rectangle_y_get(IntPtr self);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void enesim_renderer_rectangle_y_set(IntPtr self, double y);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern double enesim_renderer_rectangle_width_get(IntPtr self);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void enesim_renderer_rectangle_width_set(IntPtr self, double w);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern double enesim_renderer_rectangle_height_get(IntPtr self);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void enesim_renderer_rectangle_height_set(IntPtr self, double h);
            
            protected internal Rectangle(System.IntPtr i, bool owned) : 
                    base(i, owned) {
                Initialize(i, owned);
            }
            
            public Rectangle() {
                System.IntPtr ret = enesim_renderer_rectangle_new();
                Initialize(ret, false);
            }
            
            public double X {
                get {
                    double ret = enesim_renderer_rectangle_x_get(raw);
                    return ret;
                }
                set {
                    double x;
                    x = value;
                    enesim_renderer_rectangle_x_set(raw, x);
                }
            }
            
            public double Y {
                get {
                    double ret = enesim_renderer_rectangle_y_get(raw);
                    return ret;
                }
                set {
                    double y;
                    y = value;
                    enesim_renderer_rectangle_y_set(raw, y);
                }
            }
            
            public double Width {
                get {
                    double ret = enesim_renderer_rectangle_width_get(raw);
                    return ret;
                }
                set {
                    double w;
                    w = value;
                    enesim_renderer_rectangle_width_set(raw, w);
                }
            }
            
            public double Height {
                get {
                    double ret = enesim_renderer_rectangle_height_get(raw);
                    return ret;
                }
                set {
                    double h;
                    h = value;
                    enesim_renderer_rectangle_height_set(raw, h);
                }
            }
            
            public void SetPosition(double x, double y) {
                enesim_renderer_rectangle_position_set(raw, x, y);
            }
            
            public void GetPosition(out double x, out double y) {
                enesim_renderer_rectangle_position_get(raw, out  x, out  y);
            }
            
            public void SetSize(double w, double h) {
                enesim_renderer_rectangle_size_set(raw, w, h);
            }
            
            public void GetSize(out double w, out double h) {
                enesim_renderer_rectangle_size_get(raw, out  w, out  h);
            }
            
            public void SetCornerRadiusX(double rx) {
                enesim_renderer_rectangle_corner_radius_x_set(raw, rx);
            }
            
            public double GetCornerRadiusX() {
                double ret = enesim_renderer_rectangle_corner_radius_x_get(raw);
                return ret;
            }
            
            public void SetCornerRadiusY(double ry) {
                enesim_renderer_rectangle_corner_radius_y_set(raw, ry);
            }
            
            public double GetCornerRadiusY() {
                double ret = enesim_renderer_rectangle_corner_radius_y_get(raw);
                return ret;
            }
            
            public void SetCornerRadii(double rx, double ry) {
                enesim_renderer_rectangle_corner_radii_set(raw, rx, ry);
            }
            
            public void GetCornerRadii(double rx, double ry) {
                enesim_renderer_rectangle_corner_radii_get(raw, rx, ry);
            }
            
            public void SetCorners(bool tl, bool tr, bool bl, bool br) {
                enesim_renderer_rectangle_corners_set(raw, tl, tr, bl, br);
            }
            
            public void GetCorners(out bool tl, out bool tr, out bool bl, out bool br) {
                enesim_renderer_rectangle_corners_get(raw, out  tl, out  tr, out  bl, out  br);
            }
            
            public void SetTopLeftCorner(bool rounded) {
                enesim_renderer_rectangle_top_left_corner_set(raw, rounded);
            }
            
            public bool GetTopLeftCorner() {
                bool ret = enesim_renderer_rectangle_top_left_corner_get(raw);
                return ret;
            }
            
            public void SetTopRightCorner(bool rounded) {
                enesim_renderer_rectangle_top_right_corner_set(raw, rounded);
            }
            
            public bool GetTopRightCorner() {
                bool ret = enesim_renderer_rectangle_top_right_corner_get(raw);
                return ret;
            }
            
            public void SetBottomLeftCorner(bool rounded) {
                enesim_renderer_rectangle_bottom_left_corner_set(raw, rounded);
            }
            
            public bool GetBottomLeftCorner() {
                bool ret = enesim_renderer_rectangle_bottom_left_corner_get(raw);
                return ret;
            }
            
            public void SetBottomRightCorner(bool rounded) {
                enesim_renderer_rectangle_bottom_right_corner_set(raw, rounded);
            }
            
            public bool GetBottomRightCorner() {
                bool ret = enesim_renderer_rectangle_bottom_right_corner_get(raw);
                return ret;
            }
        }
        
        public class Image : Renderer {
            
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern IntPtr enesim_renderer_image_new();
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void enesim_renderer_image_position_set(IntPtr self, double x, double y);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void enesim_renderer_image_position_get(IntPtr self, out double x, out double y);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void enesim_renderer_image_size_set(IntPtr self, double w, double h);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void enesim_renderer_image_size_get(IntPtr self, out double w, out double h);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void enesim_renderer_image_damage_add(IntPtr self, IntPtr area);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern double enesim_renderer_image_x_get(IntPtr self);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void enesim_renderer_image_x_set(IntPtr self, double x);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern double enesim_renderer_image_y_get(IntPtr self);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void enesim_renderer_image_y_set(IntPtr self, double y);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern double enesim_renderer_image_width_get(IntPtr self);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void enesim_renderer_image_width_set(IntPtr self, double w);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern double enesim_renderer_image_height_get(IntPtr self);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void enesim_renderer_image_height_set(IntPtr self, double h);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern IntPtr enesim_renderer_image_source_surface_get(IntPtr self);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void enesim_renderer_image_source_surface_set(IntPtr self, IntPtr src);
            
            protected internal Image(System.IntPtr i, bool owned) : 
                    base(i, owned) {
                Initialize(i, owned);
            }
            
            public Image() {
                System.IntPtr ret = enesim_renderer_image_new();
                Initialize(ret, false);
            }
            
            public double X {
                get {
                    double ret = enesim_renderer_image_x_get(raw);
                    return ret;
                }
                set {
                    double x;
                    x = value;
                    enesim_renderer_image_x_set(raw, x);
                }
            }
            
            public double Y {
                get {
                    double ret = enesim_renderer_image_y_get(raw);
                    return ret;
                }
                set {
                    double y;
                    y = value;
                    enesim_renderer_image_y_set(raw, y);
                }
            }
            
            public double Width {
                get {
                    double ret = enesim_renderer_image_width_get(raw);
                    return ret;
                }
                set {
                    double w;
                    w = value;
                    enesim_renderer_image_width_set(raw, w);
                }
            }
            
            public double Height {
                get {
                    double ret = enesim_renderer_image_height_get(raw);
                    return ret;
                }
                set {
                    double h;
                    h = value;
                    enesim_renderer_image_height_set(raw, h);
                }
            }
            
            public Enesim.Surface SourceSurface {
                get {
                    System.IntPtr ret = enesim_renderer_image_source_surface_get(raw);
                    return new Surface(ret, false);
                }
                set {
                    Enesim.Surface src;
                    src = value;
                    System.IntPtr srcRaw;
                    if ((src == null)) {
                        srcRaw = IntPtr.Zero;
                    }
                    else {
                        srcRaw = src.Raw;
                    }
                    enesim_renderer_image_source_surface_set(raw, srcRaw);
                }
            }
            
            public void SetPosition(double x, double y) {
                enesim_renderer_image_position_set(raw, x, y);
            }
            
            public void GetPosition(out double x, out double y) {
                enesim_renderer_image_position_get(raw, out  x, out  y);
            }
            
            public void SetSize(double w, double h) {
                enesim_renderer_image_size_set(raw, w, h);
            }
            
            public void GetSize(out double w, out double h) {
                enesim_renderer_image_size_get(raw, out  w, out  h);
            }
            
            public void DamageAdd(Eina.Rectangle area) {
                System.IntPtr areaRaw;
                if ((area == null)) {
                    areaRaw = IntPtr.Zero;
                }
                else {
                    areaRaw = area.Raw;
                }
                enesim_renderer_image_damage_add(raw, areaRaw);
            }
        }
        
        public class Pattern : Renderer {
            
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern IntPtr enesim_renderer_pattern_new();
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void enesim_renderer_pattern_enesim_surface_pattern_source_surface_set(IntPtr self, IntPtr source);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern IntPtr enesim_renderer_pattern_source_renderer_get(IntPtr self);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void enesim_renderer_pattern_source_renderer_set(IntPtr self, IntPtr source);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern IntPtr enesim_renderer_pattern_source_surface_get(IntPtr self);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern Enesim.RepeatModeEnum enesim_renderer_pattern_repeat_mode_get(IntPtr self);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void enesim_renderer_pattern_repeat_mode_set(IntPtr self, Enesim.RepeatModeEnum mode);
            
            protected internal Pattern(System.IntPtr i, bool owned) : 
                    base(i, owned) {
                Initialize(i, owned);
            }
            
            public Pattern() {
                System.IntPtr ret = enesim_renderer_pattern_new();
                Initialize(ret, false);
            }
            
            public Enesim.Renderer SourceRenderer {
                get {
                    System.IntPtr ret = enesim_renderer_pattern_source_renderer_get(raw);
                    return new Renderer(ret, false);
                }
                set {
                    Enesim.Renderer source;
                    source = value;
                    System.IntPtr sourceRaw;
                    if ((source == null)) {
                        sourceRaw = IntPtr.Zero;
                    }
                    else {
                        sourceRaw = source.Raw;
                    }
                    enesim_renderer_pattern_source_renderer_set(raw, sourceRaw);
                }
            }
            
            public Enesim.Surface SourceSurface {
                get {
                    System.IntPtr ret = enesim_renderer_pattern_source_surface_get(raw);
                    return new Surface(ret, false);
                }
            }
            
            public Enesim.RepeatModeEnum RepeatMode {
                get {
                    Enesim.RepeatModeEnum ret = enesim_renderer_pattern_repeat_mode_get(raw);
                    return ret;
                }
                set {
                    Enesim.RepeatModeEnum mode;
                    mode = value;
                    enesim_renderer_pattern_repeat_mode_set(raw, mode);
                }
            }
            
            public void SetEnesimSurfacePatternSourceSurface(Enesim.Surface source) {
                System.IntPtr sourceRaw;
                if ((source == null)) {
                    sourceRaw = IntPtr.Zero;
                }
                else {
                    sourceRaw = source.Raw;
                }
                enesim_renderer_pattern_enesim_surface_pattern_source_surface_set(raw, sourceRaw);
            }
        }
        
        public class Circle : Shape {
            
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern IntPtr enesim_renderer_circle_new();
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void enesim_renderer_circle_center_set(IntPtr self, double x, double y);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void enesim_renderer_circle_center_get(IntPtr self, out double x, out double y);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern double enesim_renderer_circle_x_get(IntPtr self);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void enesim_renderer_circle_x_set(IntPtr self, double x);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern double enesim_renderer_circle_y_get(IntPtr self);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void enesim_renderer_circle_y_set(IntPtr self, double y);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern double enesim_renderer_circle_radius_get(IntPtr self);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void enesim_renderer_circle_radius_set(IntPtr self, double radius);
            
            protected internal Circle(System.IntPtr i, bool owned) : 
                    base(i, owned) {
                Initialize(i, owned);
            }
            
            public Circle() {
                System.IntPtr ret = enesim_renderer_circle_new();
                Initialize(ret, false);
            }
            
            public double X {
                get {
                    double ret = enesim_renderer_circle_x_get(raw);
                    return ret;
                }
                set {
                    double x;
                    x = value;
                    enesim_renderer_circle_x_set(raw, x);
                }
            }
            
            public double Y {
                get {
                    double ret = enesim_renderer_circle_y_get(raw);
                    return ret;
                }
                set {
                    double y;
                    y = value;
                    enesim_renderer_circle_y_set(raw, y);
                }
            }
            
            public double Radius {
                get {
                    double ret = enesim_renderer_circle_radius_get(raw);
                    return ret;
                }
                set {
                    double radius;
                    radius = value;
                    enesim_renderer_circle_radius_set(raw, radius);
                }
            }
            
            public void SetCenter(double x, double y) {
                enesim_renderer_circle_center_set(raw, x, y);
            }
            
            public void GetCenter(out double x, out double y) {
                enesim_renderer_circle_center_get(raw, out  x, out  y);
            }
        }
        
        public class Clipper : Renderer {
            
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern IntPtr enesim_renderer_clipper_new();
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void enesim_renderer_clipper_clipped_set(IntPtr self, IntPtr clipped);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern IntPtr enesim_renderer_clipper_clipped_get(IntPtr self);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void enesim_renderer_clipper_x_set(IntPtr self, int x);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern int enesim_renderer_clipper_x_get(IntPtr self);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void enesim_renderer_clipper_y_set(IntPtr self, int y);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern int enesim_renderer_clipper_y_get(IntPtr self);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void enesim_renderer_clipper_position_set(IntPtr self, int x, int y);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void enesim_renderer_clipper_position_get(IntPtr self, out int x, out int y);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void enesim_renderer_clipper_width_set(IntPtr self, int width);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern int enesim_renderer_clipper_width_get(IntPtr self);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void enesim_renderer_clipper_height_set(IntPtr self, int height);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern int enesim_renderer_clipper_height_get(IntPtr self);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void enesim_renderer_clipper_size_set(IntPtr self, int w, int h);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void enesim_renderer_clipper_size_get(IntPtr self, out int w, out int h);
            
            protected internal Clipper(System.IntPtr i, bool owned) : 
                    base(i, owned) {
                Initialize(i, owned);
            }
            
            public Clipper() {
                System.IntPtr ret = enesim_renderer_clipper_new();
                Initialize(ret, false);
            }
            
            public void SetClipped(Enesim.Renderer clipped) {
                System.IntPtr clippedRaw;
                if ((clipped == null)) {
                    clippedRaw = IntPtr.Zero;
                }
                else {
                    clippedRaw = clipped.Raw;
                }
                enesim_renderer_clipper_clipped_set(raw, clippedRaw);
            }
            
            public Enesim.Renderer GetClipped() {
                System.IntPtr ret = enesim_renderer_clipper_clipped_get(raw);
                return new Renderer(ret, false);
            }
            
            public void SetX(int x) {
                enesim_renderer_clipper_x_set(raw, x);
            }
            
            public int GetX() {
                int ret = enesim_renderer_clipper_x_get(raw);
                return ret;
            }
            
            public void SetY(int y) {
                enesim_renderer_clipper_y_set(raw, y);
            }
            
            public int GetY() {
                int ret = enesim_renderer_clipper_y_get(raw);
                return ret;
            }
            
            public void SetPosition(int x, int y) {
                enesim_renderer_clipper_position_set(raw, x, y);
            }
            
            public void GetPosition(out int x, out int y) {
                enesim_renderer_clipper_position_get(raw, out  x, out  y);
            }
            
            public void SetWidth(int width) {
                enesim_renderer_clipper_width_set(raw, width);
            }
            
            public int GetWidth() {
                int ret = enesim_renderer_clipper_width_get(raw);
                return ret;
            }
            
            public void SetHeight(int height) {
                enesim_renderer_clipper_height_set(raw, height);
            }
            
            public int GetHeight() {
                int ret = enesim_renderer_clipper_height_get(raw);
                return ret;
            }
            
            public void SetSize(int w, int h) {
                enesim_renderer_clipper_size_set(raw, w, h);
            }
            
            public void GetSize(out int w, out int h) {
                enesim_renderer_clipper_size_get(raw, out  w, out  h);
            }
        }
        
        public class Transition : Renderer {
            
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern IntPtr enesim_renderer_transition_new();
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern double enesim_renderer_transition_level_get(IntPtr self);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void enesim_renderer_transition_level_set(IntPtr self, double level);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern IntPtr enesim_renderer_transition_source_get(IntPtr self);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void enesim_renderer_transition_source_set(IntPtr self, IntPtr r0);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern IntPtr enesim_renderer_transition_target_get(IntPtr self);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void enesim_renderer_transition_target_set(IntPtr self, IntPtr r1);
            
            protected internal Transition(System.IntPtr i, bool owned) : 
                    base(i, owned) {
                Initialize(i, owned);
            }
            
            public Transition() {
                System.IntPtr ret = enesim_renderer_transition_new();
                Initialize(ret, false);
            }
            
            public double Level {
                get {
                    double ret = enesim_renderer_transition_level_get(raw);
                    return ret;
                }
                set {
                    double level;
                    level = value;
                    enesim_renderer_transition_level_set(raw, level);
                }
            }
            
            public Enesim.Renderer Source {
                get {
                    System.IntPtr ret = enesim_renderer_transition_source_get(raw);
                    return new Renderer(ret, false);
                }
                set {
                    Enesim.Renderer r0;
                    r0 = value;
                    System.IntPtr r0Raw;
                    if ((r0 == null)) {
                        r0Raw = IntPtr.Zero;
                    }
                    else {
                        r0Raw = r0.Raw;
                    }
                    enesim_renderer_transition_source_set(raw, r0Raw);
                }
            }
            
            public Enesim.Renderer Target {
                get {
                    System.IntPtr ret = enesim_renderer_transition_target_get(raw);
                    return new Renderer(ret, false);
                }
                set {
                    Enesim.Renderer r1;
                    r1 = value;
                    System.IntPtr r1Raw;
                    if ((r1 == null)) {
                        r1Raw = IntPtr.Zero;
                    }
                    else {
                        r1Raw = r1.Raw;
                    }
                    enesim_renderer_transition_target_set(raw, r1Raw);
                }
            }
        }
        
        public class Proxy : Renderer {
            
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern IntPtr enesim_renderer_proxy_new();
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern IntPtr enesim_renderer_proxy_proxied_get(IntPtr self);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void enesim_renderer_proxy_proxied_set(IntPtr self, IntPtr proxied);
            
            protected internal Proxy(System.IntPtr i, bool owned) : 
                    base(i, owned) {
                Initialize(i, owned);
            }
            
            public Proxy() {
                System.IntPtr ret = enesim_renderer_proxy_new();
                Initialize(ret, false);
            }
            
            public Enesim.Renderer Proxied {
                get {
                    System.IntPtr ret = enesim_renderer_proxy_proxied_get(raw);
                    return new Renderer(ret, false);
                }
                set {
                    Enesim.Renderer proxied;
                    proxied = value;
                    System.IntPtr proxiedRaw;
                    if ((proxied == null)) {
                        proxiedRaw = IntPtr.Zero;
                    }
                    else {
                        proxiedRaw = proxied.Raw;
                    }
                    enesim_renderer_proxy_proxied_set(raw, proxiedRaw);
                }
            }
        }
        
        public class Importer : Renderer {
            
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern IntPtr enesim_renderer_importer_new();
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern IntPtr enesim_renderer_importer_buffer_get(IntPtr self);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void enesim_renderer_importer_buffer_set(IntPtr self, IntPtr buffer);
            
            protected internal Importer(System.IntPtr i, bool owned) : 
                    base(i, owned) {
                Initialize(i, owned);
            }
            
            public Importer() {
                System.IntPtr ret = enesim_renderer_importer_new();
                Initialize(ret, false);
            }
            
            public Enesim.Buffer Buffer {
                get {
                    System.IntPtr ret = enesim_renderer_importer_buffer_get(raw);
                    return new Buffer(ret, false);
                }
                set {
                    Enesim.Buffer buffer;
                    buffer = value;
                    System.IntPtr bufferRaw;
                    if ((buffer == null)) {
                        bufferRaw = IntPtr.Zero;
                    }
                    else {
                        bufferRaw = buffer.Raw;
                    }
                    enesim_renderer_importer_buffer_set(raw, bufferRaw);
                }
            }
        }
    }
    
    public enum BackendEnum {
        
        Invalid,
        
        Software,
        
        Opencl,
        
        Opengl,
    }
    
    public class Buffer : IDisposable {
        
        protected IntPtr raw;
        
        private bool disposed;
        
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern IntPtr enesim_buffer_new(Enesim.Buffer.FormatEnum f, uint w, uint h);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern IntPtr enesim_buffer_new_data_from(Enesim.Buffer.FormatEnum f, uint w, uint h, bool copy, IntPtr data, IntPtr free_func, IntPtr free_func_data);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern IntPtr enesim_buffer_new_pool_from(Enesim.Buffer.FormatEnum f, uint w, uint h, IntPtr p);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern IntPtr enesim_buffer_new_pool_and_data_from(Enesim.Buffer.FormatEnum f, uint w, uint h, IntPtr p, bool copy, IntPtr data, IntPtr free_func, IntPtr free_func_data);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern IntPtr enesim_buffer_ref(IntPtr self);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void enesim_buffer_unref(IntPtr self);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void enesim_buffer_size_get(IntPtr self, out int w, out int h);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern Enesim.Buffer.FormatEnum enesim_buffer_format_get(IntPtr self);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern Enesim.BackendEnum enesim_buffer_backend_get(IntPtr self);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern IntPtr enesim_buffer_pool_get(IntPtr self);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void enesim_buffer_private_set(IntPtr self, IntPtr data);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern IntPtr enesim_buffer_private_get(IntPtr self);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern bool enesim_buffer_sw_data_get(IntPtr self, IntPtr data);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern bool enesim_buffer_map(IntPtr self, IntPtr data);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern bool enesim_buffer_unmap(IntPtr self, IntPtr data, bool written);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern IntPtr enesim_buffer_format_size_get(IntPtr self, uint w, uint h);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern bool enesim_buffer_format_rgb_components_from(IntPtr self, int depth, byte aoffset, byte alen, byte roffset, byte rlen, byte goffset, byte glen, byte boffset, byte blen, bool premul);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern bool enesim_buffer_format_rgb_components_to(IntPtr self, out byte aoffset, out byte alen, out byte roffset, out byte rlen, out byte goffset, out byte glen, out byte boffset, out byte blen, out bool premul);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern byte enesim_buffer_format_rgb_depth_get(IntPtr self);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void enesim_buffer_lock(IntPtr self, bool write);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void enesim_buffer_unlock(IntPtr self);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void enesim_buffer_alpha_hint_set(IntPtr self, Enesim.AplhaHintEnum hint);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern Enesim.AplhaHintEnum enesim_buffer_alpha_hint_get(IntPtr self);
~Buffer() { Dispose(false); }
        
        protected internal Buffer(System.IntPtr i, bool owned) {
            Initialize(i, owned);
        }
        
        public Buffer(Enesim.Buffer.FormatEnum f, uint w, uint h) {
            System.IntPtr ret = enesim_buffer_new(f, w, h);
            Initialize(ret, false);
        }
        
        public Buffer(Enesim.Buffer.FormatEnum f, uint w, uint h, bool copy, Enesim.Buffer.SwData data, System.IntPtr free_func, System.IntPtr free_func_data) {
            System.IntPtr dataRaw;
            if ((data == null)) {
                dataRaw = IntPtr.Zero;
            }
            else {
                dataRaw = data.Raw;
            }
            System.IntPtr ret = enesim_buffer_new_data_from(f, w, h, copy, dataRaw, free_func, free_func_data);
            Initialize(ret, false);
        }
        
        public Buffer(Enesim.Buffer.FormatEnum f, uint w, uint h, Enesim.Pool p) {
            System.IntPtr pRaw;
            if ((p == null)) {
                pRaw = IntPtr.Zero;
            }
            else {
                pRaw = p.Raw;
            }
            System.IntPtr ret = enesim_buffer_new_pool_from(f, w, h, pRaw);
            Initialize(ret, false);
        }
        
        public Buffer(Enesim.Buffer.FormatEnum f, uint w, uint h, Enesim.Pool p, bool copy, Enesim.Buffer.SwData data, System.IntPtr free_func, System.IntPtr free_func_data) {
            System.IntPtr pRaw;
            if ((p == null)) {
                pRaw = IntPtr.Zero;
            }
            else {
                pRaw = p.Raw;
            }
            System.IntPtr dataRaw;
            if ((data == null)) {
                dataRaw = IntPtr.Zero;
            }
            else {
                dataRaw = data.Raw;
            }
            System.IntPtr ret = enesim_buffer_new_pool_and_data_from(f, w, h, pRaw, copy, dataRaw, free_func, free_func_data);
            Initialize(ret, false);
        }
        
        public System.IntPtr Raw {
            get {
                return this.raw;
            }
        }
        
        public virtual void Dispose() {
            Dispose(false);
            GC.SuppressFinalize(this);
        }
        
        protected virtual void Dispose(bool disposing) {
            if (disposed) {
            }
            else {
                enesim_buffer_unref(raw);
                raw = IntPtr.Zero;
                disposed = false;
            }
        }
        
        protected virtual void Initialize(System.IntPtr i, bool owned) {
            raw = i;
            if (owned) {
                enesim_buffer_ref(i);
            }
        }
        
        public void GetSize(out int w, out int h) {
            enesim_buffer_size_get(raw, out  w, out  h);
        }
        
        public Enesim.Buffer.FormatEnum GetFormat() {
            Enesim.Buffer.FormatEnum ret = enesim_buffer_format_get(raw);
            return ret;
        }
        
        public Enesim.BackendEnum GetBackend() {
            Enesim.BackendEnum ret = enesim_buffer_backend_get(raw);
            return ret;
        }
        
        public Enesim.Pool GetPool() {
            System.IntPtr ret = enesim_buffer_pool_get(raw);
            return new Pool(ret, false);
        }
        
        public void SetPrivate(System.IntPtr data) {
            enesim_buffer_private_set(raw, data);
        }
        
        public System.IntPtr GetPrivate() {
            System.IntPtr ret = enesim_buffer_private_get(raw);
            return ret;
        }
        
        public bool GetSwData(out Enesim.Buffer.SwData data) {
            data = new Enesim.Buffer.SwData();
            bool ret = enesim_buffer_sw_data_get(raw, data.Raw);
            return ret;
        }
        
        public bool Map(out Enesim.Buffer.SwData data) {
            data = new Enesim.Buffer.SwData();
            bool ret = enesim_buffer_map(raw, data.Raw);
            return ret;
        }
        
        public bool Unmap(Enesim.Buffer.SwData data, bool written) {
            System.IntPtr dataRaw;
            if ((data == null)) {
                dataRaw = IntPtr.Zero;
            }
            else {
                dataRaw = data.Raw;
            }
            bool ret = enesim_buffer_unmap(raw, dataRaw, written);
            return ret;
        }
        
        public System.IntPtr GetFormatSize(uint w, uint h) {
            System.IntPtr ret = enesim_buffer_format_size_get(raw, w, h);
            return ret;
        }
        
        public bool FormatRgbComponentsFrom(int depth, byte aoffset, byte alen, byte roffset, byte rlen, byte goffset, byte glen, byte boffset, byte blen, bool premul) {
            bool ret = enesim_buffer_format_rgb_components_from(raw, depth, aoffset, alen, roffset, rlen, goffset, glen, boffset, blen, premul);
            return ret;
        }
        
        public bool FormatRgbComponentsTo(out byte aoffset, out byte alen, out byte roffset, out byte rlen, out byte goffset, out byte glen, out byte boffset, out byte blen, out bool premul) {
            bool ret = enesim_buffer_format_rgb_components_to(raw, out  aoffset, out  alen, out  roffset, out  rlen, out  goffset, out  glen, out  boffset, out  blen, out  premul);
            return ret;
        }
        
        public byte GetFormatRgbDepth() {
            byte ret = enesim_buffer_format_rgb_depth_get(raw);
            return ret;
        }
        
        public void Lock(bool write) {
            enesim_buffer_lock(raw, write);
        }
        
        public void Unlock() {
            enesim_buffer_unlock(raw);
        }
        
        public void SetAlphaHint(Enesim.AplhaHintEnum hint) {
            enesim_buffer_alpha_hint_set(raw, hint);
        }
        
        public Enesim.AplhaHintEnum GetAlphaHint() {
            Enesim.AplhaHintEnum ret = enesim_buffer_alpha_hint_get(raw);
            return ret;
        }
        
        public enum FormatEnum {
            
            Rgb565,
            
            Argb8888,
            
            Argb8888Pre,
            
            Xrgb8888,
            
            Rgb888,
            
            Bgr888,
            
            A8,
            
            Gray,
            
            Cmyk,
            
            CmykAdobe,
        }
        
        public class SwData32bpp {
            
            protected IntPtr raw;
            
            public SwData32bpp() {
                raw = Marshal.AllocHGlobal(Marshal.SizeOf(typeof(SwData32bppStruct)));
            }
            
            public System.IntPtr Raw {
                get {
                    return this.raw;
                }
            }
            
            [StructLayout(System.Runtime.InteropServices.LayoutKind.Sequential)]
            public struct SwData32bppStruct {
                
                public System.IntPtr plane0;
                
                public int plane0_stride;
            }
        }
        
        public class SwData24bpp {
            
            protected IntPtr raw;
            
            public SwData24bpp() {
                raw = Marshal.AllocHGlobal(Marshal.SizeOf(typeof(SwData24bppStruct)));
            }
            
            public System.IntPtr Raw {
                get {
                    return this.raw;
                }
            }
            
            [StructLayout(System.Runtime.InteropServices.LayoutKind.Sequential)]
            public struct SwData24bppStruct {
                
                public System.IntPtr plane0;
                
                public int plane0_stride;
            }
        }
        
        public class SwDataRgb565 {
            
            protected IntPtr raw;
            
            public SwDataRgb565() {
                raw = Marshal.AllocHGlobal(Marshal.SizeOf(typeof(SwDataRgb565Struct)));
            }
            
            public System.IntPtr Raw {
                get {
                    return this.raw;
                }
            }
            
            [StructLayout(System.Runtime.InteropServices.LayoutKind.Sequential)]
            public struct SwDataRgb565Struct {
                
                public System.IntPtr plane0;
                
                public int plane0_stride;
            }
        }
        
        public class SwData {
            
            protected IntPtr raw;
            
            public SwData() {
                raw = Marshal.AllocHGlobal(Marshal.SizeOf(typeof(SwDataStruct)));
            }
            
            public System.IntPtr Raw {
                get {
                    return this.raw;
                }
            }
            
            [StructLayout(System.Runtime.InteropServices.LayoutKind.Sequential)]
            public struct SwDataStruct {
            }
        }
        
        public class SwDataA8 {
            
            protected IntPtr raw;
            
            public SwDataA8() {
                raw = Marshal.AllocHGlobal(Marshal.SizeOf(typeof(SwDataA8Struct)));
            }
            
            public System.IntPtr Raw {
                get {
                    return this.raw;
                }
            }
            
            [StructLayout(System.Runtime.InteropServices.LayoutKind.Sequential)]
            public struct SwDataA8Struct {
                
                public System.IntPtr plane0;
                
                public int plane0_stride;
            }
        }
    }
    
    public class Image {
        
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void enesim_image_dispatch();
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern bool enesim_image_info_get(IntPtr data, string mime, IntPtr w, IntPtr h, Enesim.Buffer.FormatEnum sfmt, string options, out int err);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern bool enesim_image_load(out IntPtr data, string mime, IntPtr b, IntPtr mpool, string options, int err);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void enesim_image_load_async(IntPtr data, string mime, IntPtr b, IntPtr mpool, IntPtr cb, IntPtr user_data, string options);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern bool enesim_image_save(IntPtr data, string mime, IntPtr b, string options, out int err);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void enesim_image_save_async(IntPtr data, string mime, IntPtr b, IntPtr cb, IntPtr user_data, string options);
        
        public static void Dispatch() {
            enesim_image_dispatch();
        }
        
        public static bool GetInfo(Enesim.Stream data, string mime, System.IntPtr w, System.IntPtr h, Enesim.Buffer.FormatEnum sfmt, string options, out Eina.Error err) {
            System.IntPtr dataRaw;
            if ((data == null)) {
                dataRaw = IntPtr.Zero;
            }
            else {
                dataRaw = data.Raw;
            }
            int errRaw;
            bool ret = enesim_image_info_get(dataRaw, mime, w, h, sfmt, options, out  errRaw);
            err = errRaw;
            return ret;
        }
        
        public static bool Load(out Enesim.Stream data, string mime, Enesim.Buffer b, Enesim.Pool mpool, string options, Eina.Error err) {
            System.IntPtr dataRaw;
            System.IntPtr bRaw;
            if ((b == null)) {
                bRaw = IntPtr.Zero;
            }
            else {
                bRaw = b.Raw;
            }
            System.IntPtr mpoolRaw;
            if ((mpool == null)) {
                mpoolRaw = IntPtr.Zero;
            }
            else {
                mpoolRaw = mpool.Raw;
            }
            bool ret = enesim_image_load(out  dataRaw, mime, bRaw, mpoolRaw, options, err);
            data = new Enesim.Stream(dataRaw, false);
            return ret;
        }
        
        public static void LoadAsync(Enesim.Stream data, string mime, Enesim.Buffer b, Enesim.Pool mpool, System.IntPtr cb, System.IntPtr user_data, string options) {
            System.IntPtr dataRaw;
            if ((data == null)) {
                dataRaw = IntPtr.Zero;
            }
            else {
                dataRaw = data.Raw;
            }
            System.IntPtr bRaw;
            if ((b == null)) {
                bRaw = IntPtr.Zero;
            }
            else {
                bRaw = b.Raw;
            }
            System.IntPtr mpoolRaw;
            if ((mpool == null)) {
                mpoolRaw = IntPtr.Zero;
            }
            else {
                mpoolRaw = mpool.Raw;
            }
            enesim_image_load_async(dataRaw, mime, bRaw, mpoolRaw, cb, user_data, options);
        }
        
        public static bool Save(Enesim.Stream data, string mime, Enesim.Buffer b, string options, out Eina.Error err) {
            System.IntPtr dataRaw;
            if ((data == null)) {
                dataRaw = IntPtr.Zero;
            }
            else {
                dataRaw = data.Raw;
            }
            System.IntPtr bRaw;
            if ((b == null)) {
                bRaw = IntPtr.Zero;
            }
            else {
                bRaw = b.Raw;
            }
            int errRaw;
            bool ret = enesim_image_save(dataRaw, mime, bRaw, options, out  errRaw);
            err = errRaw;
            return ret;
        }
        
        public static void SaveAsync(Enesim.Stream data, string mime, Enesim.Buffer b, System.IntPtr cb, System.IntPtr user_data, string options) {
            System.IntPtr dataRaw;
            if ((data == null)) {
                dataRaw = IntPtr.Zero;
            }
            else {
                dataRaw = data.Raw;
            }
            System.IntPtr bRaw;
            if ((b == null)) {
                bRaw = IntPtr.Zero;
            }
            else {
                bRaw = b.Raw;
            }
            enesim_image_save_async(dataRaw, mime, bRaw, cb, user_data, options);
        }
        
        public class File {
            
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern bool enesim_image_file_info_get(string file, IntPtr w, IntPtr h, Enesim.Buffer.FormatEnum sfmt, string options, out int err);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern bool enesim_image_file_load(string file, IntPtr b, IntPtr mpool, string options, out int err);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void enesim_image_file_load_async(string file, IntPtr b, IntPtr mpool, IntPtr cb, IntPtr user_data, string options);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern bool enesim_image_file_save(string file, IntPtr b, string options, out int err);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void enesim_image_file_save_async(string file, IntPtr b, IntPtr cb, IntPtr user_data, string options);
            
            public static bool GetInfo(string file, System.IntPtr w, System.IntPtr h, Enesim.Buffer.FormatEnum sfmt, string options, out Eina.Error err) {
                int errRaw;
                bool ret = enesim_image_file_info_get(file, w, h, sfmt, options, out  errRaw);
                err = errRaw;
                return ret;
            }
            
            public static bool Load(string file, Enesim.Buffer b, Enesim.Pool mpool, string options, out Eina.Error err) {
                System.IntPtr bRaw;
                if ((b == null)) {
                    bRaw = IntPtr.Zero;
                }
                else {
                    bRaw = b.Raw;
                }
                System.IntPtr mpoolRaw;
                if ((mpool == null)) {
                    mpoolRaw = IntPtr.Zero;
                }
                else {
                    mpoolRaw = mpool.Raw;
                }
                int errRaw;
                bool ret = enesim_image_file_load(file, bRaw, mpoolRaw, options, out  errRaw);
                err = errRaw;
                return ret;
            }
            
            public static void LoadAsync(string file, Enesim.Buffer b, Enesim.Pool mpool, System.IntPtr cb, System.IntPtr user_data, string options) {
                System.IntPtr bRaw;
                if ((b == null)) {
                    bRaw = IntPtr.Zero;
                }
                else {
                    bRaw = b.Raw;
                }
                System.IntPtr mpoolRaw;
                if ((mpool == null)) {
                    mpoolRaw = IntPtr.Zero;
                }
                else {
                    mpoolRaw = mpool.Raw;
                }
                enesim_image_file_load_async(file, bRaw, mpoolRaw, cb, user_data, options);
            }
            
            public static bool Save(string file, Enesim.Buffer b, string options, out Eina.Error err) {
                System.IntPtr bRaw;
                if ((b == null)) {
                    bRaw = IntPtr.Zero;
                }
                else {
                    bRaw = b.Raw;
                }
                int errRaw;
                bool ret = enesim_image_file_save(file, bRaw, options, out  errRaw);
                err = errRaw;
                return ret;
            }
            
            public static void SaveAsync(string file, Enesim.Buffer b, System.IntPtr cb, System.IntPtr user_data, string options) {
                System.IntPtr bRaw;
                if ((b == null)) {
                    bRaw = IntPtr.Zero;
                }
                else {
                    bRaw = b.Raw;
                }
                enesim_image_file_save_async(file, bRaw, cb, user_data, options);
            }
        }
    }
    
    public enum FormatEnum {
        
        None,
        
        Argb8888,
        
        A8,
    }
    
    public class Surface : IDisposable {
        
        protected IntPtr raw;
        
        private bool disposed;
        
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern IntPtr enesim_surface_new(Enesim.FormatEnum f, uint w, uint h);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern IntPtr enesim_surface_new_data_from(Enesim.FormatEnum f, uint w, uint h, bool copy, IntPtr data, IntPtr stride, IntPtr free_func, IntPtr free_func_data);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern IntPtr enesim_surface_new_pool_from(Enesim.FormatEnum f, uint w, uint h, IntPtr p);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern IntPtr enesim_surface_new_pool_and_data_from(Enesim.FormatEnum fmt, uint w, uint h, IntPtr p, bool copy, IntPtr data, IntPtr stride, IntPtr free_func, IntPtr free_func_data);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern IntPtr enesim_surface_new_buffer_from(IntPtr buffer);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern IntPtr enesim_surface_ref(IntPtr self);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void enesim_surface_unref(IntPtr self);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern IntPtr enesim_surface_buffer_get(IntPtr self);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void enesim_surface_size_get(IntPtr self, out int w, out int h);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern Enesim.FormatEnum enesim_surface_format_get(IntPtr self);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern Enesim.BackendEnum enesim_surface_backend_get(IntPtr self);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern IntPtr enesim_surface_pool_get(IntPtr self);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void enesim_surface_private_set(IntPtr self, IntPtr data);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern IntPtr enesim_surface_private_get(IntPtr self);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern bool enesim_surface_sw_data_get(IntPtr self, out IntPtr data, out IntPtr stride);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern bool enesim_surface_map(IntPtr self, out IntPtr data, out IntPtr stride);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern bool enesim_surface_unmap(IntPtr self, IntPtr data, bool written);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void enesim_surface_lock(IntPtr self, bool write);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void enesim_surface_unlock(IntPtr self);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void enesim_surface_alpha_hint_set(IntPtr self, Enesim.AplhaHintEnum hint);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern Enesim.AplhaHintEnum enesim_surface_alpha_hint_get(IntPtr self);
~Surface() { Dispose(false); }
        
        protected internal Surface(System.IntPtr i, bool owned) {
            Initialize(i, owned);
        }
        
        public Surface(Enesim.FormatEnum f, uint w, uint h) {
            System.IntPtr ret = enesim_surface_new(f, w, h);
            Initialize(ret, false);
        }
        
        public Surface(Enesim.FormatEnum f, uint w, uint h, bool copy, System.IntPtr data, System.IntPtr stride, System.IntPtr free_func, System.IntPtr free_func_data) {
            System.IntPtr ret = enesim_surface_new_data_from(f, w, h, copy, data, stride, free_func, free_func_data);
            Initialize(ret, false);
        }
        
        public Surface(Enesim.FormatEnum f, uint w, uint h, Enesim.Pool p) {
            System.IntPtr pRaw;
            if ((p == null)) {
                pRaw = IntPtr.Zero;
            }
            else {
                pRaw = p.Raw;
            }
            System.IntPtr ret = enesim_surface_new_pool_from(f, w, h, pRaw);
            Initialize(ret, false);
        }
        
        public Surface(Enesim.FormatEnum fmt, uint w, uint h, Enesim.Pool p, bool copy, System.IntPtr data, System.IntPtr stride, System.IntPtr free_func, System.IntPtr free_func_data) {
            System.IntPtr pRaw;
            if ((p == null)) {
                pRaw = IntPtr.Zero;
            }
            else {
                pRaw = p.Raw;
            }
            System.IntPtr ret = enesim_surface_new_pool_and_data_from(fmt, w, h, pRaw, copy, data, stride, free_func, free_func_data);
            Initialize(ret, false);
        }
        
        public Surface(Enesim.Buffer buffer) {
            System.IntPtr bufferRaw;
            if ((buffer == null)) {
                bufferRaw = IntPtr.Zero;
            }
            else {
                bufferRaw = buffer.Raw;
            }
            System.IntPtr ret = enesim_surface_new_buffer_from(bufferRaw);
            Initialize(ret, false);
        }
        
        public System.IntPtr Raw {
            get {
                return this.raw;
            }
        }
        
        public virtual void Dispose() {
            Dispose(false);
            GC.SuppressFinalize(this);
        }
        
        protected virtual void Dispose(bool disposing) {
            if (disposed) {
            }
            else {
                enesim_surface_unref(raw);
                raw = IntPtr.Zero;
                disposed = false;
            }
        }
        
        protected virtual void Initialize(System.IntPtr i, bool owned) {
            raw = i;
            if (owned) {
                enesim_surface_ref(i);
            }
        }
        
        public Enesim.Buffer GetBuffer() {
            System.IntPtr ret = enesim_surface_buffer_get(raw);
            return new Buffer(ret, false);
        }
        
        public void GetSize(out int w, out int h) {
            enesim_surface_size_get(raw, out  w, out  h);
        }
        
        public Enesim.FormatEnum GetFormat() {
            Enesim.FormatEnum ret = enesim_surface_format_get(raw);
            return ret;
        }
        
        public Enesim.BackendEnum GetBackend() {
            Enesim.BackendEnum ret = enesim_surface_backend_get(raw);
            return ret;
        }
        
        public Enesim.Pool GetPool() {
            System.IntPtr ret = enesim_surface_pool_get(raw);
            return new Pool(ret, false);
        }
        
        public void SetPrivate(System.IntPtr data) {
            enesim_surface_private_set(raw, data);
        }
        
        public System.IntPtr GetPrivate() {
            System.IntPtr ret = enesim_surface_private_get(raw);
            return ret;
        }
        
        public bool GetSwData(out System.IntPtr data, out System.IntPtr stride) {
            bool ret = enesim_surface_sw_data_get(raw, out  data, out  stride);
            return ret;
        }
        
        public bool Map(out System.IntPtr data, out System.IntPtr stride) {
            bool ret = enesim_surface_map(raw, out  data, out  stride);
            return ret;
        }
        
        public bool Unmap(System.IntPtr data, bool written) {
            bool ret = enesim_surface_unmap(raw, data, written);
            return ret;
        }
        
        public void Lock(bool write) {
            enesim_surface_lock(raw, write);
        }
        
        public void Unlock() {
            enesim_surface_unlock(raw);
        }
        
        public void SetAlphaHint(Enesim.AplhaHintEnum hint) {
            enesim_surface_alpha_hint_set(raw, hint);
        }
        
        public Enesim.AplhaHintEnum GetAlphaHint() {
            Enesim.AplhaHintEnum ret = enesim_surface_alpha_hint_get(raw);
            return ret;
        }
    }
    
    public enum RepeatModeEnum {
        
        Restrict,
        
        Pad,
        
        Reflect,
        
        Repeat,
    }
    
    public class Stream : IDisposable {
        
        protected IntPtr raw;
        
        private bool disposed;
        
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern IntPtr enesim_stream_ref(IntPtr self);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void enesim_stream_unref(IntPtr self);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern IntPtr enesim_stream_read(IntPtr self, IntPtr buffer, IntPtr len);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern IntPtr enesim_stream_write(IntPtr self, IntPtr buffer, IntPtr len);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern IntPtr enesim_stream_length(IntPtr self);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern IntPtr enesim_stream_mmap(IntPtr self, out IntPtr size);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void enesim_stream_munmap(IntPtr self, IntPtr ptr);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void enesim_stream_reset(IntPtr self);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern IntPtr enesim_stream_uri_get(IntPtr self);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern IntPtr enesim_stream_file_new(string file, string mode);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern IntPtr enesim_stream_buffer_new(IntPtr buffer, IntPtr len);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern IntPtr enesim_stream_buffer_static_new(IntPtr buffer, IntPtr len);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern IntPtr enesim_stream_base64_new(IntPtr d);
~Stream() { Dispose(false); }
        
        protected internal Stream(System.IntPtr i, bool owned) {
            Initialize(i, owned);
        }
        
        public Stream(string file, string mode) {
            System.IntPtr ret = enesim_stream_file_new(file, mode);
            Initialize(ret, false);
        }
        
        public Stream(System.IntPtr buffer, System.IntPtr len) {
            System.IntPtr ret = enesim_stream_buffer_new(buffer, len);
            Initialize(ret, false);
        }
        
        public Stream(System.IntPtr buffer, System.IntPtr len) {
            System.IntPtr ret = enesim_stream_buffer_static_new(buffer, len);
            Initialize(ret, false);
        }
        
        public Stream(Enesim.Stream d) {
            System.IntPtr dRaw;
            if ((d == null)) {
                dRaw = IntPtr.Zero;
            }
            else {
                dRaw = d.Raw;
            }
            System.IntPtr ret = enesim_stream_base64_new(dRaw);
            Initialize(ret, false);
        }
        
        public System.IntPtr Raw {
            get {
                return this.raw;
            }
        }
        
        public virtual void Dispose() {
            Dispose(false);
            GC.SuppressFinalize(this);
        }
        
        protected virtual void Dispose(bool disposing) {
            if (disposed) {
            }
            else {
                enesim_stream_unref(raw);
                raw = IntPtr.Zero;
                disposed = false;
            }
        }
        
        protected virtual void Initialize(System.IntPtr i, bool owned) {
            raw = i;
            if (owned) {
                enesim_stream_ref(i);
            }
        }
        
        public System.IntPtr Read(System.IntPtr buffer, System.IntPtr len) {
            System.IntPtr ret = enesim_stream_read(raw, buffer, len);
            return ret;
        }
        
        public System.IntPtr Write(System.IntPtr buffer, System.IntPtr len) {
            System.IntPtr ret = enesim_stream_write(raw, buffer, len);
            return ret;
        }
        
        public System.IntPtr Length() {
            System.IntPtr ret = enesim_stream_length(raw);
            return ret;
        }
        
        public System.IntPtr Mmap(out System.IntPtr size) {
            System.IntPtr ret = enesim_stream_mmap(raw, out  size);
            return ret;
        }
        
        public void Munmap(System.IntPtr ptr) {
            enesim_stream_munmap(raw, ptr);
        }
        
        public void Reset() {
            enesim_stream_reset(raw);
        }
        
        public string GetUri() {
            System.IntPtr ret = enesim_stream_uri_get(raw);
            return Marshal.PtrToStringAnsi(ret);
        }
    }
    
    public class Path : IDisposable {
        
        protected IntPtr raw;
        
        private bool disposed;
        
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern IntPtr enesim_path_new();
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern IntPtr enesim_path_ref(IntPtr self);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void enesim_path_unref(IntPtr self);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void enesim_path_command_clear(IntPtr self);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void enesim_path_command_add(IntPtr self, IntPtr cmd);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void enesim_path_move_to(IntPtr self, double x, double y);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void enesim_path_line_to(IntPtr self, double x, double y);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void enesim_path_squadratic_to(IntPtr self, double x, double y);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void enesim_path_quadratic_to(IntPtr self, double ctrl_x, double ctrl_y, double x, double y);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void enesim_path_cubic_to(IntPtr self, double ctrl_x0, double ctrl_y0, double ctrl_x, double ctrl_y, double x, double y);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void enesim_path_scubic_to(IntPtr self, double ctrl_x, double ctrl_y, double x, double y);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void enesim_path_arc_to(IntPtr self, double rx, double ry, double angle, byte large, byte sweep, double x, double y);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void enesim_path_close(IntPtr self);
~Path() { Dispose(false); }
        
        protected internal Path(System.IntPtr i, bool owned) {
            Initialize(i, owned);
        }
        
        public Path() {
            System.IntPtr ret = enesim_path_new();
            Initialize(ret, false);
        }
        
        public System.IntPtr Raw {
            get {
                return this.raw;
            }
        }
        
        public virtual void Dispose() {
            Dispose(false);
            GC.SuppressFinalize(this);
        }
        
        protected virtual void Dispose(bool disposing) {
            if (disposed) {
            }
            else {
                enesim_path_unref(raw);
                raw = IntPtr.Zero;
                disposed = false;
            }
        }
        
        protected virtual void Initialize(System.IntPtr i, bool owned) {
            raw = i;
            if (owned) {
                enesim_path_ref(i);
            }
        }
        
        public void CommandClear() {
            enesim_path_command_clear(raw);
        }
        
        public void CommandAdd(Enesim.Path.Command cmd) {
            System.IntPtr cmdRaw;
            if ((cmd == null)) {
                cmdRaw = IntPtr.Zero;
            }
            else {
                cmdRaw = cmd.Raw;
            }
            enesim_path_command_add(raw, cmdRaw);
        }
        
        public void MoveTo(double x, double y) {
            enesim_path_move_to(raw, x, y);
        }
        
        public void LineTo(double x, double y) {
            enesim_path_line_to(raw, x, y);
        }
        
        public void SquadraticTo(double x, double y) {
            enesim_path_squadratic_to(raw, x, y);
        }
        
        public void QuadraticTo(double ctrl_x, double ctrl_y, double x, double y) {
            enesim_path_quadratic_to(raw, ctrl_x, ctrl_y, x, y);
        }
        
        public void CubicTo(double ctrl_x0, double ctrl_y0, double ctrl_x, double ctrl_y, double x, double y) {
            enesim_path_cubic_to(raw, ctrl_x0, ctrl_y0, ctrl_x, ctrl_y, x, y);
        }
        
        public void ScubicTo(double ctrl_x, double ctrl_y, double x, double y) {
            enesim_path_scubic_to(raw, ctrl_x, ctrl_y, x, y);
        }
        
        public void ArcTo(double rx, double ry, double angle, byte large, byte sweep, double x, double y) {
            enesim_path_arc_to(raw, rx, ry, angle, large, sweep, x, y);
        }
        
        public void Close() {
            enesim_path_close(raw);
        }
        
        public class Command {
            
            protected IntPtr raw;
            
            public Command() {
                raw = Marshal.AllocHGlobal(Marshal.SizeOf(typeof(CommandStruct)));
            }
            
            public System.IntPtr Raw {
                get {
                    return this.raw;
                }
            }
            
            [StructLayout(System.Runtime.InteropServices.LayoutKind.Sequential)]
            public struct CommandStruct {
                
                public Enesim.Path.Command.Definition definition;
            }
            
            public enum TypeEnum {
                
                MoveTo,
                
                LineTo,
                
                QuadraticTo,
                
                SquadraticTo,
                
                CubicTo,
                
                ScubicTo,
                
                ArcTo,
                
                Close,
                
                Types,
            }
            
            public class Close {
                
                protected IntPtr raw;
                
                public Close() {
                    raw = Marshal.AllocHGlobal(Marshal.SizeOf(typeof(CloseStruct)));
                }
                
                public System.IntPtr Raw {
                    get {
                        return this.raw;
                    }
                }
                
                [StructLayout(System.Runtime.InteropServices.LayoutKind.Sequential)]
                public struct CloseStruct {
                    
                    public bool close;
                }
            }
            
            public class Definition {
                
                protected IntPtr raw;
                
                public Definition() {
                    raw = Marshal.AllocHGlobal(Marshal.SizeOf(typeof(DefinitionStruct)));
                }
                
                public System.IntPtr Raw {
                    get {
                        return this.raw;
                    }
                }
                
                [StructLayout(System.Runtime.InteropServices.LayoutKind.Sequential)]
                public struct DefinitionStruct {
                }
            }
        }
    }
    
    public class Pool : IDisposable {
        
        protected IntPtr raw;
        
        private bool disposed;
        
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern IntPtr enesim_pool_default_get();
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void enesim_pool_default_set(IntPtr self);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern IntPtr enesim_pool_ref(IntPtr self);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void enesim_pool_unref(IntPtr self);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern IntPtr enesim_pool_eina_new(IntPtr mp);
~Pool() { Dispose(false); }
        
        protected internal Pool(System.IntPtr i, bool owned) {
            Initialize(i, owned);
        }
        
        public Pool(System.IntPtr mp) {
            System.IntPtr ret = enesim_pool_eina_new(mp);
            Initialize(ret, false);
        }
        
        public System.IntPtr Raw {
            get {
                return this.raw;
            }
        }
        
        public virtual void Dispose() {
            Dispose(false);
            GC.SuppressFinalize(this);
        }
        
        protected virtual void Dispose(bool disposing) {
            if (disposed) {
            }
            else {
                enesim_pool_unref(raw);
                raw = IntPtr.Zero;
                disposed = false;
            }
        }
        
        protected virtual void Initialize(System.IntPtr i, bool owned) {
            raw = i;
            if (owned) {
                enesim_pool_ref(i);
            }
        }
        
        public static Enesim.Pool GetDefault() {
            System.IntPtr ret = enesim_pool_default_get();
            return new Pool(ret, false);
        }
        
        public void SetDefault() {
            enesim_pool_default_set(raw);
        }
    }
    
    public class Converter {
        
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern bool enesim_converter_buffer(IntPtr b, IntPtr dst);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern bool enesim_converter_surface(IntPtr s, IntPtr dst);
        
        public static bool Buffer(Enesim.Buffer b, Enesim.Buffer dst) {
            System.IntPtr bRaw;
            if ((b == null)) {
                bRaw = IntPtr.Zero;
            }
            else {
                bRaw = b.Raw;
            }
            System.IntPtr dstRaw;
            if ((dst == null)) {
                dstRaw = IntPtr.Zero;
            }
            else {
                dstRaw = dst.Raw;
            }
            bool ret = enesim_converter_buffer(bRaw, dstRaw);
            return ret;
        }
        
        public static bool Surface(Enesim.Surface s, Enesim.Buffer dst) {
            System.IntPtr sRaw;
            if ((s == null)) {
                sRaw = IntPtr.Zero;
            }
            else {
                sRaw = s.Raw;
            }
            System.IntPtr dstRaw;
            if ((dst == null)) {
                dstRaw = IntPtr.Zero;
            }
            else {
                dstRaw = dst.Raw;
            }
            bool ret = enesim_converter_surface(sRaw, dstRaw);
            return ret;
        }
    }
    
    public class Log : IDisposable {
        
        protected IntPtr raw;
        
        private bool disposed;
        
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern IntPtr enesim_log_ref(IntPtr self);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void enesim_log_unref(IntPtr self);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern IntPtr enesim_log_add(IntPtr self, string _string);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern IntPtr enesim_log_add_parametric(IntPtr self, string file, string function, int line, IntPtr fmt, IntPtr args);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void enesim_log_dump(IntPtr self);
~Log() { Dispose(false); }
        
        protected Log() {
        }
        
        protected internal Log(System.IntPtr i, bool owned) {
            Initialize(i, owned);
        }
        
        public System.IntPtr Raw {
            get {
                return this.raw;
            }
        }
        
        public virtual void Dispose() {
            Dispose(false);
            GC.SuppressFinalize(this);
        }
        
        protected virtual void Dispose(bool disposing) {
            if (disposed) {
            }
            else {
                enesim_log_unref(raw);
                raw = IntPtr.Zero;
                disposed = false;
            }
        }
        
        protected virtual void Initialize(System.IntPtr i, bool owned) {
            raw = i;
            if (owned) {
                enesim_log_ref(i);
            }
        }
        
        public Enesim.Log Add(string _string) {
            System.IntPtr ret = enesim_log_add(raw, _string);
            return new Log(ret, false);
        }
        
        public Enesim.Log AddParametric(string file, string function, int line, string fmt, System.IntPtr args) {
            System.IntPtr ret = enesim_log_add_parametric(raw, file, function, line, fmt, args);
            return new Log(ret, false);
        }
        
        public void Dump() {
            enesim_log_dump(raw);
        }
    }
    
    public enum PriorityEnum {
        
        None,
        
        Marginal,
        
        Secondary,
        
        Primary,
    }
    
    public enum AngleEnum {
        
        None,
        
        Cw90,
        
        Cw180,
        
        Cw270,
    }
    
    public class Rectangle {
        
        protected IntPtr raw;
        
        public Rectangle() {
            raw = Marshal.AllocHGlobal(Marshal.SizeOf(typeof(RectangleStruct)));
        }
        
        public System.IntPtr Raw {
            get {
                return this.raw;
            }
        }
        
        [StructLayout(System.Runtime.InteropServices.LayoutKind.Sequential)]
        public struct RectangleStruct {
            
            public double x;
            
            public double y;
            
            public double w;
            
            public double h;
        }
    }
    
    public class MatrixF16p16 {
        
        protected IntPtr raw;
        
        public MatrixF16p16() {
            raw = Marshal.AllocHGlobal(Marshal.SizeOf(typeof(MatrixF16p16Struct)));
        }
        
        public System.IntPtr Raw {
            get {
                return this.raw;
            }
        }
        
        [StructLayout(System.Runtime.InteropServices.LayoutKind.Sequential)]
        public struct MatrixF16p16Struct {
            
            public int xx;
            
            public int xy;
            
            public int xz;
            
            public int yx;
            
            public int yy;
            
            public int yz;
            
            public int zx;
            
            public int zy;
            
            public int zz;
        }
    }
    
    public class Quad {
        
        protected IntPtr raw;
        
        public Quad() {
            raw = Marshal.AllocHGlobal(Marshal.SizeOf(typeof(QuadStruct)));
        }
        
        public System.IntPtr Raw {
            get {
                return this.raw;
            }
        }
        
        [StructLayout(System.Runtime.InteropServices.LayoutKind.Sequential)]
        public struct QuadStruct {
            
            public double x0;
            
            public double y0;
            
            public double x1;
            
            public double y1;
            
            public double x2;
            
            public double y2;
            
            public double x3;
            
            public double y3;
        }
    }
    
    public class Color {
        
        protected uint value;
        
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern uint enesim_color_argb_to(uint c);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern uint enesim_color_argb_from(uint argb);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern uint enesim_color_components_from(byte a, byte r, byte g, byte b);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void enesim_color_components_to(uint color, out byte a, out byte r, out byte g, out byte b);
        
        public Color(uint v) {
            value = v;
        }
        
        public uint Value {
            get {
                return this.value;
            }
        }
        
        public static   implicit operator Color(uint v) {
            return new Color(v);
        }
        
        public static   implicit operator uint(Color v) {
            return v.value;
        }
        
        public static Enesim.Argb ArgbTo(Enesim.Color c) {
            uint ret = enesim_color_argb_to(c);
            return new Argb(ret);
        }
        
        public static Enesim.Color ArgbFrom(Enesim.Argb argb) {
            uint ret = enesim_color_argb_from(argb);
            return new Color(ret);
        }
        
        public static Enesim.Color ComponentsFrom(byte a, byte r, byte g, byte b) {
            uint ret = enesim_color_components_from(a, r, g, b);
            return new Color(ret);
        }
        
        public static void ComponentsTo(Enesim.Color color, out byte a, out byte r, out byte g, out byte b) {
            enesim_color_components_to(color, out  a, out  r, out  g, out  b);
        }
    }
    
    public class Argb {
        
        protected uint value;
        
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern uint enesim_argb_components_from(byte a, byte r, byte g, byte b);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void enesim_argb_components_to(uint argb, out byte a, out byte r, out byte g, out byte b);
        
        public Argb(uint v) {
            value = v;
        }
        
        public uint Value {
            get {
                return this.value;
            }
        }
        
        public static   implicit operator Argb(uint v) {
            return new Argb(v);
        }
        
        public static   implicit operator uint(Argb v) {
            return v.value;
        }
        
        public static Enesim.Argb ComponentsFrom(byte a, byte r, byte g, byte b) {
            uint ret = enesim_argb_components_from(a, r, g, b);
            return new Argb(ret);
        }
        
        public static void ComponentsTo(Enesim.Argb argb, out byte a, out byte r, out byte g, out byte b) {
            enesim_argb_components_to(argb, out  a, out  r, out  g, out  b);
        }
    }
    
    public class Alpha {
        
        protected byte value;
        
        public Alpha(byte v) {
            value = v;
        }
        
        public byte Value {
            get {
                return this.value;
            }
        }
        
        public static   implicit operator Alpha(byte v) {
            return new Alpha(v);
        }
        
        public static   implicit operator byte(Alpha v) {
            return v.value;
        }
    }
    
    public class Main {
        
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern int enesim_shutdown();
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern int enesim_init();
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void enesim_version_get(out uint major, out uint minor, out uint micro);
        
        public static int Shutdown() {
            int ret = enesim_shutdown();
            return ret;
        }
        
        public static int Init() {
            int ret = enesim_init();
            return ret;
        }
        
        public static void GetVersion(out uint major, out uint minor, out uint micro) {
            enesim_version_get(out  major, out  minor, out  micro);
        }
    }
}
namespace Enesim.Text {
    
    
    public class Buffer : IDisposable {
        
        protected IntPtr raw;
        
        private bool disposed;
        
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern IntPtr enesim_text_buffer_ref(IntPtr self);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void enesim_text_buffer_unref(IntPtr self);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void enesim_text_buffer_string_set(IntPtr self, string _string, int length);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern IntPtr enesim_text_buffer_string_get(IntPtr self);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern int enesim_text_buffer_string_insert(IntPtr self, string _string, int length, IntPtr offset);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern int enesim_text_buffer_string_delete(IntPtr self, int length, IntPtr offset);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern int enesim_text_buffer_string_length(IntPtr self);
~Buffer() { Dispose(false); }
        
        protected Buffer() {
        }
        
        protected internal Buffer(System.IntPtr i, bool owned) {
            Initialize(i, owned);
        }
        
        public System.IntPtr Raw {
            get {
                return this.raw;
            }
        }
        
        public virtual void Dispose() {
            Dispose(false);
            GC.SuppressFinalize(this);
        }
        
        protected virtual void Dispose(bool disposing) {
            if (disposed) {
            }
            else {
                enesim_text_buffer_unref(raw);
                raw = IntPtr.Zero;
                disposed = false;
            }
        }
        
        protected virtual void Initialize(System.IntPtr i, bool owned) {
            raw = i;
            if (owned) {
                enesim_text_buffer_ref(i);
            }
        }
        
        public void SetString(string _string, int length) {
            enesim_text_buffer_string_set(raw, _string, length);
        }
        
        public string GetString() {
            System.IntPtr ret = enesim_text_buffer_string_get(raw);
            return Marshal.PtrToStringAnsi(ret);
        }
        
        public int StringInsert(string _string, int length, System.IntPtr offset) {
            int ret = enesim_text_buffer_string_insert(raw, _string, length, offset);
            return ret;
        }
        
        public int StringDelete(int length, System.IntPtr offset) {
            int ret = enesim_text_buffer_string_delete(raw, length, offset);
            return ret;
        }
        
        public int StringLength() {
            int ret = enesim_text_buffer_string_length(raw);
            return ret;
        }
        
        public class Smart : Buffer {
            
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern IntPtr enesim_text_buffer_smart_new(IntPtr thiz);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern IntPtr enesim_text_buffer_smart_real_get(IntPtr self);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void enesim_text_buffer_smart_real_set(IntPtr self, IntPtr real);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void enesim_text_buffer_smart_dirty(IntPtr self);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void enesim_text_buffer_smart_clear(IntPtr self);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern bool enesim_text_buffer_smart_is_dirty(IntPtr self);
            
            protected internal Smart(System.IntPtr i, bool owned) : 
                    base(i, owned) {
                Initialize(i, owned);
            }
            
            public Smart(Enesim.Text.Buffer thiz) {
                System.IntPtr thizRaw;
                if ((thiz == null)) {
                    thizRaw = IntPtr.Zero;
                }
                else {
                    thizRaw = thiz.Raw;
                }
                System.IntPtr ret = enesim_text_buffer_smart_new(thizRaw);
                Initialize(ret, false);
            }
            
            public Enesim.Text.Buffer GetReal() {
                System.IntPtr ret = enesim_text_buffer_smart_real_get(raw);
                return new Buffer(ret, false);
            }
            
            public void SetReal(Enesim.Text.Buffer real) {
                System.IntPtr realRaw;
                if ((real == null)) {
                    realRaw = IntPtr.Zero;
                }
                else {
                    realRaw = real.Raw;
                }
                enesim_text_buffer_smart_real_set(raw, realRaw);
            }
            
            public void Dirty() {
                enesim_text_buffer_smart_dirty(raw);
            }
            
            public void Clear() {
                enesim_text_buffer_smart_clear(raw);
            }
            
            public bool IsDirty() {
                bool ret = enesim_text_buffer_smart_is_dirty(raw);
                return ret;
            }
        }
        
        public class Simple : Buffer {
            
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern IntPtr enesim_text_buffer_simple_new(int initial_length);
            
            protected internal Simple(System.IntPtr i, bool owned) : 
                    base(i, owned) {
                Initialize(i, owned);
            }
            
            public Simple(int initial_length) {
                System.IntPtr ret = enesim_text_buffer_simple_new(initial_length);
                Initialize(ret, false);
            }
        }
    }
    
    public class Font : IDisposable {
        
        protected IntPtr raw;
        
        private bool disposed;
        
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern IntPtr enesim_text_font_new_description_from(IntPtr e, string description, int size);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern IntPtr enesim_text_font_new_file_from(IntPtr e, string file, int index, int size);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern IntPtr enesim_text_font_ref(IntPtr self);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void enesim_text_font_unref(IntPtr self);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern int enesim_text_font_max_ascent_get(IntPtr self);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern int enesim_text_font_max_descent_get(IntPtr self);
~Font() { Dispose(false); }
        
        protected internal Font(System.IntPtr i, bool owned) {
            Initialize(i, owned);
        }
        
        public Font(Enesim.Text.Engine e, string description, int size) {
            System.IntPtr eRaw;
            if ((e == null)) {
                eRaw = IntPtr.Zero;
            }
            else {
                eRaw = e.Raw;
            }
            System.IntPtr ret = enesim_text_font_new_description_from(eRaw, description, size);
            Initialize(ret, false);
        }
        
        public Font(Enesim.Text.Engine e, string file, int index, int size) {
            System.IntPtr eRaw;
            if ((e == null)) {
                eRaw = IntPtr.Zero;
            }
            else {
                eRaw = e.Raw;
            }
            System.IntPtr ret = enesim_text_font_new_file_from(eRaw, file, index, size);
            Initialize(ret, false);
        }
        
        public System.IntPtr Raw {
            get {
                return this.raw;
            }
        }
        
        public virtual void Dispose() {
            Dispose(false);
            GC.SuppressFinalize(this);
        }
        
        protected virtual void Dispose(bool disposing) {
            if (disposed) {
            }
            else {
                enesim_text_font_unref(raw);
                raw = IntPtr.Zero;
                disposed = false;
            }
        }
        
        protected virtual void Initialize(System.IntPtr i, bool owned) {
            raw = i;
            if (owned) {
                enesim_text_font_ref(i);
            }
        }
        
        public int GetMaxAscent() {
            int ret = enesim_text_font_max_ascent_get(raw);
            return ret;
        }
        
        public int GetMaxDescent() {
            int ret = enesim_text_font_max_descent_get(raw);
            return ret;
        }
    }
    
    public class Engine : IDisposable {
        
        protected IntPtr raw;
        
        private bool disposed;
        
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern IntPtr enesim_text_engine_default_get();
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern IntPtr enesim_text_engine_freetype_get();
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern IntPtr enesim_text_engine_ref(IntPtr self);
[DllImport("enesim.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void enesim_text_engine_unref(IntPtr self);
~Engine() { Dispose(false); }
        
        protected Engine() {
        }
        
        protected internal Engine(System.IntPtr i, bool owned) {
            Initialize(i, owned);
        }
        
        public System.IntPtr Raw {
            get {
                return this.raw;
            }
        }
        
        public virtual void Dispose() {
            Dispose(false);
            GC.SuppressFinalize(this);
        }
        
        protected virtual void Dispose(bool disposing) {
            if (disposed) {
            }
            else {
                enesim_text_engine_unref(raw);
                raw = IntPtr.Zero;
                disposed = false;
            }
        }
        
        protected virtual void Initialize(System.IntPtr i, bool owned) {
            raw = i;
            if (owned) {
                enesim_text_engine_ref(i);
            }
        }
        
        public static Enesim.Text.Engine GetDefault() {
            System.IntPtr ret = enesim_text_engine_default_get();
            return new Engine(ret, false);
        }
        
        public static Enesim.Text.Engine GetFreetype() {
            System.IntPtr ret = enesim_text_engine_freetype_get();
            return new Engine(ret, false);
        }
    }
    
    public enum DirectionEnum {
        
        Ltr,
        
        Rtl,
    }
}
