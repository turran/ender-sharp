// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.17020
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

using Eina;
using Ender;
using Enesim;
using System;
using System.Reflection;
using System.Runtime.InteropServices;


namespace Egueb.Dom {
    
    
    public class EventIo : Egueb.Dom.Event {
        
        public delegate void DataCb();
        
        public delegate void ImageCb();
        
[DllImport("egueb-dom.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern System.IntPtr egueb_dom_event_io_data_new(IntPtr uri, Egueb.Dom.EventIo.DataCbInternal cbRaw);
[DllImport("egueb-dom.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern System.IntPtr egueb_dom_event_io_image_new(System.IntPtr sRaw, Egueb.Dom.EventIo.ImageCbInternal cbRaw);
[DllImport("egueb-dom.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern System.IntPtr egueb_dom_event_io_stream_get(System.IntPtr selfRaw);
[DllImport("egueb-dom.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void egueb_dom_event_io_uri_get(System.IntPtr selfRaw, IntPtr uri);
[DllImport("egueb-dom.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void egueb_dom_event_io_image_finish(System.IntPtr selfRaw, System.IntPtr sRaw);
[DllImport("egueb-dom.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void egueb_dom_event_io_data_finish(System.IntPtr selfRaw, System.IntPtr sRaw);

internal delegate void DataCbInternal();

internal delegate void ImageCbInternal();
        
        public EventIo(System.IntPtr i, bool owned) : 
                base(i, owned) {
            Initialize(i, owned);
        }
        
        public EventIo(System.IntPtr uri, Egueb.Dom.EventIo.DataCb cb) {

Egueb.Dom.EventIo.DataCbInternal cbRaw = () => {
cb();

};
            System.IntPtr ret = egueb_dom_event_io_data_new(uri, cbRaw);
            Initialize(ret, false);
        }
        
        public EventIo(Enesim.Stream s, Egueb.Dom.EventIo.ImageCb cb) {
            System.IntPtr sRaw;
            if ((s == null)) {
                sRaw = IntPtr.Zero;
            }
            else {
                sRaw = s.Raw;
            }

Egueb.Dom.EventIo.ImageCbInternal cbRaw = () => {
cb();

};
            System.IntPtr ret = egueb_dom_event_io_image_new(sRaw, cbRaw);
            Initialize(ret, false);
        }
        
        public Enesim.Stream GetStream() {
            System.IntPtr ret = egueb_dom_event_io_stream_get(raw);
            return Enesim.Stream.Downcast(ret, false);
        }
        
        public void GetUri(System.IntPtr uri) {
            egueb_dom_event_io_uri_get(raw, uri);
        }
        
        public void ImageFinish(Enesim.Surface s) {
            System.IntPtr sRaw;
            if ((s == null)) {
                sRaw = IntPtr.Zero;
            }
            else {
                sRaw = s.Raw;
            }
            egueb_dom_event_io_image_finish(raw, sRaw);
        }
        
        public void DataFinish(Enesim.Stream s) {
            System.IntPtr sRaw;
            if ((s == null)) {
                sRaw = IntPtr.Zero;
            }
            else {
                sRaw = s.Raw;
            }
            egueb_dom_event_io_data_finish(raw, sRaw);
        }
    }
    
    public class NodeMapNamed : IDisposable {
        
        protected IntPtr raw;
        
        private bool disposed;
        
[DllImport("egueb-dom.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern System.IntPtr egueb_dom_node_map_named_get(System.IntPtr selfRaw, System.IntPtr nameRaw, System.Int32 errRaw);
[DllImport("egueb-dom.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern System.Boolean egueb_dom_node_map_named_remove(System.IntPtr selfRaw, System.IntPtr nameRaw, System.IntPtr nRaw, System.Int32 errRaw);
[DllImport("egueb-dom.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern System.Boolean egueb_dom_node_map_named_set(System.IntPtr selfRaw, System.IntPtr nRaw, System.Int32 errRaw);
[DllImport("egueb-dom.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern System.IntPtr egueb_dom_node_map_named_at(System.IntPtr selfRaw, System.Int32 idx);
[DllImport("egueb-dom.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern System.Int32 egueb_dom_node_map_named_length(System.IntPtr selfRaw);
[DllImport("egueb-dom.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern System.IntPtr egueb_dom_node_map_named_ref(System.IntPtr selfRaw);
[DllImport("egueb-dom.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void egueb_dom_node_map_named_unref(System.IntPtr selfRaw);
~NodeMapNamed() { Dispose(false); }
        
        protected NodeMapNamed() {
        }
        
        public NodeMapNamed(System.IntPtr i, bool owned) {
            Initialize(i, owned);
        }
        
        public System.IntPtr Raw {
            get {
                return this.raw;
            }
        }
        
        public virtual void Dispose() {
            Dispose(false);
            GC.SuppressFinalize(this);
        }
        
        protected virtual void Dispose(bool disposing) {
            if (disposed) {
            }
            else {
                egueb_dom_node_map_named_unref(raw);
                raw = IntPtr.Zero;
                disposed = false;
            }
        }
        
        protected virtual void Initialize(System.IntPtr i, bool owned) {
            raw = i;
            if (owned) {
                egueb_dom_node_map_named_ref(i);
            }
        }
        
        public Egueb.Dom.Node Get(Egueb.Dom.String name, Eina.Error err) {
            System.IntPtr nameRaw;
            if ((name == null)) {
                nameRaw = IntPtr.Zero;
            }
            else {
                nameRaw = name.Raw;
            }
            int errRaw;
            errRaw = err;
            System.IntPtr ret = egueb_dom_node_map_named_get(raw, nameRaw, errRaw);
            return new Egueb.Dom.Node(ret, false);
        }
        
        public bool Remove(Egueb.Dom.String name, Egueb.Dom.Node n, Eina.Error err) {
            System.IntPtr nameRaw;
            if ((name == null)) {
                nameRaw = IntPtr.Zero;
            }
            else {
                nameRaw = name.Raw;
            }
            System.IntPtr nRaw;
            if ((n == null)) {
                nRaw = IntPtr.Zero;
            }
            else {
                nRaw = n.Raw;
            }
            int errRaw;
            errRaw = err;
            bool ret = egueb_dom_node_map_named_remove(raw, nameRaw, nRaw, errRaw);
            return ret;
        }
        
        public bool Set(Egueb.Dom.Node n, Eina.Error err) {
            System.IntPtr nRaw;
            if ((n == null)) {
                nRaw = IntPtr.Zero;
            }
            else {
                nRaw = n.Raw;
            }
            int errRaw;
            errRaw = err;
            bool ret = egueb_dom_node_map_named_set(raw, nRaw, errRaw);
            return ret;
        }
        
        public Egueb.Dom.Node At(int idx) {
            System.IntPtr ret = egueb_dom_node_map_named_at(raw, idx);
            return new Egueb.Dom.Node(ret, false);
        }
        
        public int Length() {
            int ret = egueb_dom_node_map_named_length(raw);
            return ret;
        }
    }
    
    public class EventMultimedia : Egueb.Dom.Event {
        
[DllImport("egueb-dom.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern IntPtr egueb_dom_event_multimedia_notifier_get(System.IntPtr selfRaw);
[DllImport("egueb-dom.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern IntPtr egueb_dom_event_multimedia_provider_get(System.IntPtr selfRaw);
[DllImport("egueb-dom.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void egueb_dom_event_multimedia_provider_set(System.IntPtr selfRaw, IntPtr sc);
[DllImport("egueb-dom.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern System.IntPtr egueb_dom_event_multimedia_video_new(IntPtr notifier, System.IntPtr imageRaw);
[DllImport("egueb-dom.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern System.IntPtr egueb_dom_event_multimedia_video_renderer_get(System.IntPtr selfRaw);
[DllImport("egueb-dom.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern System.IntPtr egueb_dom_event_multimedia_audio_new(IntPtr notifier);
        
        public EventMultimedia(System.IntPtr i, bool owned) : 
                base(i, owned) {
            Initialize(i, owned);
        }
        
        public EventMultimedia(System.IntPtr notifier, Enesim.Renderer image) {
            System.IntPtr imageRaw;
            if ((image == null)) {
                imageRaw = IntPtr.Zero;
            }
            else {
                imageRaw = image.Raw;
            }
            System.IntPtr ret = egueb_dom_event_multimedia_video_new(notifier, imageRaw);
            Initialize(ret, false);
        }
        
        public EventMultimedia(System.IntPtr notifier) {
            System.IntPtr ret = egueb_dom_event_multimedia_audio_new(notifier);
            Initialize(ret, false);
        }
        
        public System.IntPtr GetNotifier() {
            IntPtr ret = egueb_dom_event_multimedia_notifier_get(raw);
        }
        
        public System.IntPtr GetProvider() {
            IntPtr ret = egueb_dom_event_multimedia_provider_get(raw);
        }
        
        public void SetProvider(System.IntPtr sc) {
            egueb_dom_event_multimedia_provider_set(raw, sc);
        }
        
        public Enesim.Renderer GetVideoRenderer() {
            System.IntPtr ret = egueb_dom_event_multimedia_video_renderer_get(raw);
            return Enesim.Renderer.Downcast(ret, false);
        }
    }
    
    public class EventScript : Egueb.Dom.Event {
        
[DllImport("egueb-dom.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern System.IntPtr egueb_dom_event_script_new(System.IntPtr typeRaw);
[DllImport("egueb-dom.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern System.IntPtr egueb_dom_event_script_type_get(System.IntPtr selfRaw);
[DllImport("egueb-dom.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern System.IntPtr egueb_dom_event_script_scripter_get(System.IntPtr selfRaw);
[DllImport("egueb-dom.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void egueb_dom_event_script_scripter_set(System.IntPtr selfRaw, System.IntPtr scRaw);
        
        public EventScript(System.IntPtr i, bool owned) : 
                base(i, owned) {
            Initialize(i, owned);
        }
        
        public EventScript(Egueb.Dom.String type) {
            System.IntPtr typeRaw;
            if ((type == null)) {
                typeRaw = IntPtr.Zero;
            }
            else {
                typeRaw = type.Raw;
            }
            System.IntPtr ret = egueb_dom_event_script_new(typeRaw);
            Initialize(ret, false);
        }
        
        public Egueb.Dom.String GetType() {
            System.IntPtr ret = egueb_dom_event_script_type_get(raw);
            return new Egueb.Dom.String(ret, false);
        }
        
        public Egueb.Dom.Scripter GetScripter() {
            System.IntPtr ret = egueb_dom_event_script_scripter_get(raw);
            return new Egueb.Dom.Scripter(ret, false);
        }
        
        public void SetScripter(Egueb.Dom.Scripter sc) {
            System.IntPtr scRaw;
            if ((sc == null)) {
                scRaw = IntPtr.Zero;
            }
            else {
                scRaw = sc.Raw;
            }
            egueb_dom_event_script_scripter_set(raw, scRaw);
        }
    }
    
    public class NodeList : IDisposable {
        
        protected IntPtr raw;
        
        private bool disposed;
        
[DllImport("egueb-dom.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern System.IntPtr egueb_dom_node_list_item(System.IntPtr selfRaw, System.Int32 index);
[DllImport("egueb-dom.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern System.IntPtr egueb_dom_node_list_ref(System.IntPtr selfRaw);
[DllImport("egueb-dom.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void egueb_dom_node_list_unref(System.IntPtr selfRaw);
[DllImport("egueb-dom.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern System.Int32 egueb_dom_node_list_length_get(System.IntPtr selfRaw);
~NodeList() { Dispose(false); }
        
        protected NodeList() {
        }
        
        public NodeList(System.IntPtr i, bool owned) {
            Initialize(i, owned);
        }
        
        public System.IntPtr Raw {
            get {
                return this.raw;
            }
        }
        
        public int Length {
            get {
                int ret = egueb_dom_node_list_length_get(raw);
                return ret;
            }
        }
        
        public virtual void Dispose() {
            Dispose(false);
            GC.SuppressFinalize(this);
        }
        
        protected virtual void Dispose(bool disposing) {
            if (disposed) {
            }
            else {
                egueb_dom_node_list_unref(raw);
                raw = IntPtr.Zero;
                disposed = false;
            }
        }
        
        protected virtual void Initialize(System.IntPtr i, bool owned) {
            raw = i;
            if (owned) {
                egueb_dom_node_list_ref(i);
            }
        }
        
        public Egueb.Dom.Node Item(int index) {
            System.IntPtr ret = egueb_dom_node_list_item(raw, index);
            return new Egueb.Dom.Node(ret, false);
        }
    }
    
    public class Text : Egueb.Dom.Character.Data {
        
[DllImport("egueb-dom.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern System.IntPtr egueb_dom_text_new();
        
        public Text(System.IntPtr i, bool owned) : 
                base(i, owned) {
            Initialize(i, owned);
        }
        
        public Text() {
            System.IntPtr ret = egueb_dom_text_new();
            Initialize(ret, false);
        }
    }
    
    public enum EventDirection {
        
        CaptureBubble = 0,
        
        BubbleCapture = 1,
    }
    
    public class Event : IDisposable {
        
        public delegate void Listener();
        
        protected IntPtr raw;
        
        private bool disposed;
        
[DllImport("egueb-dom.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern IntPtr egueb_dom_event_descriptor_get();
[DllImport("egueb-dom.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void egueb_dom_event_init(System.IntPtr selfRaw, System.IntPtr typeRaw, System.Boolean bubbleable, System.Boolean capturable, System.Boolean cancelable, Egueb.Dom.EventDirection direction);
[DllImport("egueb-dom.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void egueb_dom_event_unref(System.IntPtr selfRaw);
[DllImport("egueb-dom.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern System.IntPtr egueb_dom_event_ref(System.IntPtr selfRaw);
[DllImport("egueb-dom.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern IntPtr egueb_dom_event_target_current_get(System.IntPtr selfRaw);
[DllImport("egueb-dom.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void egueb_dom_event_stop_propagation(System.IntPtr selfRaw);
[DllImport("egueb-dom.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern System.IntPtr egueb_dom_event_item_get(System.IntPtr selfRaw);
[DllImport("egueb-dom.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern System.IntPtr egueb_dom_event_type_get(System.IntPtr selfRaw);
[DllImport("egueb-dom.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern Egueb.Dom.EventPhase egueb_dom_event_phase_get(System.IntPtr selfRaw);
[DllImport("egueb-dom.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern IntPtr egueb_dom_event_target_get(System.IntPtr selfRaw);
~Event() { Dispose(false); }

internal delegate void ListenerInternal();
        
        protected Event() {
        }
        
        public Event(System.IntPtr i, bool owned) {
            Initialize(i, owned);
        }
        
        public System.IntPtr Raw {
            get {
                return this.raw;
            }
        }
        
        public Egueb.Dom.String Type {
            get {
                System.IntPtr ret = egueb_dom_event_type_get(raw);
                return new Egueb.Dom.String(ret, false);
            }
        }
        
        public Egueb.Dom.EventPhase Phase {
            get {
                Egueb.Dom.EventPhase ret = egueb_dom_event_phase_get(raw);
                return ret;
            }
        }
        
        public System.IntPtr Target {
            get {
                IntPtr ret = egueb_dom_event_target_get(raw);
            }
        }
        
        public virtual void Dispose() {
            Dispose(false);
            GC.SuppressFinalize(this);
        }
        
        protected virtual void Dispose(bool disposing) {
            if (disposed) {
            }
            else {
                egueb_dom_event_unref(raw);
                raw = IntPtr.Zero;
                disposed = false;
            }
        }
        
        protected virtual void Initialize(System.IntPtr i, bool owned) {
            raw = i;
            if (owned) {
                egueb_dom_event_ref(i);
            }
        }
        
        public static System.IntPtr GetDescriptor() {
            IntPtr ret = egueb_dom_event_descriptor_get();
        }
        
        public void Init(Egueb.Dom.String type, bool bubbleable, bool capturable, bool cancelable, Egueb.Dom.EventDirection direction) {
            System.IntPtr typeRaw;
            if ((type == null)) {
                typeRaw = IntPtr.Zero;
            }
            else {
                typeRaw = type.Raw;
            }
            egueb_dom_event_init(raw, typeRaw, bubbleable, capturable, cancelable, direction);
        }
        
        public System.IntPtr GetTargetCurrent() {
            IntPtr ret = egueb_dom_event_target_current_get(raw);
        }
        
        public void StopPropagation() {
            egueb_dom_event_stop_propagation(raw);
        }
        
        public Ender.Item GetItem() {
            System.IntPtr ret = egueb_dom_event_item_get(raw);
            return new Ender.Item(ret, false);
        }
    }
    
    public class Node : IDisposable {
        
        public delegate bool Cb();
        
        protected IntPtr raw;
        
        private bool disposed;
        
[DllImport("egueb-dom.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern IntPtr egueb_dom_node_descriptor_get();
[DllImport("egueb-dom.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern System.Boolean egueb_dom_node_is_destroying(System.IntPtr selfRaw);
[DllImport("egueb-dom.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void egueb_dom_node_unref(System.IntPtr selfRaw);
[DllImport("egueb-dom.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern System.IntPtr egueb_dom_node_ref(System.IntPtr selfRaw);
[DllImport("egueb-dom.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern System.Int32 egueb_dom_node_ref_get(System.IntPtr selfRaw);
[DllImport("egueb-dom.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void egueb_dom_node_weak_ref(System.IntPtr selfRaw, IntPtr l, System.IntPtr data);
[DllImport("egueb-dom.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void egueb_dom_node_weak_unref(System.IntPtr selfRaw, IntPtr l, System.IntPtr data);
[DllImport("egueb-dom.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void egueb_dom_node_weak_ref_add(System.IntPtr selfRaw, System.IntPtr weak_locationRaw);
[DllImport("egueb-dom.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void egueb_dom_node_weak_ref_remove(System.IntPtr selfRaw, System.IntPtr weak_locationRaw);
[DllImport("egueb-dom.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern System.IntPtr egueb_dom_node_name_get(System.IntPtr selfRaw);
[DllImport("egueb-dom.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern System.IntPtr egueb_dom_node_value_get(System.IntPtr selfRaw);
[DllImport("egueb-dom.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern Egueb.Dom.NodeType egueb_dom_node_type_get(System.IntPtr selfRaw);
[DllImport("egueb-dom.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern System.IntPtr egueb_dom_node_parent_get(System.IntPtr selfRaw);
[DllImport("egueb-dom.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern System.Boolean egueb_dom_node_children_foreach(System.IntPtr selfRaw, Egueb.Dom.Node.CbInternal cbRaw, System.IntPtr data);
[DllImport("egueb-dom.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern System.IntPtr egueb_dom_node_child_first_get(System.IntPtr selfRaw);
[DllImport("egueb-dom.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern System.IntPtr egueb_dom_node_child_last_get(System.IntPtr selfRaw);
[DllImport("egueb-dom.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern System.Boolean egueb_dom_node_child_remove(System.IntPtr selfRaw, System.IntPtr childRaw, System.Int32 errRaw);
[DllImport("egueb-dom.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern System.Boolean egueb_dom_node_child_append(System.IntPtr selfRaw, System.IntPtr childRaw, System.Int32 errRaw);
[DllImport("egueb-dom.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern System.Boolean egueb_dom_node_insert_before(System.IntPtr selfRaw, System.IntPtr childRaw, System.IntPtr refRaw, System.Int32 errRaw);
[DllImport("egueb-dom.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern System.IntPtr egueb_dom_node_sibling_previous_get(System.IntPtr selfRaw);
[DllImport("egueb-dom.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern System.IntPtr egueb_dom_node_sibling_next_get(System.IntPtr selfRaw);
[DllImport("egueb-dom.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern System.IntPtr egueb_dom_node_attributes_get(System.IntPtr selfRaw);
[DllImport("egueb-dom.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern System.IntPtr egueb_dom_node_clone(System.IntPtr selfRaw, System.Boolean live, System.Boolean deep, System.Int32 errRaw);
[DllImport("egueb-dom.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern System.Boolean egueb_dom_node_event_propagate(System.IntPtr selfRaw, System.IntPtr eventRaw);
[DllImport("egueb-dom.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void egueb_dom_node_user_data_set(System.IntPtr selfRaw, System.IntPtr keyRaw, System.IntPtr data);
[DllImport("egueb-dom.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern System.IntPtr egueb_dom_node_user_data_get(System.IntPtr selfRaw, System.IntPtr keyRaw);
[DllImport("egueb-dom.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern System.Boolean egueb_dom_node_is_supported(System.IntPtr selfRaw, System.IntPtr nameRaw, System.IntPtr versionRaw);
[DllImport("egueb-dom.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern System.IntPtr egueb_dom_node_feature_get(System.IntPtr selfRaw, System.IntPtr nameRaw, System.IntPtr versionRaw);
[DllImport("egueb-dom.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern System.IntPtr egueb_dom_node_prefix_lookup(System.IntPtr selfRaw, System.IntPtr ns_uriRaw);
[DllImport("egueb-dom.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern System.Boolean egueb_dom_node_is_default_namespace(System.IntPtr selfRaw, System.IntPtr ns_uriRaw);
[DllImport("egueb-dom.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern System.IntPtr egueb_dom_node_namespace_uri_lookup(System.IntPtr selfRaw, System.IntPtr prefixRaw);
[DllImport("egueb-dom.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern System.IntPtr egueb_dom_node_prefix_get(System.IntPtr selfRaw);
[DllImport("egueb-dom.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void egueb_dom_node_freeze(System.IntPtr selfRaw);
[DllImport("egueb-dom.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern System.Boolean egueb_dom_node_is_freezed(System.IntPtr selfRaw);
[DllImport("egueb-dom.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void egueb_dom_node_thaw(System.IntPtr selfRaw);
[DllImport("egueb-dom.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern System.Boolean egueb_dom_node_feature_add(System.IntPtr selfRaw, System.IntPtr nameRaw, System.IntPtr versionRaw, IntPtr feature);
[DllImport("egueb-dom.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern System.IntPtr egueb_dom_node_owner_document_get(System.IntPtr selfRaw);
[DllImport("egueb-dom.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern System.IntPtr egueb_dom_node_child_nodes_get(System.IntPtr selfRaw);
[DllImport("egueb-dom.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern System.IntPtr egueb_dom_node_item_get(System.IntPtr selfRaw);
~Node() { Dispose(false); }

internal delegate System.Boolean CbInternal();
        
        protected Node() {
        }
        
        public Node(System.IntPtr i, bool owned) {
            Initialize(i, owned);
        }
        
        public System.IntPtr Raw {
            get {
                return this.raw;
            }
        }
        
        public Egueb.Dom.Document OwnerDocument {
            get {
                System.IntPtr ret = egueb_dom_node_owner_document_get(raw);
                return new Egueb.Dom.Document(ret, false);
            }
        }
        
        public Egueb.Dom.NodeList ChildNodes {
            get {
                System.IntPtr ret = egueb_dom_node_child_nodes_get(raw);
                return new Egueb.Dom.NodeList(ret, false);
            }
        }
        
        public Ender.Item Item {
            get {
                System.IntPtr ret = egueb_dom_node_item_get(raw);
                return new Ender.Item(ret, false);
            }
        }
        
        public virtual void Dispose() {
            Dispose(false);
            GC.SuppressFinalize(this);
        }
        
        protected virtual void Dispose(bool disposing) {
            if (disposed) {
            }
            else {
                egueb_dom_node_unref(raw);
                raw = IntPtr.Zero;
                disposed = false;
            }
        }
        
        protected virtual void Initialize(System.IntPtr i, bool owned) {
            raw = i;
            if (owned) {
                egueb_dom_node_ref(i);
            }
        }
        
        public static System.IntPtr GetDescriptor() {
            IntPtr ret = egueb_dom_node_descriptor_get();
        }
        
        public bool IsDestroying() {
            bool ret = egueb_dom_node_is_destroying(raw);
            return ret;
        }
        
        public int GetRef() {
            int ret = egueb_dom_node_ref_get(raw);
            return ret;
        }
        
        public void WeakRef(System.IntPtr l, System.IntPtr data) {
            egueb_dom_node_weak_ref(raw, l, data);
        }
        
        public void WeakUnref(System.IntPtr l, System.IntPtr data) {
            egueb_dom_node_weak_unref(raw, l, data);
        }
        
        public void WeakRefAdd(Egueb.Dom.Node weak_location) {
            System.IntPtr weak_locationRaw;
            if ((weak_location == null)) {
                weak_locationRaw = IntPtr.Zero;
            }
            else {
                weak_locationRaw = weak_location.Raw;
            }
            egueb_dom_node_weak_ref_add(raw, weak_locationRaw);
        }
        
        public void WeakRefRemove(Egueb.Dom.Node weak_location) {
            System.IntPtr weak_locationRaw;
            if ((weak_location == null)) {
                weak_locationRaw = IntPtr.Zero;
            }
            else {
                weak_locationRaw = weak_location.Raw;
            }
            egueb_dom_node_weak_ref_remove(raw, weak_locationRaw);
        }
        
        public Egueb.Dom.String GetName() {
            System.IntPtr ret = egueb_dom_node_name_get(raw);
            return new Egueb.Dom.String(ret, false);
        }
        
        public Egueb.Dom.String GetValue() {
            System.IntPtr ret = egueb_dom_node_value_get(raw);
            return new Egueb.Dom.String(ret, false);
        }
        
        public Egueb.Dom.NodeType GetType() {
            Egueb.Dom.NodeType ret = egueb_dom_node_type_get(raw);
            return ret;
        }
        
        public Egueb.Dom.Node GetParent() {
            System.IntPtr ret = egueb_dom_node_parent_get(raw);
            return new Egueb.Dom.Node(ret, false);
        }
        
        public bool ChildrenForeach(Egueb.Dom.Node.Cb cb, System.IntPtr data) {

Egueb.Dom.Node.CbInternal cbRaw = () => {
bool retInternal = cb();
return retInternal;

};
            bool ret = egueb_dom_node_children_foreach(raw, cbRaw, data);
            return ret;
        }
        
        public Egueb.Dom.Node GetChildFirst() {
            System.IntPtr ret = egueb_dom_node_child_first_get(raw);
            return new Egueb.Dom.Node(ret, false);
        }
        
        public Egueb.Dom.Node GetChildLast() {
            System.IntPtr ret = egueb_dom_node_child_last_get(raw);
            return new Egueb.Dom.Node(ret, false);
        }
        
        public bool ChildRemove(Egueb.Dom.Node child, Eina.Error err) {
            System.IntPtr childRaw;
            if ((child == null)) {
                childRaw = IntPtr.Zero;
            }
            else {
                childRaw = child.Raw;
            }
            int errRaw;
            errRaw = err;
            bool ret = egueb_dom_node_child_remove(raw, childRaw, errRaw);
            return ret;
        }
        
        public bool AppendChild(Egueb.Dom.Node child, Eina.Error err) {
            System.IntPtr childRaw;
            if ((child == null)) {
                childRaw = IntPtr.Zero;
            }
            else {
                childRaw = child.Raw;
            }
            int errRaw;
            errRaw = err;
            bool ret = egueb_dom_node_child_append(raw, childRaw, errRaw);
            return ret;
        }
        
        public bool InsertBefore(Egueb.Dom.Node child, Egueb.Dom.Node _ref, Eina.Error err) {
            System.IntPtr childRaw;
            if ((child == null)) {
                childRaw = IntPtr.Zero;
            }
            else {
                childRaw = child.Raw;
            }
            System.IntPtr _refRaw;
            if ((_ref == null)) {
                _refRaw = IntPtr.Zero;
            }
            else {
                _refRaw = _ref.Raw;
            }
            int errRaw;
            errRaw = err;
            bool ret = egueb_dom_node_insert_before(raw, childRaw, _refRaw, errRaw);
            return ret;
        }
        
        public Egueb.Dom.Node GetSiblingPrevious() {
            System.IntPtr ret = egueb_dom_node_sibling_previous_get(raw);
            return new Egueb.Dom.Node(ret, false);
        }
        
        public Egueb.Dom.Node GetSiblingNext() {
            System.IntPtr ret = egueb_dom_node_sibling_next_get(raw);
            return new Egueb.Dom.Node(ret, false);
        }
        
        public Egueb.Dom.NodeMapNamed GetAttributes() {
            System.IntPtr ret = egueb_dom_node_attributes_get(raw);
            return new Egueb.Dom.NodeMapNamed(ret, false);
        }
        
        public Egueb.Dom.Node Clone(bool live, bool deep, Eina.Error err) {
            int errRaw;
            errRaw = err;
            System.IntPtr ret = egueb_dom_node_clone(raw, live, deep, errRaw);
            return new Egueb.Dom.Node(ret, false);
        }
        
        public bool EventPropagate(Egueb.Dom.Event _event) {
            System.IntPtr _eventRaw;
            if ((_event == null)) {
                _eventRaw = IntPtr.Zero;
            }
            else {
                _eventRaw = _event.Raw;
            }
            bool ret = egueb_dom_node_event_propagate(raw, _eventRaw);
            return ret;
        }
        
        public void SetUserData(Egueb.Dom.String key, System.IntPtr data) {
            System.IntPtr keyRaw;
            if ((key == null)) {
                keyRaw = IntPtr.Zero;
            }
            else {
                keyRaw = key.Raw;
            }
            egueb_dom_node_user_data_set(raw, keyRaw, data);
        }
        
        public System.IntPtr GetUserData(Egueb.Dom.String key) {
            System.IntPtr keyRaw;
            if ((key == null)) {
                keyRaw = IntPtr.Zero;
            }
            else {
                keyRaw = key.Raw;
            }
            System.IntPtr ret = egueb_dom_node_user_data_get(raw, keyRaw);
            return ret;
        }
        
        public bool IsSupported(Egueb.Dom.String name, Egueb.Dom.String version) {
            System.IntPtr nameRaw;
            if ((name == null)) {
                nameRaw = IntPtr.Zero;
            }
            else {
                nameRaw = name.Raw;
            }
            System.IntPtr versionRaw;
            if ((version == null)) {
                versionRaw = IntPtr.Zero;
            }
            else {
                versionRaw = version.Raw;
            }
            bool ret = egueb_dom_node_is_supported(raw, nameRaw, versionRaw);
            return ret;
        }
        
        public System.IntPtr GetFeature(Egueb.Dom.String name, Egueb.Dom.String version) {
            System.IntPtr nameRaw;
            if ((name == null)) {
                nameRaw = IntPtr.Zero;
            }
            else {
                nameRaw = name.Raw;
            }
            System.IntPtr versionRaw;
            if ((version == null)) {
                versionRaw = IntPtr.Zero;
            }
            else {
                versionRaw = version.Raw;
            }
            System.IntPtr ret = egueb_dom_node_feature_get(raw, nameRaw, versionRaw);
            return ret;
        }
        
        public Egueb.Dom.String PrefixLookup(Egueb.Dom.String ns_uri) {
            System.IntPtr ns_uriRaw;
            if ((ns_uri == null)) {
                ns_uriRaw = IntPtr.Zero;
            }
            else {
                ns_uriRaw = ns_uri.Raw;
            }
            System.IntPtr ret = egueb_dom_node_prefix_lookup(raw, ns_uriRaw);
            return new Egueb.Dom.String(ret, false);
        }
        
        public bool IsDefaultNamespace(Egueb.Dom.String ns_uri) {
            System.IntPtr ns_uriRaw;
            if ((ns_uri == null)) {
                ns_uriRaw = IntPtr.Zero;
            }
            else {
                ns_uriRaw = ns_uri.Raw;
            }
            bool ret = egueb_dom_node_is_default_namespace(raw, ns_uriRaw);
            return ret;
        }
        
        public Egueb.Dom.String NamespaceUriLookup(Egueb.Dom.String prefix) {
            System.IntPtr prefixRaw;
            if ((prefix == null)) {
                prefixRaw = IntPtr.Zero;
            }
            else {
                prefixRaw = prefix.Raw;
            }
            System.IntPtr ret = egueb_dom_node_namespace_uri_lookup(raw, prefixRaw);
            return new Egueb.Dom.String(ret, false);
        }
        
        public Egueb.Dom.String GetPrefix() {
            System.IntPtr ret = egueb_dom_node_prefix_get(raw);
            return new Egueb.Dom.String(ret, false);
        }
        
        public void Freeze() {
            egueb_dom_node_freeze(raw);
        }
        
        public bool IsFreezed() {
            bool ret = egueb_dom_node_is_freezed(raw);
            return ret;
        }
        
        public void Thaw() {
            egueb_dom_node_thaw(raw);
        }
        
        public bool FeatureAdd(Egueb.Dom.String name, Egueb.Dom.String version, System.IntPtr feature) {
            System.IntPtr nameRaw;
            if ((name == null)) {
                nameRaw = IntPtr.Zero;
            }
            else {
                nameRaw = name.Raw;
            }
            System.IntPtr versionRaw;
            if ((version == null)) {
                versionRaw = IntPtr.Zero;
            }
            else {
                versionRaw = version.Raw;
            }
            bool ret = egueb_dom_node_feature_add(raw, nameRaw, versionRaw, feature);
            return ret;
        }
    }
    
    public partial class String : IDisposable {
        
        protected IntPtr raw;
        
        private bool disposed;
        
[DllImport("egueb-dom.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern System.IntPtr egueb_dom_string_new();
[DllImport("egueb-dom.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern System.IntPtr egueb_dom_string_new_with_string(System.String str);
[DllImport("egueb-dom.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern System.IntPtr egueb_dom_string_new_with_length(System.String str, System.Int32 len);
[DllImport("egueb-dom.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern System.IntPtr egueb_dom_string_steal(System.IntPtr str);
[DllImport("egueb-dom.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern System.IntPtr egueb_dom_string_dup(System.IntPtr selfRaw);
[DllImport("egueb-dom.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern System.IntPtr egueb_dom_string_ref(System.IntPtr selfRaw);
[DllImport("egueb-dom.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void egueb_dom_string_unref(System.IntPtr selfRaw);
[DllImport("egueb-dom.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void egueb_dom_string_static_string_set(System.IntPtr selfRaw, System.String str);
[DllImport("egueb-dom.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void egueb_dom_string_string_steal(System.IntPtr selfRaw, System.IntPtr str);
[DllImport("egueb-dom.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern System.Boolean egueb_dom_string_is_equal(System.IntPtr selfRaw, System.IntPtr otherRaw);
[DllImport("egueb-dom.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern System.Boolean egueb_dom_string_is_valid(System.IntPtr selfRaw);
[DllImport("egueb-dom.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern System.IntPtr egueb_dom_string_string_get(System.IntPtr selfRaw);
[DllImport("egueb-dom.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void egueb_dom_string_string_set(System.IntPtr selfRaw, System.String str);
~String() { Dispose(false); }
        
        public String(System.IntPtr i, bool owned) {
            Initialize(i, owned);
        }
        
        public String() {
            System.IntPtr ret = egueb_dom_string_new();
            Initialize(ret, false);
        }
        
        public String(string str) {
            System.IntPtr ret = egueb_dom_string_new_with_string(str);
            Initialize(ret, false);
        }
        
        public String(string str, int len) {
            System.IntPtr ret = egueb_dom_string_new_with_length(str, len);
            Initialize(ret, false);
        }
        
        public System.IntPtr Raw {
            get {
                return this.raw;
            }
        }
        
        public string String {
            get {
                System.IntPtr ret = egueb_dom_string_string_get(raw);
                return Marshal.PtrToStringAnsi(ret);
            }
            set {
                string str;
                str = value;
                egueb_dom_string_string_set(raw, str);
            }
        }
        
        public virtual void Dispose() {
            Dispose(false);
            GC.SuppressFinalize(this);
        }
        
        protected virtual void Dispose(bool disposing) {
            if (disposed) {
            }
            else {
                egueb_dom_string_unref(raw);
                raw = IntPtr.Zero;
                disposed = false;
            }
        }
        
        protected virtual void Initialize(System.IntPtr i, bool owned) {
            raw = i;
            if (owned) {
                egueb_dom_string_ref(i);
            }
        }
        
        public static Egueb.Dom.String Steal(string str) {
            System.IntPtr ret = egueb_dom_string_steal(str);
            return new Egueb.Dom.String(ret, false);
        }
        
        public Egueb.Dom.String Dup() {
            System.IntPtr ret = egueb_dom_string_dup(raw);
            return new Egueb.Dom.String(ret, false);
        }
        
        public void SetStaticString(string str) {
            egueb_dom_string_static_string_set(raw, str);
        }
        
        public void StringSteal(string str) {
            egueb_dom_string_string_steal(raw, str);
        }
        
        public bool IsEqual(Egueb.Dom.String other) {
            System.IntPtr otherRaw;
            if ((other == null)) {
                otherRaw = IntPtr.Zero;
            }
            else {
                otherRaw = other.Raw;
            }
            bool ret = egueb_dom_string_is_equal(raw, otherRaw);
            return ret;
        }
        
        public bool IsValid() {
            bool ret = egueb_dom_string_is_valid(raw);
            return ret;
        }
    }
    
    public class EventWindow : Egueb.Dom.EventUi {
        
        protected EventWindow() {
        }
        
        public EventWindow(System.IntPtr i, bool owned) : 
                base(i, owned) {
            Initialize(i, owned);
        }
    }
    
    public class EventTarget : IDisposable {
        
        protected IntPtr raw;
        
        private bool disposed;
        
[DllImport("egueb-dom.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern System.IntPtr egueb_dom_event_target_ref(System.IntPtr selfRaw);
[DllImport("egueb-dom.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void egueb_dom_event_target_unref(System.IntPtr selfRaw);
[DllImport("egueb-dom.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern System.Boolean egueb_dom_event_target_type_get(System.IntPtr selfRaw, IntPtr lib, IntPtr name);
[DllImport("egueb-dom.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern IntPtr egueb_dom_event_target_event_listener_add(System.IntPtr selfRaw, System.IntPtr typeRaw, IntPtr listener, System.Boolean capture, System.IntPtr data);
[DllImport("egueb-dom.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void egueb_dom_event_target_event_listener_remove(System.IntPtr selfRaw, System.IntPtr typeRaw, IntPtr listener, System.Boolean capture, System.IntPtr data);
[DllImport("egueb-dom.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void egueb_dom_event_target_event_listener_free(IntPtr target_listener);
[DllImport("egueb-dom.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern System.Boolean egueb_dom_event_target_event_dispatch(System.IntPtr selfRaw, System.IntPtr eventRaw, out System.Boolean notprevented, out System.Int32 errRaw);
[DllImport("egueb-dom.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void egueb_dom_event_target_monitor_add(System.IntPtr selfRaw, IntPtr listener, System.IntPtr data);
[DllImport("egueb-dom.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void egueb_dom_event_target_monitor_remove(System.IntPtr selfRaw, IntPtr listener, System.IntPtr data);
[DllImport("egueb-dom.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern IntPtr egueb_dom_event_target_descriptor_get();
~EventTarget() { Dispose(false); }
        
        protected EventTarget() {
        }
        
        public EventTarget(System.IntPtr i, bool owned) {
            Initialize(i, owned);
        }
        
        public System.IntPtr Raw {
            get {
                return this.raw;
            }
        }
        
        public virtual void Dispose() {
            Dispose(false);
            GC.SuppressFinalize(this);
        }
        
        protected virtual void Dispose(bool disposing) {
            if (disposed) {
            }
            else {
                egueb_dom_event_target_unref(raw);
                raw = IntPtr.Zero;
                disposed = false;
            }
        }
        
        protected virtual void Initialize(System.IntPtr i, bool owned) {
            raw = i;
            if (owned) {
                egueb_dom_event_target_ref(i);
            }
        }
        
        public bool GetType(System.IntPtr lib, System.IntPtr name) {
            bool ret = egueb_dom_event_target_type_get(raw, lib, name);
            return ret;
        }
        
        public System.IntPtr EventListenerAdd(Egueb.Dom.String type, System.IntPtr listener, bool capture, System.IntPtr data) {
            System.IntPtr typeRaw;
            if ((type == null)) {
                typeRaw = IntPtr.Zero;
            }
            else {
                typeRaw = type.Raw;
            }
            IntPtr ret = egueb_dom_event_target_event_listener_add(raw, typeRaw, listener, capture, data);
        }
        
        public void EventListenerRemove(Egueb.Dom.String type, System.IntPtr listener, bool capture, System.IntPtr data) {
            System.IntPtr typeRaw;
            if ((type == null)) {
                typeRaw = IntPtr.Zero;
            }
            else {
                typeRaw = type.Raw;
            }
            egueb_dom_event_target_event_listener_remove(raw, typeRaw, listener, capture, data);
        }
        
        public static void EventListenerFree(System.IntPtr target_listener) {
            egueb_dom_event_target_event_listener_free(target_listener);
        }
        
        public bool EventDispatch(Egueb.Dom.Event _event, out bool notprevented, out Eina.Error err) {
            System.IntPtr _eventRaw;
            if ((_event == null)) {
                _eventRaw = IntPtr.Zero;
            }
            else {
                _eventRaw = _event.Raw;
            }
            int errRaw;
            bool ret = egueb_dom_event_target_event_dispatch(raw, _eventRaw, out  notprevented, out  errRaw);
            err = errRaw;
            return ret;
        }
        
        public void MonitorAdd(System.IntPtr listener, System.IntPtr data) {
            egueb_dom_event_target_monitor_add(raw, listener, data);
        }
        
        public void MonitorRemove(System.IntPtr listener, System.IntPtr data) {
            egueb_dom_event_target_monitor_remove(raw, listener, data);
        }
        
        public static System.IntPtr GetDescriptor() {
            IntPtr ret = egueb_dom_event_target_descriptor_get();
        }
    }
    
    public enum AttrType {
        
        Base = 1,
        
        Default = 2,
        
        Animated = 4,
        
        Styled = 8,
    }
    
    public partial class Attr : Egueb.Dom.Node {
        
        public delegate void Fetch();
        
[DllImport("egueb-dom.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern System.Boolean egueb_dom_attr_egueb_dom_is_attr(System.IntPtr selfRaw);
[DllImport("egueb-dom.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern IntPtr egueb_dom_attr_value_descriptor_get(System.IntPtr selfRaw);
[DllImport("egueb-dom.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void egueb_dom_attr_init(System.IntPtr selfRaw, System.IntPtr nameRaw, System.IntPtr nsRaw, System.Boolean animatable, System.Boolean stylable, System.Boolean inheritable);
[DllImport("egueb-dom.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern System.IntPtr egueb_dom_attr_name_get(System.IntPtr selfRaw);
[DllImport("egueb-dom.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern System.IntPtr egueb_dom_attr_owner_get(System.IntPtr selfRaw);
[DllImport("egueb-dom.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern System.Boolean egueb_dom_attr_is_stylable(System.IntPtr selfRaw);
[DllImport("egueb-dom.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern System.Boolean egueb_dom_attr_is_animatable(System.IntPtr selfRaw);
[DllImport("egueb-dom.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern System.Boolean egueb_dom_attr_is_inheritable(System.IntPtr selfRaw);
[DllImport("egueb-dom.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern System.Boolean egueb_dom_attr_is_set(System.IntPtr selfRaw);
[DllImport("egueb-dom.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern System.Boolean egueb_dom_attr_type_is_set(System.IntPtr selfRaw, Egueb.Dom.AttrType type);
[DllImport("egueb-dom.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern System.Boolean egueb_dom_attr_has_value(System.IntPtr selfRaw);
[DllImport("egueb-dom.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void egueb_dom_attr_inherit(System.IntPtr selfRaw, Egueb.Dom.AttrType type);
[DllImport("egueb-dom.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern System.Boolean egueb_dom_attr_unset(System.IntPtr selfRaw, System.Int32 prop_mask);
[DllImport("egueb-dom.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern System.Boolean egueb_dom_attr_value_get(System.IntPtr selfRaw, Egueb.Dom.AttrType type, IntPtr value);
[DllImport("egueb-dom.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern System.Boolean egueb_dom_attr_value_set(System.IntPtr selfRaw, Egueb.Dom.AttrType type, IntPtr value);
[DllImport("egueb-dom.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void egueb_dom_attr_inheritable_process(System.IntPtr selfRaw, System.IntPtr relRaw);
[DllImport("egueb-dom.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern System.Boolean egueb_dom_attr_final_value_get(System.IntPtr selfRaw, IntPtr value);
[DllImport("egueb-dom.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern System.Boolean egueb_dom_attr_final_string_get(System.IntPtr selfRaw, System.IntPtr sRaw);
[DllImport("egueb-dom.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern System.Boolean egueb_dom_attr_string_set(System.IntPtr selfRaw, Egueb.Dom.AttrType type, System.IntPtr strRaw);
[DllImport("egueb-dom.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern System.Boolean egueb_dom_attr_string_get(System.IntPtr selfRaw, Egueb.Dom.AttrType type, System.IntPtr strRaw);
[DllImport("egueb-dom.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void egueb_dom_attr_inherited_get(System.IntPtr selfRaw, System.IntPtr inheritedRaw);
[DllImport("egueb-dom.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern System.Boolean egueb_dom_attr_has_changed(System.IntPtr selfRaw);
[DllImport("egueb-dom.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern IntPtr egueb_dom_attr_object_descriptor_get();
[DllImport("egueb-dom.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern IntPtr egueb_dom_attr_basic_descriptor_get();
[DllImport("egueb-dom.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern IntPtr egueb_dom_attr_primitive_descriptor_get();

internal delegate void FetchInternal();
        
        protected Attr() {
        }
        
        public Attr(System.IntPtr i, bool owned) : 
                base(i, owned) {
            Initialize(i, owned);
        }
        
        public bool EguebDomIsAttr() {
            bool ret = egueb_dom_attr_egueb_dom_is_attr(raw);
            return ret;
        }
        
        public System.IntPtr GetValueDescriptor() {
            IntPtr ret = egueb_dom_attr_value_descriptor_get(raw);
        }
        
        public void Init(Egueb.Dom.String name, Egueb.Dom.String ns, bool animatable, bool stylable, bool inheritable) {
            System.IntPtr nameRaw;
            if ((name == null)) {
                nameRaw = IntPtr.Zero;
            }
            else {
                nameRaw = name.Raw;
            }
            System.IntPtr nsRaw;
            if ((ns == null)) {
                nsRaw = IntPtr.Zero;
            }
            else {
                nsRaw = ns.Raw;
            }
            egueb_dom_attr_init(raw, nameRaw, nsRaw, animatable, stylable, inheritable);
        }
        
        public Egueb.Dom.String GetName() {
            System.IntPtr ret = egueb_dom_attr_name_get(raw);
            return new Egueb.Dom.String(ret, false);
        }
        
        public Egueb.Dom.Node GetOwner() {
            System.IntPtr ret = egueb_dom_attr_owner_get(raw);
            return new Egueb.Dom.Node(ret, false);
        }
        
        public bool IsStylable() {
            bool ret = egueb_dom_attr_is_stylable(raw);
            return ret;
        }
        
        public bool IsAnimatable() {
            bool ret = egueb_dom_attr_is_animatable(raw);
            return ret;
        }
        
        public bool IsInheritable() {
            bool ret = egueb_dom_attr_is_inheritable(raw);
            return ret;
        }
        
        public bool SetIs() {
            bool ret = egueb_dom_attr_is_set(raw);
            return ret;
        }
        
        public bool SetTypeIs(Egueb.Dom.AttrType type) {
            bool ret = egueb_dom_attr_type_is_set(raw, type);
            return ret;
        }
        
        public bool HasValue() {
            bool ret = egueb_dom_attr_has_value(raw);
            return ret;
        }
        
        public void Inherit(Egueb.Dom.AttrType type) {
            egueb_dom_attr_inherit(raw, type);
        }
        
        public bool Unset(int prop_mask) {
            bool ret = egueb_dom_attr_unset(raw, prop_mask);
            return ret;
        }
        
        public bool GetValue(Egueb.Dom.AttrType type, System.IntPtr value) {
            bool ret = egueb_dom_attr_value_get(raw, type, value);
            return ret;
        }
        
        public bool SetValue(Egueb.Dom.AttrType type, System.IntPtr value) {
            bool ret = egueb_dom_attr_value_set(raw, type, value);
            return ret;
        }
        
        public void InheritableProcess(Egueb.Dom.Node rel) {
            System.IntPtr relRaw;
            if ((rel == null)) {
                relRaw = IntPtr.Zero;
            }
            else {
                relRaw = rel.Raw;
            }
            egueb_dom_attr_inheritable_process(raw, relRaw);
        }
        
        public bool GetFinalValue(System.IntPtr value) {
            bool ret = egueb_dom_attr_final_value_get(raw, value);
            return ret;
        }
        
        public bool GetFinalString(Egueb.Dom.String s) {
            System.IntPtr sRaw;
            if ((s == null)) {
                sRaw = IntPtr.Zero;
            }
            else {
                sRaw = s.Raw;
            }
            bool ret = egueb_dom_attr_final_string_get(raw, sRaw);
            return ret;
        }
        
        public bool SetString(Egueb.Dom.AttrType type, Egueb.Dom.String str) {
            System.IntPtr strRaw;
            if ((str == null)) {
                strRaw = IntPtr.Zero;
            }
            else {
                strRaw = str.Raw;
            }
            bool ret = egueb_dom_attr_string_set(raw, type, strRaw);
            return ret;
        }
        
        public bool GetString(Egueb.Dom.AttrType type, Egueb.Dom.String str) {
            System.IntPtr strRaw;
            if ((str == null)) {
                strRaw = IntPtr.Zero;
            }
            else {
                strRaw = str.Raw;
            }
            bool ret = egueb_dom_attr_string_get(raw, type, strRaw);
            return ret;
        }
        
        public void GetInherited(Egueb.Dom.Node inherited) {
            System.IntPtr inheritedRaw;
            if ((inherited == null)) {
                inheritedRaw = IntPtr.Zero;
            }
            else {
                inheritedRaw = inherited.Raw;
            }
            egueb_dom_attr_inherited_get(raw, inheritedRaw);
        }
        
        public bool HasChanged() {
            bool ret = egueb_dom_attr_has_changed(raw);
            return ret;
        }
        
        public static System.IntPtr GetObjectDescriptor() {
            IntPtr ret = egueb_dom_attr_object_descriptor_get();
        }
        
        public static System.IntPtr GetBasicDescriptor() {
            IntPtr ret = egueb_dom_attr_basic_descriptor_get();
        }
        
        public static System.IntPtr GetPrimitiveDescriptor() {
            IntPtr ret = egueb_dom_attr_primitive_descriptor_get();
        }
    }
    
    public class EventMouse : Egueb.Dom.Event {
        
[DllImport("egueb-dom.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern System.IntPtr egueb_dom_event_mouse_new();
[DllImport("egueb-dom.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern System.IntPtr egueb_dom_event_mouse_related_get(System.IntPtr selfRaw);
[DllImport("egueb-dom.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void egueb_dom_event_mouse_screen_coords_get(System.IntPtr selfRaw, out System.Int32 x, out System.Int32 y);
[DllImport("egueb-dom.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern System.Int32 egueb_dom_event_mouse_button_get(System.IntPtr selfRaw);
[DllImport("egueb-dom.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void egueb_dom_event_mouse_client_coords_get(System.IntPtr selfRaw, out System.Int32 x, out System.Int32 y);
[DllImport("egueb-dom.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern System.Int32 egueb_dom_event_mouse_client_x_get(System.IntPtr selfRaw);
[DllImport("egueb-dom.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern System.Int32 egueb_dom_event_mouse_client_y_get(System.IntPtr selfRaw);
        
        public EventMouse(System.IntPtr i, bool owned) : 
                base(i, owned) {
            Initialize(i, owned);
        }
        
        public EventMouse() {
            System.IntPtr ret = egueb_dom_event_mouse_new();
            Initialize(ret, false);
        }
        
        public int ClientX {
            get {
                int ret = egueb_dom_event_mouse_client_x_get(raw);
                return ret;
            }
        }
        
        public int ClientY {
            get {
                int ret = egueb_dom_event_mouse_client_y_get(raw);
                return ret;
            }
        }
        
        public Egueb.Dom.Node GetRelated() {
            System.IntPtr ret = egueb_dom_event_mouse_related_get(raw);
            return new Egueb.Dom.Node(ret, false);
        }
        
        public void GetScreenCoords(out int x, out int y) {
            egueb_dom_event_mouse_screen_coords_get(raw, out  x, out  y);
        }
        
        public int GetButton() {
            int ret = egueb_dom_event_mouse_button_get(raw);
            return ret;
        }
        
        public void GetClientCoords(out int x, out int y) {
            egueb_dom_event_mouse_client_coords_get(raw, out  x, out  y);
        }
    }
    
    public class EventTargetListener {
    }
    
    public partial class Element : Egueb.Dom.Node {
        
[DllImport("egueb-dom.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern System.IntPtr egueb_dom_element_name_get(System.IntPtr selfRaw);
[DllImport("egueb-dom.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern System.IntPtr egueb_dom_element_tag_name_get(System.IntPtr selfRaw);
[DllImport("egueb-dom.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern System.Boolean egueb_dom_element_attribute_node_set(System.IntPtr selfRaw, System.IntPtr attrRaw, System.Int32 errRaw);
[DllImport("egueb-dom.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern System.IntPtr egueb_dom_element_attribute_ns_get(System.IntPtr selfRaw, System.IntPtr ns_uriRaw, System.IntPtr nameRaw);
[DllImport("egueb-dom.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern System.IntPtr egueb_dom_element_attribute_get(System.IntPtr selfRaw, System.IntPtr nameRaw);
[DllImport("egueb-dom.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern System.IntPtr egueb_dom_element_attribute_type_get(System.IntPtr selfRaw, System.IntPtr nameRaw, Egueb.Dom.AttrType type);
[DllImport("egueb-dom.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern System.Boolean egueb_dom_element_attribute_ns_set(System.IntPtr selfRaw, System.IntPtr ns_uriRaw, System.IntPtr local_nameRaw, System.IntPtr valueRaw, System.Int32 errRaw);
[DllImport("egueb-dom.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern System.Boolean egueb_dom_element_attribute_set(System.IntPtr selfRaw, System.IntPtr nameRaw, System.IntPtr valueRaw, System.Int32 errRaw);
[DllImport("egueb-dom.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern System.Boolean egueb_dom_element_attribute_type_set(System.IntPtr selfRaw, System.IntPtr nameRaw, Egueb.Dom.AttrType type, System.IntPtr valueRaw, System.Int32 errRaw);
[DllImport("egueb-dom.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern System.Boolean egueb_dom_element_attribute_masked_set_va(System.IntPtr selfRaw, System.IntPtr nameRaw, System.Int32 prop_mask, IntPtr args);
[DllImport("egueb-dom.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern System.Boolean egueb_dom_element_attribute_masked_get_va(System.IntPtr selfRaw, System.IntPtr nameRaw, System.Int32 prop_mask, IntPtr args);
[DllImport("egueb-dom.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern System.Boolean egueb_dom_element_attribute_value_set(System.IntPtr selfRaw, System.IntPtr nameRaw, Egueb.Dom.AttrType type, IntPtr v, System.Int32 errRaw);
[DllImport("egueb-dom.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern System.Boolean egueb_dom_element_attribute_value_get(System.IntPtr selfRaw, System.IntPtr nameRaw, Egueb.Dom.AttrType type, IntPtr v, System.Int32 errRaw);
[DllImport("egueb-dom.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern System.IntPtr egueb_dom_element_attribute_node_ns_get(System.IntPtr selfRaw, System.IntPtr ns_uriRaw, System.IntPtr nameRaw, System.Int32 errRaw);
[DllImport("egueb-dom.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern System.IntPtr egueb_dom_element_attribute_node_get(System.IntPtr selfRaw, System.IntPtr nameRaw);
[DllImport("egueb-dom.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern System.Boolean egueb_dom_element_is_enqueued(System.IntPtr selfRaw);
[DllImport("egueb-dom.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void egueb_dom_element_dequeue(System.IntPtr selfRaw);
[DllImport("egueb-dom.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void egueb_dom_element_enqueue(System.IntPtr selfRaw);
[DllImport("egueb-dom.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void egueb_dom_element_request_process(System.IntPtr selfRaw);
[DllImport("egueb-dom.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern System.Boolean egueb_dom_element_process(System.IntPtr selfRaw);
[DllImport("egueb-dom.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern System.IntPtr egueb_dom_element_child_first_get(System.IntPtr selfRaw);
[DllImport("egueb-dom.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern System.IntPtr egueb_dom_element_child_last_get(System.IntPtr selfRaw);
[DllImport("egueb-dom.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern System.IntPtr egueb_dom_element_sibling_previous_get(System.IntPtr selfRaw);
[DllImport("egueb-dom.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern System.IntPtr egueb_dom_element_sibling_next_get(System.IntPtr selfRaw);
[DllImport("egueb-dom.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern IntPtr egueb_dom_element_descriptor_get();
        
        protected Element() {
        }
        
        public Element(System.IntPtr i, bool owned) : 
                base(i, owned) {
            Initialize(i, owned);
        }
        
        public Egueb.Dom.String GetName() {
            System.IntPtr ret = egueb_dom_element_name_get(raw);
            return new Egueb.Dom.String(ret, false);
        }
        
        public Egueb.Dom.String GetTagName() {
            System.IntPtr ret = egueb_dom_element_tag_name_get(raw);
            return new Egueb.Dom.String(ret, false);
        }
        
        public bool SetAttributeNode(Egueb.Dom.Node attr, Eina.Error err) {
            System.IntPtr attrRaw;
            if ((attr == null)) {
                attrRaw = IntPtr.Zero;
            }
            else {
                attrRaw = attr.Raw;
            }
            int errRaw;
            errRaw = err;
            bool ret = egueb_dom_element_attribute_node_set(raw, attrRaw, errRaw);
            return ret;
        }
        
        public Egueb.Dom.String GetAttributeNs(Egueb.Dom.String ns_uri, Egueb.Dom.String name) {
            System.IntPtr ns_uriRaw;
            if ((ns_uri == null)) {
                ns_uriRaw = IntPtr.Zero;
            }
            else {
                ns_uriRaw = ns_uri.Raw;
            }
            System.IntPtr nameRaw;
            if ((name == null)) {
                nameRaw = IntPtr.Zero;
            }
            else {
                nameRaw = name.Raw;
            }
            System.IntPtr ret = egueb_dom_element_attribute_ns_get(raw, ns_uriRaw, nameRaw);
            return new Egueb.Dom.String(ret, false);
        }
        
        public Egueb.Dom.String GetAttribute(Egueb.Dom.String name) {
            System.IntPtr nameRaw;
            if ((name == null)) {
                nameRaw = IntPtr.Zero;
            }
            else {
                nameRaw = name.Raw;
            }
            System.IntPtr ret = egueb_dom_element_attribute_get(raw, nameRaw);
            return new Egueb.Dom.String(ret, false);
        }
        
        public Egueb.Dom.String GetAttributeType(Egueb.Dom.String name, Egueb.Dom.AttrType type) {
            System.IntPtr nameRaw;
            if ((name == null)) {
                nameRaw = IntPtr.Zero;
            }
            else {
                nameRaw = name.Raw;
            }
            System.IntPtr ret = egueb_dom_element_attribute_type_get(raw, nameRaw, type);
            return new Egueb.Dom.String(ret, false);
        }
        
        public bool SetAttributeNs(Egueb.Dom.String ns_uri, Egueb.Dom.String local_name, Egueb.Dom.String value, Eina.Error err) {
            System.IntPtr ns_uriRaw;
            if ((ns_uri == null)) {
                ns_uriRaw = IntPtr.Zero;
            }
            else {
                ns_uriRaw = ns_uri.Raw;
            }
            System.IntPtr local_nameRaw;
            if ((local_name == null)) {
                local_nameRaw = IntPtr.Zero;
            }
            else {
                local_nameRaw = local_name.Raw;
            }
            System.IntPtr valueRaw;
            if ((value == null)) {
                valueRaw = IntPtr.Zero;
            }
            else {
                valueRaw = value.Raw;
            }
            int errRaw;
            errRaw = err;
            bool ret = egueb_dom_element_attribute_ns_set(raw, ns_uriRaw, local_nameRaw, valueRaw, errRaw);
            return ret;
        }
        
        public bool SetAttribute(Egueb.Dom.String name, Egueb.Dom.String value, Eina.Error err) {
            System.IntPtr nameRaw;
            if ((name == null)) {
                nameRaw = IntPtr.Zero;
            }
            else {
                nameRaw = name.Raw;
            }
            System.IntPtr valueRaw;
            if ((value == null)) {
                valueRaw = IntPtr.Zero;
            }
            else {
                valueRaw = value.Raw;
            }
            int errRaw;
            errRaw = err;
            bool ret = egueb_dom_element_attribute_set(raw, nameRaw, valueRaw, errRaw);
            return ret;
        }
        
        public bool SetAttributeType(Egueb.Dom.String name, Egueb.Dom.AttrType type, Egueb.Dom.String value, Eina.Error err) {
            System.IntPtr nameRaw;
            if ((name == null)) {
                nameRaw = IntPtr.Zero;
            }
            else {
                nameRaw = name.Raw;
            }
            System.IntPtr valueRaw;
            if ((value == null)) {
                valueRaw = IntPtr.Zero;
            }
            else {
                valueRaw = value.Raw;
            }
            int errRaw;
            errRaw = err;
            bool ret = egueb_dom_element_attribute_type_set(raw, nameRaw, type, valueRaw, errRaw);
            return ret;
        }
        
        public bool SetAttributeMasked(Egueb.Dom.String name, int prop_mask, System.IntPtr args) {
            System.IntPtr nameRaw;
            if ((name == null)) {
                nameRaw = IntPtr.Zero;
            }
            else {
                nameRaw = name.Raw;
            }
            bool ret = egueb_dom_element_attribute_masked_set_va(raw, nameRaw, prop_mask, args);
            return ret;
        }
        
        public bool GetAttributeMasked(Egueb.Dom.String name, int prop_mask, System.IntPtr args) {
            System.IntPtr nameRaw;
            if ((name == null)) {
                nameRaw = IntPtr.Zero;
            }
            else {
                nameRaw = name.Raw;
            }
            bool ret = egueb_dom_element_attribute_masked_get_va(raw, nameRaw, prop_mask, args);
            return ret;
        }
        
        public bool SetAttributeValue(Egueb.Dom.String name, Egueb.Dom.AttrType type, System.IntPtr v, Eina.Error err) {
            System.IntPtr nameRaw;
            if ((name == null)) {
                nameRaw = IntPtr.Zero;
            }
            else {
                nameRaw = name.Raw;
            }
            int errRaw;
            errRaw = err;
            bool ret = egueb_dom_element_attribute_value_set(raw, nameRaw, type, v, errRaw);
            return ret;
        }
        
        public bool GetAttributeValue(Egueb.Dom.String name, Egueb.Dom.AttrType type, System.IntPtr v, Eina.Error err) {
            System.IntPtr nameRaw;
            if ((name == null)) {
                nameRaw = IntPtr.Zero;
            }
            else {
                nameRaw = name.Raw;
            }
            int errRaw;
            errRaw = err;
            bool ret = egueb_dom_element_attribute_value_get(raw, nameRaw, type, v, errRaw);
            return ret;
        }
        
        public Egueb.Dom.Node GetAttributeNodeNs(Egueb.Dom.String ns_uri, Egueb.Dom.String name, Eina.Error err) {
            System.IntPtr ns_uriRaw;
            if ((ns_uri == null)) {
                ns_uriRaw = IntPtr.Zero;
            }
            else {
                ns_uriRaw = ns_uri.Raw;
            }
            System.IntPtr nameRaw;
            if ((name == null)) {
                nameRaw = IntPtr.Zero;
            }
            else {
                nameRaw = name.Raw;
            }
            int errRaw;
            errRaw = err;
            System.IntPtr ret = egueb_dom_element_attribute_node_ns_get(raw, ns_uriRaw, nameRaw, errRaw);
            return new Egueb.Dom.Node(ret, false);
        }
        
        public Egueb.Dom.Node GetAttributeNode(Egueb.Dom.String name) {
            System.IntPtr nameRaw;
            if ((name == null)) {
                nameRaw = IntPtr.Zero;
            }
            else {
                nameRaw = name.Raw;
            }
            System.IntPtr ret = egueb_dom_element_attribute_node_get(raw, nameRaw);
            return new Egueb.Dom.Node(ret, false);
        }
        
        public bool IsEnqueued() {
            bool ret = egueb_dom_element_is_enqueued(raw);
            return ret;
        }
        
        public void Dequeue() {
            egueb_dom_element_dequeue(raw);
        }
        
        public void Enqueue() {
            egueb_dom_element_enqueue(raw);
        }
        
        public void RequestProcess() {
            egueb_dom_element_request_process(raw);
        }
        
        public bool Process() {
            bool ret = egueb_dom_element_process(raw);
            return ret;
        }
        
        public Egueb.Dom.Node GetChildFirst() {
            System.IntPtr ret = egueb_dom_element_child_first_get(raw);
            return new Egueb.Dom.Node(ret, false);
        }
        
        public Egueb.Dom.Node GetChildLast() {
            System.IntPtr ret = egueb_dom_element_child_last_get(raw);
            return new Egueb.Dom.Node(ret, false);
        }
        
        public Egueb.Dom.Node GetSiblingPrevious() {
            System.IntPtr ret = egueb_dom_element_sibling_previous_get(raw);
            return new Egueb.Dom.Node(ret, false);
        }
        
        public Egueb.Dom.Node GetSiblingNext() {
            System.IntPtr ret = egueb_dom_element_sibling_next_get(raw);
            return new Egueb.Dom.Node(ret, false);
        }
        
        public static System.IntPtr GetDescriptor() {
            IntPtr ret = egueb_dom_element_descriptor_get();
        }
    }
    
    public class EventUi : Egueb.Dom.Event {
        
[DllImport("egueb-dom.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern System.Int32 egueb_dom_event_ui_detail_get(System.IntPtr selfRaw);
[DllImport("egueb-dom.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void egueb_dom_event_ui_init(System.IntPtr selfRaw, System.IntPtr typeRaw, System.Boolean bubbleable, System.Boolean cancelable, IntPtr view, System.Int32 detail);
[DllImport("egueb-dom.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern IntPtr egueb_dom_event_ui_view_get(System.IntPtr selfRaw);
        
        protected EventUi() {
        }
        
        public EventUi(System.IntPtr i, bool owned) : 
                base(i, owned) {
            Initialize(i, owned);
        }
        
        public int GetDetail() {
            int ret = egueb_dom_event_ui_detail_get(raw);
            return ret;
        }
        
        public void Init(Egueb.Dom.String type, bool bubbleable, bool cancelable, System.IntPtr view, int detail) {
            System.IntPtr typeRaw;
            if ((type == null)) {
                typeRaw = IntPtr.Zero;
            }
            else {
                typeRaw = type.Raw;
            }
            egueb_dom_event_ui_init(raw, typeRaw, bubbleable, cancelable, view, detail);
        }
        
        public System.IntPtr GetView() {
            IntPtr ret = egueb_dom_event_ui_view_get(raw);
        }
    }
    
    public class Document : Egueb.Dom.Node {
        
[DllImport("egueb-dom.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern IntPtr egueb_dom_document_descriptor_get();
[DllImport("egueb-dom.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern System.IntPtr egueb_dom_document_element_ns_create(System.IntPtr selfRaw, System.IntPtr ns_uriRaw, System.IntPtr qnameRaw, System.Int32 errRaw);
[DllImport("egueb-dom.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern System.IntPtr egueb_dom_document_element_create(System.IntPtr selfRaw, System.IntPtr nameRaw, System.Int32 errRaw);
[DllImport("egueb-dom.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern System.IntPtr egueb_dom_document_uri_get(System.IntPtr selfRaw);
[DllImport("egueb-dom.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void egueb_dom_document_uri_set(System.IntPtr selfRaw, System.IntPtr uriRaw);
[DllImport("egueb-dom.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern System.IntPtr egueb_dom_document_document_fragment_create(System.IntPtr selfRaw);
[DllImport("egueb-dom.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void egueb_dom_document_element_set(System.IntPtr selfRaw, System.IntPtr elementRaw);
[DllImport("egueb-dom.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern System.IntPtr egueb_dom_document_element_get_by_id(System.IntPtr selfRaw, System.IntPtr idRaw, out System.Int32 errRaw);
[DllImport("egueb-dom.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern System.IntPtr egueb_dom_document_element_get_by_iri(System.IntPtr selfRaw, System.IntPtr iriRaw, System.Int32 errRaw);
[DllImport("egueb-dom.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern System.IntPtr egueb_dom_document_node_adopt(System.IntPtr selfRaw, System.IntPtr adoptedRaw, System.Int32 errRaw);
[DllImport("egueb-dom.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void egueb_dom_document_process(System.IntPtr selfRaw);
[DllImport("egueb-dom.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern System.Boolean egueb_dom_document_is_processing(System.IntPtr selfRaw);
[DllImport("egueb-dom.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern System.Boolean egueb_dom_document_needs_process(System.IntPtr selfRaw);
[DllImport("egueb-dom.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void egueb_dom_document_process_queue_clear(System.IntPtr selfRaw);
[DllImport("egueb-dom.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern System.IntPtr egueb_dom_document_document_element_get(System.IntPtr selfRaw);
        
        protected Document() {
        }
        
        public Document(System.IntPtr i, bool owned) : 
                base(i, owned) {
            Initialize(i, owned);
        }
        
        public Egueb.Dom.Element DocumentElement {
            get {
                System.IntPtr ret = egueb_dom_document_document_element_get(raw);
                return new Egueb.Dom.Element(ret, false);
            }
        }
        
        public static System.IntPtr GetDescriptor() {
            IntPtr ret = egueb_dom_document_descriptor_get();
        }
        
        public Egueb.Dom.Node CreateElementNs(Egueb.Dom.String ns_uri, Egueb.Dom.String qname, Eina.Error err) {
            System.IntPtr ns_uriRaw;
            if ((ns_uri == null)) {
                ns_uriRaw = IntPtr.Zero;
            }
            else {
                ns_uriRaw = ns_uri.Raw;
            }
            System.IntPtr qnameRaw;
            if ((qname == null)) {
                qnameRaw = IntPtr.Zero;
            }
            else {
                qnameRaw = qname.Raw;
            }
            int errRaw;
            errRaw = err;
            System.IntPtr ret = egueb_dom_document_element_ns_create(raw, ns_uriRaw, qnameRaw, errRaw);
            return new Egueb.Dom.Node(ret, false);
        }
        
        public Egueb.Dom.Node CreateElement(Egueb.Dom.String name, Eina.Error err) {
            System.IntPtr nameRaw;
            if ((name == null)) {
                nameRaw = IntPtr.Zero;
            }
            else {
                nameRaw = name.Raw;
            }
            int errRaw;
            errRaw = err;
            System.IntPtr ret = egueb_dom_document_element_create(raw, nameRaw, errRaw);
            return new Egueb.Dom.Node(ret, false);
        }
        
        public Egueb.Dom.String GetUri() {
            System.IntPtr ret = egueb_dom_document_uri_get(raw);
            return new Egueb.Dom.String(ret, false);
        }
        
        public void SetUri(Egueb.Dom.String uri) {
            System.IntPtr uriRaw;
            if ((uri == null)) {
                uriRaw = IntPtr.Zero;
            }
            else {
                uriRaw = uri.Raw;
            }
            egueb_dom_document_uri_set(raw, uriRaw);
        }
        
        public Egueb.Dom.Node CreateDocumentFragment() {
            System.IntPtr ret = egueb_dom_document_document_fragment_create(raw);
            return new Egueb.Dom.Node(ret, false);
        }
        
        public void SetElement(Egueb.Dom.Node element) {
            System.IntPtr elementRaw;
            if ((element == null)) {
                elementRaw = IntPtr.Zero;
            }
            else {
                elementRaw = element.Raw;
            }
            egueb_dom_document_element_set(raw, elementRaw);
        }
        
        public Egueb.Dom.Element GetElement(Egueb.Dom.String id, out Eina.Error err) {
            System.IntPtr idRaw;
            if ((id == null)) {
                idRaw = IntPtr.Zero;
            }
            else {
                idRaw = id.Raw;
            }
            int errRaw;
            System.IntPtr ret = egueb_dom_document_element_get_by_id(raw, idRaw, out  errRaw);
            err = errRaw;
            return new Egueb.Dom.Element(ret, false);
        }
        
        public Egueb.Dom.Node GetElement(Egueb.Dom.String iri, Eina.Error err) {
            System.IntPtr iriRaw;
            if ((iri == null)) {
                iriRaw = IntPtr.Zero;
            }
            else {
                iriRaw = iri.Raw;
            }
            int errRaw;
            errRaw = err;
            System.IntPtr ret = egueb_dom_document_element_get_by_iri(raw, iriRaw, errRaw);
            return new Egueb.Dom.Node(ret, false);
        }
        
        public Egueb.Dom.Node NodeAdopt(Egueb.Dom.Node adopted, Eina.Error err) {
            System.IntPtr adoptedRaw;
            if ((adopted == null)) {
                adoptedRaw = IntPtr.Zero;
            }
            else {
                adoptedRaw = adopted.Raw;
            }
            int errRaw;
            errRaw = err;
            System.IntPtr ret = egueb_dom_document_node_adopt(raw, adoptedRaw, errRaw);
            return new Egueb.Dom.Node(ret, false);
        }
        
        public void Process() {
            egueb_dom_document_process(raw);
        }
        
        public bool IsProcessing() {
            bool ret = egueb_dom_document_is_processing(raw);
            return ret;
        }
        
        public bool NeedsProcess() {
            bool ret = egueb_dom_document_needs_process(raw);
            return ret;
        }
        
        public void ProcessQueueClear() {
            egueb_dom_document_process_queue_clear(raw);
        }
    }
    
    public class EventFocus : Egueb.Dom.Event {
        
[DllImport("egueb-dom.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern System.IntPtr egueb_dom_event_focus_in_new();
[DllImport("egueb-dom.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern System.IntPtr egueb_dom_event_focus_out_new();
        
        public EventFocus(System.IntPtr i, bool owned) : 
                base(i, owned) {
            Initialize(i, owned);
        }
        
        public EventFocus() {
            System.IntPtr ret = egueb_dom_event_focus_in_new();
            Initialize(ret, false);
        }
        
        public EventFocus() {
            System.IntPtr ret = egueb_dom_event_focus_out_new();
            Initialize(ret, false);
        }
    }
    
    public class Scripter : IDisposable {
        
        protected IntPtr raw;
        
        private bool disposed;
        
[DllImport("egueb-dom.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern System.IntPtr egueb_dom_scripter_new(System.IntPtr dRaw);
[DllImport("egueb-dom.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern System.IntPtr egueb_dom_scripter_ref(System.IntPtr selfRaw);
[DllImport("egueb-dom.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void egueb_dom_scripter_unref(System.IntPtr selfRaw);
[DllImport("egueb-dom.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern System.IntPtr egueb_dom_scripter_data_get(System.IntPtr selfRaw);
[DllImport("egueb-dom.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern System.Boolean egueb_dom_scripter_load(System.IntPtr selfRaw, System.IntPtr sRaw);
[DllImport("egueb-dom.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void egueb_dom_scripter_global_add(System.IntPtr selfRaw, System.String name, System.IntPtr o, System.IntPtr iRaw);
[DllImport("egueb-dom.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void egueb_dom_scripter_global_clear(System.IntPtr selfRaw);
[DllImport("egueb-dom.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void egueb_dom_scripter_script_free(System.IntPtr selfRaw, System.IntPtr obj);
[DllImport("egueb-dom.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern System.Boolean egueb_dom_scripter_script_run(System.IntPtr selfRaw, System.IntPtr obj);
[DllImport("egueb-dom.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern System.Boolean egueb_dom_scripter_script_run_listener(System.IntPtr selfRaw, System.IntPtr obj, System.IntPtr eRaw);
~Scripter() { Dispose(false); }
        
        public Scripter(System.IntPtr i, bool owned) {
            Initialize(i, owned);
        }
        
        public Scripter(Egueb.Dom.ScripterDescriptor d) {
            System.IntPtr dRaw;
            if ((d == null)) {
                dRaw = IntPtr.Zero;
            }
            else {
                dRaw = d.Raw;
            }
            System.IntPtr ret = egueb_dom_scripter_new(dRaw);
            if ((dRaw != IntPtr.Zero)) {
                Marshal.FreeHGlobal(dRaw);
            }
            Initialize(ret, false);
        }
        
        public System.IntPtr Raw {
            get {
                return this.raw;
            }
        }
        
        public virtual void Dispose() {
            Dispose(false);
            GC.SuppressFinalize(this);
        }
        
        protected virtual void Dispose(bool disposing) {
            if (disposed) {
            }
            else {
                egueb_dom_scripter_unref(raw);
                raw = IntPtr.Zero;
                disposed = false;
            }
        }
        
        protected virtual void Initialize(System.IntPtr i, bool owned) {
            raw = i;
            if (owned) {
                egueb_dom_scripter_ref(i);
            }
        }
        
        public System.IntPtr GetData() {
            System.IntPtr ret = egueb_dom_scripter_data_get(raw);
            return ret;
        }
        
        public bool Load(Egueb.Dom.String s) {
            System.IntPtr sRaw;
            if ((s == null)) {
                sRaw = IntPtr.Zero;
            }
            else {
                sRaw = s.Raw;
            }
            bool ret = egueb_dom_scripter_load(raw, sRaw);
            return ret;
        }
        
        public void GlobalAdd(string name, System.IntPtr o, Ender.Item i) {
            System.IntPtr iRaw;
            if ((i == null)) {
                iRaw = IntPtr.Zero;
            }
            else {
                iRaw = i.Raw;
            }
            egueb_dom_scripter_global_add(raw, name, o, iRaw);
        }
        
        public void GlobalClear() {
            egueb_dom_scripter_global_clear(raw);
        }
        
        public void ScriptFree(System.IntPtr obj) {
            egueb_dom_scripter_script_free(raw, obj);
        }
        
        public bool ScriptRun(System.IntPtr obj) {
            bool ret = egueb_dom_scripter_script_run(raw, obj);
            return ret;
        }
        
        public bool ScriptRunListener(System.IntPtr obj, Egueb.Dom.Event e) {
            System.IntPtr eRaw;
            if ((e == null)) {
                eRaw = IntPtr.Zero;
            }
            else {
                eRaw = e.Raw;
            }
            bool ret = egueb_dom_scripter_script_run_listener(raw, obj, eRaw);
            return ret;
        }
    }
    
    public enum EventPhase {
        
        Capturing = 0,
        
        AtTarget = 1,
        
        Bubbling = 2,
        
        EguebDomEventPhases = 3,
    }
    
    public enum NodeType {
        
        Element = 1,
        
        Attribute = 2,
        
        Text = 3,
        
        CdataSection = 4,
        
        EntityReference = 5,
        
        Entity = 6,
        
        ProcessingInstruction = 7,
        
        Comment = 8,
        
        Document = 9,
        
        DocumentType = 10,
        
        DocumentFragment = 11,
        
        Notation = 12,
    }
    
    public class AttrFlag {
        
        public enum Enum {
            
            Stylable = 1,
            
            Animatable = 2,
            
            Inheritable = 4,
        }
    }
    
    public class ScripterDescriptor {
        
        public delegate System.IntPtr CreateCb();
        
        public delegate void ScriptDestroyCb();
        
        public delegate bool ScriptListenerCb();
        
        public delegate void DestroyCb(System.IntPtr prv);
        
        public delegate void GlobalClearCb(System.IntPtr prv);
        
        public delegate void GlobalAddCb(System.IntPtr prv, string name, System.IntPtr o, Ender.Item i);
        
        public delegate bool LoadCb(System.IntPtr prv, Egueb.Dom.String s, out System.IntPtr obj);
        
        public delegate System.IntPtr ScriptRunCb(System.IntPtr prv, System.IntPtr obj);
        
        private DescriptorStruct rawStruct;
        

internal delegate System.IntPtr CreateCbInternal();

internal delegate void ScriptDestroyCbInternal();

internal delegate System.Boolean ScriptListenerCbInternal();

internal delegate void DestroyCbInternal(System.IntPtr prv);

internal delegate void GlobalClearCbInternal(System.IntPtr prv);

internal delegate void GlobalAddCbInternal(System.IntPtr prv, System.String name, System.IntPtr o, System.IntPtr iRaw);

internal delegate System.Boolean LoadCbInternal(System.IntPtr prv, System.IntPtr sRaw, out System.IntPtr obj);

internal delegate System.IntPtr ScriptRunCbInternal(System.IntPtr prv, System.IntPtr obj);
        
        public ScripterDescriptor() {
        }
        
        public ScripterDescriptor(System.IntPtr i, bool owned) {
            rawStruct = ((DescriptorStruct)(Marshal.PtrToStructure(i, typeof(DescriptorStruct))));
        }
        
        public IntPtr Raw {
            get {
                System.IntPtr raw;
                raw = CreateRaw();
                Marshal.StructureToPtr(rawStruct, raw, false);
                return raw;
            }
            set {
                rawStruct = ((DescriptorStruct)(Marshal.PtrToStructure(value, typeof(DescriptorStruct))));
                DestroyRaw(value);
            }
        }
        
        public int Version {
            get {
                int ret;
                ret = this.rawStruct.version;
                return ret;
            }
            set {
                this.rawStruct.version = value;
            }
        }
        
        public Egueb.Dom.ScripterDescriptor.CreateCb Create {
            get {
                Egueb.Dom.ScripterDescriptor.CreateCb ret;

Egueb.Dom.ScripterDescriptor.CreateCbInternal retRaw = () => {
System.IntPtr retInternal = ret();
return retInternal;

};
                return retRaw;
            }
            set {

Egueb.Dom.ScripterDescriptor.CreateCbInternal valueRaw = () => {
System.IntPtr retInternal = value();
return retInternal;

};
            }
        }
        
        public Egueb.Dom.ScripterDescriptor.DestroyCb Destroy {
            get {
                Egueb.Dom.ScripterDescriptor.DestroyCb ret;

Egueb.Dom.ScripterDescriptor.DestroyCbInternal retRaw = (System.IntPtr prv) => {
ret(prv);

};
                return retRaw;
            }
            set {

Egueb.Dom.ScripterDescriptor.DestroyCbInternal valueRaw = (System.IntPtr prv) => {
value(prv);

};
            }
        }
        
        public Egueb.Dom.ScripterDescriptor.LoadCb Load {
            get {
                Egueb.Dom.ScripterDescriptor.LoadCb ret;

Egueb.Dom.ScripterDescriptor.LoadCbInternal retRaw = (System.IntPtr prv, System.IntPtr sRaw, out System.IntPtr obj) => {
Egueb.Dom.String s;
if ((sRaw == IntPtr.Zero)) {
    s = null;
}
else {
    s = new Egueb.Dom.String(sRaw, true);
}
bool retInternal = ret(prv, s, obj);
return retInternal;

};
                return retRaw;
            }
            set {

Egueb.Dom.ScripterDescriptor.LoadCbInternal valueRaw = (System.IntPtr prv, System.IntPtr sRaw, out System.IntPtr obj) => {
Egueb.Dom.String s;
if ((sRaw == IntPtr.Zero)) {
    s = null;
}
else {
    s = new Egueb.Dom.String(sRaw, true);
}
bool retInternal = value(prv, s, obj);
return retInternal;

};
            }
        }
        
        public Egueb.Dom.ScripterDescriptor.GlobalAddCb GlobalAdd {
            get {
                Egueb.Dom.ScripterDescriptor.GlobalAddCb ret;

Egueb.Dom.ScripterDescriptor.GlobalAddCbInternal retRaw = (System.IntPtr prv, System.String name, System.IntPtr o, System.IntPtr iRaw) => {
Ender.Item i;
if ((iRaw == IntPtr.Zero)) {
    i = null;
}
else {
    i = new Ender.Item(iRaw, true);
}
ret(prv, name, o, i);

};
                return retRaw;
            }
            set {

Egueb.Dom.ScripterDescriptor.GlobalAddCbInternal valueRaw = (System.IntPtr prv, System.String name, System.IntPtr o, System.IntPtr iRaw) => {
Ender.Item i;
if ((iRaw == IntPtr.Zero)) {
    i = null;
}
else {
    i = new Ender.Item(iRaw, true);
}
value(prv, name, o, i);

};
            }
        }
        
        public Egueb.Dom.ScripterDescriptor.GlobalClearCb GlobalClear {
            get {
                Egueb.Dom.ScripterDescriptor.GlobalClearCb ret;

Egueb.Dom.ScripterDescriptor.GlobalClearCbInternal retRaw = (System.IntPtr prv) => {
ret(prv);

};
                return retRaw;
            }
            set {

Egueb.Dom.ScripterDescriptor.GlobalClearCbInternal valueRaw = (System.IntPtr prv) => {
value(prv);

};
            }
        }
        
        public Egueb.Dom.ScripterDescriptor.ScriptDestroyCb ScriptDestroy {
            get {
                Egueb.Dom.ScripterDescriptor.ScriptDestroyCb ret;

Egueb.Dom.ScripterDescriptor.ScriptDestroyCbInternal retRaw = () => {
ret();

};
                return retRaw;
            }
            set {

Egueb.Dom.ScripterDescriptor.ScriptDestroyCbInternal valueRaw = () => {
value();

};
            }
        }
        
        public Egueb.Dom.ScripterDescriptor.ScriptRunCb ScriptRun {
            get {
                Egueb.Dom.ScripterDescriptor.ScriptRunCb ret;

Egueb.Dom.ScripterDescriptor.ScriptRunCbInternal retRaw = (System.IntPtr prv, System.IntPtr obj) => {
System.IntPtr retInternal = ret(prv, obj);
return retInternal;

};
                return retRaw;
            }
            set {

Egueb.Dom.ScripterDescriptor.ScriptRunCbInternal valueRaw = (System.IntPtr prv, System.IntPtr obj) => {
System.IntPtr retInternal = value(prv, obj);
return retInternal;

};
            }
        }
        
        public Egueb.Dom.ScripterDescriptor.ScriptListenerCb ScriptRunListener {
            get {
                Egueb.Dom.ScripterDescriptor.ScriptListenerCb ret;

Egueb.Dom.ScripterDescriptor.ScriptListenerCbInternal retRaw = () => {
bool retInternal = ret();
return retInternal;

};
                return retRaw;
            }
            set {

Egueb.Dom.ScripterDescriptor.ScriptListenerCbInternal valueRaw = () => {
bool retInternal = value();
return retInternal;

};
            }
        }
        
        public static System.IntPtr CreateRaw() {
            System.IntPtr raw;
            raw = Marshal.AllocHGlobal(Marshal.SizeOf(typeof(DescriptorStruct)));
            return raw;
        }
        
        public static void DestroyRaw(System.IntPtr raw) {
            Marshal.FreeHGlobal(raw);
        }
        
        [StructLayout(System.Runtime.InteropServices.LayoutKind.Sequential)]
        public struct DescriptorStruct {
            
            public int version;
            
            private Egueb.Dom.ScripterDescriptor.CreateCbInternal createRaw;
            
            private Egueb.Dom.ScripterDescriptor.DestroyCbInternal destroyRaw;
            
            private Egueb.Dom.ScripterDescriptor.LoadCbInternal loadRaw;
            
            private Egueb.Dom.ScripterDescriptor.GlobalAddCbInternal global_addRaw;
            
            private Egueb.Dom.ScripterDescriptor.GlobalClearCbInternal global_clearRaw;
            
            private Egueb.Dom.ScripterDescriptor.ScriptDestroyCbInternal script_destroyRaw;
            
            private Egueb.Dom.ScripterDescriptor.ScriptRunCbInternal script_runRaw;
            
            private Egueb.Dom.ScripterDescriptor.ScriptListenerCbInternal script_run_listenerRaw;
        }
    }
    
    public class Main {
        
[DllImport("egueb-dom.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void egueb_dom_init();
[DllImport("egueb-dom.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void egueb_dom_shutdown();
        
        public static void Init() {
            egueb_dom_init();
        }
        
        public static void Shutdown() {
            egueb_dom_shutdown();
        }
    }
}
namespace Egueb.Dom.Character {
    
    
    public class Data : Egueb.Dom.Node {
        
[DllImport("egueb-dom.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern System.IntPtr egueb_dom_character_data_buffer_get(System.IntPtr selfRaw);
[DllImport("egueb-dom.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void egueb_dom_character_data_buffer_set(System.IntPtr selfRaw, System.IntPtr bufferRaw);
[DllImport("egueb-dom.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern System.IntPtr egueb_dom_character_data_data_get(System.IntPtr selfRaw);
[DllImport("egueb-dom.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern System.Int32 egueb_dom_character_data_length_get(System.IntPtr selfRaw);
[DllImport("egueb-dom.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern System.Boolean egueb_dom_character_data_data_append(System.IntPtr selfRaw, System.IntPtr dataRaw, System.Int32 errRaw);
[DllImport("egueb-dom.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern System.Boolean egueb_dom_character_data_data_delete(System.IntPtr selfRaw, System.Int32 offset, System.Int32 count, System.Int32 errRaw);
        
        protected Data() {
        }
        
        public Data(System.IntPtr i, bool owned) : 
                base(i, owned) {
            Initialize(i, owned);
        }
        
        public Enesim.Text.Buffer GetBuffer() {
            System.IntPtr ret = egueb_dom_character_data_buffer_get(raw);
            return Enesim.Text.Buffer.Downcast(ret, false);
        }
        
        public void SetBuffer(Enesim.Text.Buffer buffer) {
            System.IntPtr bufferRaw;
            if ((buffer == null)) {
                bufferRaw = IntPtr.Zero;
            }
            else {
                bufferRaw = buffer.Raw;
            }
            egueb_dom_character_data_buffer_set(raw, bufferRaw);
        }
        
        public Egueb.Dom.String GetData() {
            System.IntPtr ret = egueb_dom_character_data_data_get(raw);
            return new Egueb.Dom.String(ret, false);
        }
        
        public int GetLength() {
            int ret = egueb_dom_character_data_length_get(raw);
            return ret;
        }
        
        public bool AppendData(Egueb.Dom.String data, Eina.Error err) {
            System.IntPtr dataRaw;
            if ((data == null)) {
                dataRaw = IntPtr.Zero;
            }
            else {
                dataRaw = data.Raw;
            }
            int errRaw;
            errRaw = err;
            bool ret = egueb_dom_character_data_data_append(raw, dataRaw, errRaw);
            return ret;
        }
        
        public bool DataDelete(int offset, int count, Eina.Error err) {
            int errRaw;
            errRaw = err;
            bool ret = egueb_dom_character_data_data_delete(raw, offset, count, errRaw);
            return ret;
        }
    }
}
namespace Egueb.Dom.Cdata {
    
    
    public class Section : Egueb.Dom.Character.Data {
        
[DllImport("egueb-dom.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern System.IntPtr egueb_dom_cdata_section_new();
        
        public Section(System.IntPtr i, bool owned) : 
                base(i, owned) {
            Initialize(i, owned);
        }
        
        public Section() {
            System.IntPtr ret = egueb_dom_cdata_section_new();
            Initialize(ret, false);
        }
    }
}
namespace Egueb.Dom.Key {
    
    
    public enum Location {
        
        Standard = 0,
        
        Left = 1,
        
        Right = 2,
        
        Numpad = 3,
    }
}
