// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.17020
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

using Egueb.Dom;
using Eina;
using Ender;
using Enesim;
using System;
using System.Reflection;
using System.Runtime.InteropServices;


namespace Egueb.Svg {
    
    
    public class Element : Egueb.Dom.Element {
        
[DllImport("egueb-svg.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern System.Boolean egueb_svg_element_egueb_svg_is_element(System.IntPtr nRaw);
[DllImport("egueb-svg.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void egueb_svg_element_id_set(System.IntPtr nRaw, System.IntPtr vRaw);
[DllImport("egueb-svg.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern System.IntPtr egueb_svg_element_id_get(System.IntPtr nRaw);
[DllImport("egueb-svg.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void egueb_svg_element_clip_path_set(System.IntPtr nRaw, IntPtr v);
[DllImport("egueb-svg.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void egueb_svg_element_clip_path_get(System.IntPtr nRaw, IntPtr v);
[DllImport("egueb-svg.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void egueb_svg_element_opacity_set(System.IntPtr nRaw, System.Double vRaw);
[DllImport("egueb-svg.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void egueb_svg_element_opacity_get(System.IntPtr nRaw, System.IntPtr vRaw);
[DllImport("egueb-svg.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void egueb_svg_element_overflow_set(System.IntPtr nRaw, IntPtr v);
[DllImport("egueb-svg.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void egueb_svg_element_overflow_get(System.IntPtr nRaw, IntPtr v);
[DllImport("egueb-svg.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void egueb_svg_element_pointer_events_set(System.IntPtr nRaw, IntPtr v);
[DllImport("egueb-svg.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void egueb_svg_element_pointer_events_get(System.IntPtr nRaw, System.IntPtr vRaw);
[DllImport("egueb-svg.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void egueb_svg_element_color_set(System.IntPtr nRaw, System.IntPtr vRaw);
[DllImport("egueb-svg.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void egueb_svg_element_color_get(System.IntPtr nRaw, System.IntPtr vRaw);
[DllImport("egueb-svg.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void egueb_svg_element_fill_set(System.IntPtr nRaw, System.IntPtr vRaw);
[DllImport("egueb-svg.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void egueb_svg_element_fill_get(System.IntPtr nRaw, System.IntPtr vRaw);
[DllImport("egueb-svg.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void egueb_svg_element_fill_opacity_set(System.IntPtr nRaw, System.Double vRaw);
[DllImport("egueb-svg.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void egueb_svg_element_fill_opacity_get(System.IntPtr nRaw, System.IntPtr vRaw);
[DllImport("egueb-svg.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void egueb_svg_element_font_size_set(System.IntPtr nRaw, IntPtr v);
[DllImport("egueb-svg.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void egueb_svg_element_stroke_set(System.IntPtr nRaw, System.IntPtr vRaw);
[DllImport("egueb-svg.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void egueb_svg_element_stroke_get(System.IntPtr nRaw, System.IntPtr vRaw);
[DllImport("egueb-svg.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void egueb_svg_element_stroke_width_set(System.IntPtr nRaw, System.IntPtr stroke_widthRaw);
[DllImport("egueb-svg.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void egueb_svg_element_stroke_width_get(System.IntPtr nRaw, System.IntPtr vRaw);
[DllImport("egueb-svg.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void egueb_svg_element_stroke_opacity_set(System.IntPtr nRaw, System.Double vRaw);
[DllImport("egueb-svg.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void egueb_svg_element_stroke_opacity_get(System.IntPtr nRaw, System.IntPtr vRaw);
        
        protected Element() {
        }
        
        public Element(System.IntPtr i, bool owned) : 
                base(i, owned) {
            Initialize(i, owned);
        }
        
        public static bool EguebSvgIsElement(Egueb.Dom.Node n) {
            System.IntPtr nRaw;
            if ((n == null)) {
                nRaw = IntPtr.Zero;
            }
            else {
                nRaw = n.Raw;
            }
            bool ret = egueb_svg_element_egueb_svg_is_element(nRaw);
            return ret;
        }
        
        public static void SetId(Egueb.Dom.Node n, Egueb.Dom.String v) {
            System.IntPtr nRaw;
            if ((n == null)) {
                nRaw = IntPtr.Zero;
            }
            else {
                nRaw = n.Raw;
            }
            System.IntPtr vRaw;
            if ((v == null)) {
                vRaw = IntPtr.Zero;
            }
            else {
                vRaw = v.Raw;
            }
            egueb_svg_element_id_set(nRaw, vRaw);
        }
        
        public static Egueb.Dom.String GetId(Egueb.Dom.Node n) {
            System.IntPtr nRaw;
            if ((n == null)) {
                nRaw = IntPtr.Zero;
            }
            else {
                nRaw = n.Raw;
            }
            System.IntPtr ret = egueb_svg_element_id_get(nRaw);
            return new Egueb.Dom.String(ret, false);
        }
        
        public static void SetClipPath(Egueb.Dom.Node n, System.IntPtr v) {
            System.IntPtr nRaw;
            if ((n == null)) {
                nRaw = IntPtr.Zero;
            }
            else {
                nRaw = n.Raw;
            }
            egueb_svg_element_clip_path_set(nRaw, v);
        }
        
        public static void GetClipPath(Egueb.Dom.Node n, System.IntPtr v) {
            System.IntPtr nRaw;
            if ((n == null)) {
                nRaw = IntPtr.Zero;
            }
            else {
                nRaw = n.Raw;
            }
            egueb_svg_element_clip_path_get(nRaw, v);
        }
        
        public static void SetOpacity(Egueb.Dom.Node n, Egueb.Svg.Number v) {
            System.IntPtr nRaw;
            if ((n == null)) {
                nRaw = IntPtr.Zero;
            }
            else {
                nRaw = n.Raw;
            }
            double vRaw;
            vRaw = v;
            egueb_svg_element_opacity_set(nRaw, vRaw);
        }
        
        public static void GetOpacity(Egueb.Dom.Node n, Egueb.Svg.NumberAnimated v) {
            System.IntPtr nRaw;
            if ((n == null)) {
                nRaw = IntPtr.Zero;
            }
            else {
                nRaw = n.Raw;
            }
            System.IntPtr vRaw;
            if ((v == null)) {
                vRaw = IntPtr.Zero;
            }
            else {
                vRaw = v.Raw;
            }
            egueb_svg_element_opacity_get(nRaw, vRaw);
            if ((vRaw != IntPtr.Zero)) {
                Marshal.FreeHGlobal(vRaw);
            }
        }
        
        public static void SetOverflow(Egueb.Dom.Node n, System.IntPtr v) {
            System.IntPtr nRaw;
            if ((n == null)) {
                nRaw = IntPtr.Zero;
            }
            else {
                nRaw = n.Raw;
            }
            egueb_svg_element_overflow_set(nRaw, v);
        }
        
        public static void GetOverflow(Egueb.Dom.Node n, System.IntPtr v) {
            System.IntPtr nRaw;
            if ((n == null)) {
                nRaw = IntPtr.Zero;
            }
            else {
                nRaw = n.Raw;
            }
            egueb_svg_element_overflow_get(nRaw, v);
        }
        
        public static void SetPointerEvents(Egueb.Dom.Node n, System.IntPtr v) {
            System.IntPtr nRaw;
            if ((n == null)) {
                nRaw = IntPtr.Zero;
            }
            else {
                nRaw = n.Raw;
            }
            egueb_svg_element_pointer_events_set(nRaw, v);
        }
        
        public static void GetPointerEvents(Egueb.Dom.Node n, Egueb.Svg.Enum.Animated v) {
            System.IntPtr nRaw;
            if ((n == null)) {
                nRaw = IntPtr.Zero;
            }
            else {
                nRaw = n.Raw;
            }
            System.IntPtr vRaw;
            if ((v == null)) {
                vRaw = IntPtr.Zero;
            }
            else {
                vRaw = v.Raw;
            }
            egueb_svg_element_pointer_events_get(nRaw, vRaw);
            if ((vRaw != IntPtr.Zero)) {
                Marshal.FreeHGlobal(vRaw);
            }
        }
        
        public static void SetColor(Egueb.Dom.Node n, Egueb.Svg.Color v) {
            System.IntPtr nRaw;
            if ((n == null)) {
                nRaw = IntPtr.Zero;
            }
            else {
                nRaw = n.Raw;
            }
            System.IntPtr vRaw;
            if ((v == null)) {
                vRaw = IntPtr.Zero;
            }
            else {
                vRaw = v.Raw;
            }
            egueb_svg_element_color_set(nRaw, vRaw);
            if ((vRaw != IntPtr.Zero)) {
                Marshal.FreeHGlobal(vRaw);
            }
        }
        
        public static void GetColor(Egueb.Dom.Node n, Egueb.Svg.ColorAnimated v) {
            System.IntPtr nRaw;
            if ((n == null)) {
                nRaw = IntPtr.Zero;
            }
            else {
                nRaw = n.Raw;
            }
            System.IntPtr vRaw;
            if ((v == null)) {
                vRaw = IntPtr.Zero;
            }
            else {
                vRaw = v.Raw;
            }
            egueb_svg_element_color_get(nRaw, vRaw);
            if ((vRaw != IntPtr.Zero)) {
                Marshal.FreeHGlobal(vRaw);
            }
        }
        
        public static void SetFill(Egueb.Dom.Node n, Egueb.Svg.Paint v) {
            System.IntPtr nRaw;
            if ((n == null)) {
                nRaw = IntPtr.Zero;
            }
            else {
                nRaw = n.Raw;
            }
            System.IntPtr vRaw;
            if ((v == null)) {
                vRaw = IntPtr.Zero;
            }
            else {
                vRaw = v.Raw;
            }
            egueb_svg_element_fill_set(nRaw, vRaw);
            if ((vRaw != IntPtr.Zero)) {
                Marshal.FreeHGlobal(vRaw);
            }
        }
        
        public static void GetFill(Egueb.Dom.Node n, Egueb.Svg.PaintAnimated v) {
            System.IntPtr nRaw;
            if ((n == null)) {
                nRaw = IntPtr.Zero;
            }
            else {
                nRaw = n.Raw;
            }
            System.IntPtr vRaw;
            if ((v == null)) {
                vRaw = IntPtr.Zero;
            }
            else {
                vRaw = v.Raw;
            }
            egueb_svg_element_fill_get(nRaw, vRaw);
            if ((vRaw != IntPtr.Zero)) {
                Marshal.FreeHGlobal(vRaw);
            }
        }
        
        public static void SetFillOpacity(Egueb.Dom.Node n, Egueb.Svg.Number v) {
            System.IntPtr nRaw;
            if ((n == null)) {
                nRaw = IntPtr.Zero;
            }
            else {
                nRaw = n.Raw;
            }
            double vRaw;
            vRaw = v;
            egueb_svg_element_fill_opacity_set(nRaw, vRaw);
        }
        
        public static void GetFillOpacity(Egueb.Dom.Node n, Egueb.Svg.NumberAnimated v) {
            System.IntPtr nRaw;
            if ((n == null)) {
                nRaw = IntPtr.Zero;
            }
            else {
                nRaw = n.Raw;
            }
            System.IntPtr vRaw;
            if ((v == null)) {
                vRaw = IntPtr.Zero;
            }
            else {
                vRaw = v.Raw;
            }
            egueb_svg_element_fill_opacity_get(nRaw, vRaw);
            if ((vRaw != IntPtr.Zero)) {
                Marshal.FreeHGlobal(vRaw);
            }
        }
        
        public static void SetFontSize(Egueb.Dom.Node n, System.IntPtr v) {
            System.IntPtr nRaw;
            if ((n == null)) {
                nRaw = IntPtr.Zero;
            }
            else {
                nRaw = n.Raw;
            }
            egueb_svg_element_font_size_set(nRaw, v);
        }
        
        public static void SetStroke(Egueb.Dom.Node n, Egueb.Svg.Paint v) {
            System.IntPtr nRaw;
            if ((n == null)) {
                nRaw = IntPtr.Zero;
            }
            else {
                nRaw = n.Raw;
            }
            System.IntPtr vRaw;
            if ((v == null)) {
                vRaw = IntPtr.Zero;
            }
            else {
                vRaw = v.Raw;
            }
            egueb_svg_element_stroke_set(nRaw, vRaw);
            if ((vRaw != IntPtr.Zero)) {
                Marshal.FreeHGlobal(vRaw);
            }
        }
        
        public static void GetStroke(Egueb.Dom.Node n, Egueb.Svg.PaintAnimated v) {
            System.IntPtr nRaw;
            if ((n == null)) {
                nRaw = IntPtr.Zero;
            }
            else {
                nRaw = n.Raw;
            }
            System.IntPtr vRaw;
            if ((v == null)) {
                vRaw = IntPtr.Zero;
            }
            else {
                vRaw = v.Raw;
            }
            egueb_svg_element_stroke_get(nRaw, vRaw);
            if ((vRaw != IntPtr.Zero)) {
                Marshal.FreeHGlobal(vRaw);
            }
        }
        
        public static void SetStrokeWidth(Egueb.Dom.Node n, Egueb.Svg.Length stroke_width) {
            System.IntPtr nRaw;
            if ((n == null)) {
                nRaw = IntPtr.Zero;
            }
            else {
                nRaw = n.Raw;
            }
            System.IntPtr stroke_widthRaw;
            if ((stroke_width == null)) {
                stroke_widthRaw = IntPtr.Zero;
            }
            else {
                stroke_widthRaw = stroke_width.Raw;
            }
            egueb_svg_element_stroke_width_set(nRaw, stroke_widthRaw);
            if ((stroke_widthRaw != IntPtr.Zero)) {
                Marshal.FreeHGlobal(stroke_widthRaw);
            }
        }
        
        public static void GetStrokeWidth(Egueb.Dom.Node n, Egueb.Svg.LengthAnimated v) {
            System.IntPtr nRaw;
            if ((n == null)) {
                nRaw = IntPtr.Zero;
            }
            else {
                nRaw = n.Raw;
            }
            System.IntPtr vRaw;
            if ((v == null)) {
                vRaw = IntPtr.Zero;
            }
            else {
                vRaw = v.Raw;
            }
            egueb_svg_element_stroke_width_get(nRaw, vRaw);
            if ((vRaw != IntPtr.Zero)) {
                Marshal.FreeHGlobal(vRaw);
            }
        }
        
        public static void SetStrokeOpacity(Egueb.Dom.Node n, Egueb.Svg.Number v) {
            System.IntPtr nRaw;
            if ((n == null)) {
                nRaw = IntPtr.Zero;
            }
            else {
                nRaw = n.Raw;
            }
            double vRaw;
            vRaw = v;
            egueb_svg_element_stroke_opacity_set(nRaw, vRaw);
        }
        
        public static void GetStrokeOpacity(Egueb.Dom.Node n, Egueb.Svg.NumberAnimated v) {
            System.IntPtr nRaw;
            if ((n == null)) {
                nRaw = IntPtr.Zero;
            }
            else {
                nRaw = n.Raw;
            }
            System.IntPtr vRaw;
            if ((v == null)) {
                vRaw = IntPtr.Zero;
            }
            else {
                vRaw = v.Raw;
            }
            egueb_svg_element_stroke_opacity_get(nRaw, vRaw);
            if ((vRaw != IntPtr.Zero)) {
                Marshal.FreeHGlobal(vRaw);
            }
        }
    }
    
    public class ElementRect : Egueb.Svg.Element {
        
[DllImport("egueb-svg.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern System.IntPtr egueb_svg_element_rect_new();
[DllImport("egueb-svg.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void egueb_svg_element_rect_x_set_simple(System.IntPtr selfRaw, System.IntPtr xRaw);
[DllImport("egueb-svg.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void egueb_svg_element_rect_y_set_simple(System.IntPtr selfRaw, System.IntPtr yRaw);
[DllImport("egueb-svg.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void egueb_svg_element_rect_width_set_simple(System.IntPtr selfRaw, System.IntPtr widthRaw);
[DllImport("egueb-svg.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void egueb_svg_element_rect_height_set_simple(System.IntPtr selfRaw, System.IntPtr heightRaw);
[DllImport("egueb-svg.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void egueb_svg_element_rect_rx_set_simple(System.IntPtr selfRaw, System.IntPtr rxRaw);
[DllImport("egueb-svg.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void egueb_svg_element_rect_ry_set_simple(System.IntPtr selfRaw, System.IntPtr ryRaw);
[DllImport("egueb-svg.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void egueb_svg_element_rect_x_get(System.IntPtr selfRaw, System.IntPtr xRaw);
[DllImport("egueb-svg.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void egueb_svg_element_rect_y_get(System.IntPtr selfRaw, System.IntPtr yRaw);
[DllImport("egueb-svg.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void egueb_svg_element_rect_width_get(System.IntPtr selfRaw, System.IntPtr widthRaw);
[DllImport("egueb-svg.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void egueb_svg_element_rect_height_get(System.IntPtr selfRaw, System.IntPtr heightRaw);
[DllImport("egueb-svg.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void egueb_svg_element_rect_rx_get(System.IntPtr selfRaw, System.IntPtr rxRaw);
[DllImport("egueb-svg.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void egueb_svg_element_rect_ry_get(System.IntPtr selfRaw, System.IntPtr ryRaw);
        
        public ElementRect(System.IntPtr i, bool owned) : 
                base(i, owned) {
            Initialize(i, owned);
        }
        
        public ElementRect() {
            System.IntPtr ret = egueb_svg_element_rect_new();
            Initialize(ret, false);
        }
        
        public Egueb.Svg.LengthAnimated X {
            get {
                Egueb.Svg.LengthAnimated x;
                System.IntPtr xRaw;
                xRaw = Egueb.Svg.LengthAnimated.CreateRaw();
                egueb_svg_element_rect_x_get(raw, xRaw);
                x = new Egueb.Svg.LengthAnimated();
                x.Raw = xRaw;
                return x;
            }
        }
        
        public Egueb.Svg.LengthAnimated Y {
            get {
                Egueb.Svg.LengthAnimated y;
                System.IntPtr yRaw;
                yRaw = Egueb.Svg.LengthAnimated.CreateRaw();
                egueb_svg_element_rect_y_get(raw, yRaw);
                y = new Egueb.Svg.LengthAnimated();
                y.Raw = yRaw;
                return y;
            }
        }
        
        public Egueb.Svg.LengthAnimated Width {
            get {
                Egueb.Svg.LengthAnimated width;
                System.IntPtr widthRaw;
                widthRaw = Egueb.Svg.LengthAnimated.CreateRaw();
                egueb_svg_element_rect_width_get(raw, widthRaw);
                width = new Egueb.Svg.LengthAnimated();
                width.Raw = widthRaw;
                return width;
            }
        }
        
        public Egueb.Svg.LengthAnimated Height {
            get {
                Egueb.Svg.LengthAnimated height;
                System.IntPtr heightRaw;
                heightRaw = Egueb.Svg.LengthAnimated.CreateRaw();
                egueb_svg_element_rect_height_get(raw, heightRaw);
                height = new Egueb.Svg.LengthAnimated();
                height.Raw = heightRaw;
                return height;
            }
        }
        
        public Egueb.Svg.LengthAnimated Rx {
            get {
                Egueb.Svg.LengthAnimated rx;
                System.IntPtr rxRaw;
                rxRaw = Egueb.Svg.LengthAnimated.CreateRaw();
                egueb_svg_element_rect_rx_get(raw, rxRaw);
                rx = new Egueb.Svg.LengthAnimated();
                rx.Raw = rxRaw;
                return rx;
            }
        }
        
        public Egueb.Svg.LengthAnimated Ry {
            get {
                Egueb.Svg.LengthAnimated ry;
                System.IntPtr ryRaw;
                ryRaw = Egueb.Svg.LengthAnimated.CreateRaw();
                egueb_svg_element_rect_ry_get(raw, ryRaw);
                ry = new Egueb.Svg.LengthAnimated();
                ry.Raw = ryRaw;
                return ry;
            }
        }
        
        public void SetX(Egueb.Svg.Length x) {
            System.IntPtr xRaw;
            if ((x == null)) {
                xRaw = IntPtr.Zero;
            }
            else {
                xRaw = x.Raw;
            }
            egueb_svg_element_rect_x_set_simple(raw, xRaw);
            if ((xRaw != IntPtr.Zero)) {
                Marshal.FreeHGlobal(xRaw);
            }
        }
        
        public void SetY(Egueb.Svg.Length y) {
            System.IntPtr yRaw;
            if ((y == null)) {
                yRaw = IntPtr.Zero;
            }
            else {
                yRaw = y.Raw;
            }
            egueb_svg_element_rect_y_set_simple(raw, yRaw);
            if ((yRaw != IntPtr.Zero)) {
                Marshal.FreeHGlobal(yRaw);
            }
        }
        
        public void SetWidth(Egueb.Svg.Length width) {
            System.IntPtr widthRaw;
            if ((width == null)) {
                widthRaw = IntPtr.Zero;
            }
            else {
                widthRaw = width.Raw;
            }
            egueb_svg_element_rect_width_set_simple(raw, widthRaw);
            if ((widthRaw != IntPtr.Zero)) {
                Marshal.FreeHGlobal(widthRaw);
            }
        }
        
        public void SetHeight(Egueb.Svg.Length height) {
            System.IntPtr heightRaw;
            if ((height == null)) {
                heightRaw = IntPtr.Zero;
            }
            else {
                heightRaw = height.Raw;
            }
            egueb_svg_element_rect_height_set_simple(raw, heightRaw);
            if ((heightRaw != IntPtr.Zero)) {
                Marshal.FreeHGlobal(heightRaw);
            }
        }
        
        public void SetRx(Egueb.Svg.Length rx) {
            System.IntPtr rxRaw;
            if ((rx == null)) {
                rxRaw = IntPtr.Zero;
            }
            else {
                rxRaw = rx.Raw;
            }
            egueb_svg_element_rect_rx_set_simple(raw, rxRaw);
            if ((rxRaw != IntPtr.Zero)) {
                Marshal.FreeHGlobal(rxRaw);
            }
        }
        
        public void SetRy(Egueb.Svg.Length ry) {
            System.IntPtr ryRaw;
            if ((ry == null)) {
                ryRaw = IntPtr.Zero;
            }
            else {
                ryRaw = ry.Raw;
            }
            egueb_svg_element_rect_ry_set_simple(raw, ryRaw);
            if ((ryRaw != IntPtr.Zero)) {
                Marshal.FreeHGlobal(ryRaw);
            }
        }
    }
    
    public partial class ElementSvg : Egueb.Svg.Element {
        
[DllImport("egueb-svg.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern System.IntPtr egueb_svg_element_svg_new();
[DllImport("egueb-svg.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern System.Boolean egueb_svg_element_svg_egueb_svg_element_is_svg(System.IntPtr selfRaw);
[DllImport("egueb-svg.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern System.Boolean egueb_svg_element_svg_draw(System.IntPtr selfRaw, System.IntPtr sRaw, Enesim.Rop rop, System.IntPtr clipRaw, System.Int32 x, System.Int32 y, System.IntPtr errorRaw);
[DllImport("egueb-svg.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern System.Boolean egueb_svg_element_svg_draw_list(System.IntPtr selfRaw, System.IntPtr sRaw, Enesim.Rop rop, IntPtr clips, System.Int32 x, System.Int32 y, System.IntPtr errorRaw);
[DllImport("egueb-svg.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void egueb_svg_element_svg_animations_pause(System.IntPtr selfRaw);
[DllImport("egueb-svg.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void egueb_svg_element_svg_animations_unpause(System.IntPtr selfRaw);
[DllImport("egueb-svg.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern System.Boolean egueb_svg_element_svg_animations_paused(System.IntPtr selfRaw);
[DllImport("egueb-svg.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern System.Double egueb_svg_element_svg_time_get(System.IntPtr selfRaw);
[DllImport("egueb-svg.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void egueb_svg_element_svg_time_set(System.IntPtr selfRaw, System.Double secs);
[DllImport("egueb-svg.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void egueb_svg_element_svg_x_set_simple(System.IntPtr selfRaw, System.IntPtr xRaw);
[DllImport("egueb-svg.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void egueb_svg_element_svg_y_set_simple(System.IntPtr selfRaw, System.IntPtr yRaw);
[DllImport("egueb-svg.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void egueb_svg_element_svg_width_set_simple(System.IntPtr selfRaw, System.IntPtr widthRaw);
[DllImport("egueb-svg.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void egueb_svg_element_svg_height_set_simple(System.IntPtr selfRaw, System.IntPtr heightRaw);
[DllImport("egueb-svg.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void egueb_svg_element_svg_x_get(System.IntPtr selfRaw, System.IntPtr xRaw);
[DllImport("egueb-svg.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void egueb_svg_element_svg_y_get(System.IntPtr selfRaw, System.IntPtr yRaw);
[DllImport("egueb-svg.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void egueb_svg_element_svg_width_get(System.IntPtr selfRaw, System.IntPtr widthRaw);
[DllImport("egueb-svg.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void egueb_svg_element_svg_height_get(System.IntPtr selfRaw, System.IntPtr heightRaw);
[DllImport("egueb-svg.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern System.Double egueb_svg_element_svg_current_scale_get(System.IntPtr selfRaw);
[DllImport("egueb-svg.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void egueb_svg_element_svg_current_scale_set(System.IntPtr selfRaw, System.Double scale);
[DllImport("egueb-svg.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void egueb_svg_element_svg_current_translate_get(System.IntPtr selfRaw, System.IntPtr pRaw);
[DllImport("egueb-svg.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void egueb_svg_element_svg_current_translate_set(System.IntPtr selfRaw, System.IntPtr pRaw);
        
        public ElementSvg(System.IntPtr i, bool owned) : 
                base(i, owned) {
            Initialize(i, owned);
        }
        
        public ElementSvg() {
            System.IntPtr ret = egueb_svg_element_svg_new();
            Initialize(ret, false);
        }
        
        public Egueb.Svg.LengthAnimated X {
            get {
                Egueb.Svg.LengthAnimated x;
                System.IntPtr xRaw;
                xRaw = Egueb.Svg.LengthAnimated.CreateRaw();
                egueb_svg_element_svg_x_get(raw, xRaw);
                x = new Egueb.Svg.LengthAnimated();
                x.Raw = xRaw;
                return x;
            }
        }
        
        public Egueb.Svg.LengthAnimated Y {
            get {
                Egueb.Svg.LengthAnimated y;
                System.IntPtr yRaw;
                yRaw = Egueb.Svg.LengthAnimated.CreateRaw();
                egueb_svg_element_svg_y_get(raw, yRaw);
                y = new Egueb.Svg.LengthAnimated();
                y.Raw = yRaw;
                return y;
            }
        }
        
        public Egueb.Svg.LengthAnimated Width {
            get {
                Egueb.Svg.LengthAnimated width;
                System.IntPtr widthRaw;
                widthRaw = Egueb.Svg.LengthAnimated.CreateRaw();
                egueb_svg_element_svg_width_get(raw, widthRaw);
                width = new Egueb.Svg.LengthAnimated();
                width.Raw = widthRaw;
                return width;
            }
        }
        
        public Egueb.Svg.LengthAnimated Height {
            get {
                Egueb.Svg.LengthAnimated height;
                System.IntPtr heightRaw;
                heightRaw = Egueb.Svg.LengthAnimated.CreateRaw();
                egueb_svg_element_svg_height_get(raw, heightRaw);
                height = new Egueb.Svg.LengthAnimated();
                height.Raw = heightRaw;
                return height;
            }
        }
        
        public double CurrentScale {
            get {
                double ret = egueb_svg_element_svg_current_scale_get(raw);
                return ret;
            }
            set {
                double scale;
                scale = value;
                egueb_svg_element_svg_current_scale_set(raw, scale);
            }
        }
        
        public Egueb.Svg.Point CurrentTranslate {
            get {
                Egueb.Svg.Point p;
                System.IntPtr pRaw;
                pRaw = Egueb.Svg.Point.CreateRaw();
                egueb_svg_element_svg_current_translate_get(raw, pRaw);
                p = new Egueb.Svg.Point();
                p.Raw = pRaw;
                return p;
            }
            set {
                Egueb.Svg.Point p;
                p = value;
                System.IntPtr pRaw;
                if ((p == null)) {
                    pRaw = IntPtr.Zero;
                }
                else {
                    pRaw = p.Raw;
                }
                egueb_svg_element_svg_current_translate_set(raw, pRaw);
                if ((pRaw != IntPtr.Zero)) {
                    Marshal.FreeHGlobal(pRaw);
                }
            }
        }
        
        public bool EguebSvgElementIsSvg() {
            bool ret = egueb_svg_element_svg_egueb_svg_element_is_svg(raw);
            return ret;
        }
        
        public bool Draw(Enesim.Surface s, Enesim.Rop rop, Eina.Rectangle clip, int x, int y, Enesim.Log error) {
            System.IntPtr sRaw;
            if ((s == null)) {
                sRaw = IntPtr.Zero;
            }
            else {
                sRaw = s.Raw;
            }
            System.IntPtr clipRaw;
            if ((clip == null)) {
                clipRaw = IntPtr.Zero;
            }
            else {
                clipRaw = clip.Raw;
            }
            System.IntPtr errorRaw;
            if ((error == null)) {
                errorRaw = IntPtr.Zero;
            }
            else {
                errorRaw = error.Raw;
            }
            bool ret = egueb_svg_element_svg_draw(raw, sRaw, rop, clipRaw, x, y, errorRaw);
            if ((clipRaw != IntPtr.Zero)) {
                Marshal.FreeHGlobal(clipRaw);
            }
            return ret;
        }
        
        public bool DrawList(Enesim.Surface s, Enesim.Rop rop, System.IntPtr clips, int x, int y, Enesim.Log error) {
            System.IntPtr sRaw;
            if ((s == null)) {
                sRaw = IntPtr.Zero;
            }
            else {
                sRaw = s.Raw;
            }
            System.IntPtr errorRaw;
            if ((error == null)) {
                errorRaw = IntPtr.Zero;
            }
            else {
                errorRaw = error.Raw;
            }
            bool ret = egueb_svg_element_svg_draw_list(raw, sRaw, rop, clips, x, y, errorRaw);
            return ret;
        }
        
        public void AnimationsPause() {
            egueb_svg_element_svg_animations_pause(raw);
        }
        
        public void AnimationsUnpause() {
            egueb_svg_element_svg_animations_unpause(raw);
        }
        
        public bool AnimationsPaused() {
            bool ret = egueb_svg_element_svg_animations_paused(raw);
            return ret;
        }
        
        public double GetTime() {
            double ret = egueb_svg_element_svg_time_get(raw);
            return ret;
        }
        
        public void SetTime(double secs) {
            egueb_svg_element_svg_time_set(raw, secs);
        }
        
        public void SetX(Egueb.Svg.Length x) {
            System.IntPtr xRaw;
            if ((x == null)) {
                xRaw = IntPtr.Zero;
            }
            else {
                xRaw = x.Raw;
            }
            egueb_svg_element_svg_x_set_simple(raw, xRaw);
            if ((xRaw != IntPtr.Zero)) {
                Marshal.FreeHGlobal(xRaw);
            }
        }
        
        public void SetY(Egueb.Svg.Length y) {
            System.IntPtr yRaw;
            if ((y == null)) {
                yRaw = IntPtr.Zero;
            }
            else {
                yRaw = y.Raw;
            }
            egueb_svg_element_svg_y_set_simple(raw, yRaw);
            if ((yRaw != IntPtr.Zero)) {
                Marshal.FreeHGlobal(yRaw);
            }
        }
        
        public void SetWidth(Egueb.Svg.Length width) {
            System.IntPtr widthRaw;
            if ((width == null)) {
                widthRaw = IntPtr.Zero;
            }
            else {
                widthRaw = width.Raw;
            }
            egueb_svg_element_svg_width_set_simple(raw, widthRaw);
            if ((widthRaw != IntPtr.Zero)) {
                Marshal.FreeHGlobal(widthRaw);
            }
        }
        
        public void SetHeight(Egueb.Svg.Length height) {
            System.IntPtr heightRaw;
            if ((height == null)) {
                heightRaw = IntPtr.Zero;
            }
            else {
                heightRaw = height.Raw;
            }
            egueb_svg_element_svg_height_set_simple(raw, heightRaw);
            if ((heightRaw != IntPtr.Zero)) {
                Marshal.FreeHGlobal(heightRaw);
            }
        }
    }
    
    public class Document : Egueb.Dom.Document {
        
[DllImport("egueb-svg.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern System.Boolean egueb_svg_document_egueb_svg_is_document(System.IntPtr selfRaw);
[DllImport("egueb-svg.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern System.IntPtr egueb_svg_document_new();
[DllImport("egueb-svg.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern System.IntPtr egueb_svg_document_title_get(System.IntPtr selfRaw);
[DllImport("egueb-svg.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern System.IntPtr egueb_svg_document_referrer_get(System.IntPtr selfRaw);
[DllImport("egueb-svg.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern System.IntPtr egueb_svg_document_domain_get(System.IntPtr selfRaw);
[DllImport("egueb-svg.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void egueb_svg_document_font_size_set(System.IntPtr selfRaw, System.Double font_size);
[DllImport("egueb-svg.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern System.Double egueb_svg_document_font_size_get(System.IntPtr selfRaw);
[DllImport("egueb-svg.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern System.IntPtr egueb_svg_document_iri_clone(System.IntPtr selfRaw, System.IntPtr iriRaw, System.Int32 errRaw);
[DllImport("egueb-svg.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern System.IntPtr egueb_svg_document_root_element_get(System.IntPtr selfRaw);
        
        public Document(System.IntPtr i, bool owned) : 
                base(i, owned) {
            Initialize(i, owned);
        }
        
        public Document() {
            System.IntPtr ret = egueb_svg_document_new();
            Initialize(ret, false);
        }
        
        public Egueb.Svg.Element RootElement {
            get {
                System.IntPtr ret = egueb_svg_document_root_element_get(raw);
                return new Egueb.Svg.Element(ret, false);
            }
        }
        
        public bool EguebSvgIsDocument() {
            bool ret = egueb_svg_document_egueb_svg_is_document(raw);
            return ret;
        }
        
        public Egueb.Dom.String GetTitle() {
            System.IntPtr ret = egueb_svg_document_title_get(raw);
            return new Egueb.Dom.String(ret, false);
        }
        
        public Egueb.Dom.String GetReferrer() {
            System.IntPtr ret = egueb_svg_document_referrer_get(raw);
            return new Egueb.Dom.String(ret, false);
        }
        
        public Egueb.Dom.String GetDomain() {
            System.IntPtr ret = egueb_svg_document_domain_get(raw);
            return new Egueb.Dom.String(ret, false);
        }
        
        public void SetFontSize(double font_size) {
            egueb_svg_document_font_size_set(raw, font_size);
        }
        
        public double GetFontSize() {
            double ret = egueb_svg_document_font_size_get(raw);
            return ret;
        }
        
        public Egueb.Dom.Node IriClone(Egueb.Dom.String iri, Eina.Error err) {
            System.IntPtr iriRaw;
            if ((iri == null)) {
                iriRaw = IntPtr.Zero;
            }
            else {
                iriRaw = iri.Raw;
            }
            int errRaw;
            errRaw = err;
            System.IntPtr ret = egueb_svg_document_iri_clone(raw, iriRaw, errRaw);
            return new Egueb.Dom.Node(ret, false);
        }
    }
    
    public class ElementVideo : Egueb.Svg.Element {
        
[DllImport("egueb-svg.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern System.IntPtr egueb_svg_element_video_new();
[DllImport("egueb-svg.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void egueb_svg_element_video_x_set_simple(System.IntPtr selfRaw, System.IntPtr xRaw);
[DllImport("egueb-svg.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void egueb_svg_element_video_y_set_simple(System.IntPtr selfRaw, System.IntPtr yRaw);
[DllImport("egueb-svg.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void egueb_svg_element_video_width_set_simple(System.IntPtr selfRaw, System.IntPtr widthRaw);
[DllImport("egueb-svg.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void egueb_svg_element_video_height_set_simple(System.IntPtr selfRaw, System.IntPtr heightRaw);
[DllImport("egueb-svg.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void egueb_svg_element_video_href_set_simple(System.IntPtr selfRaw, out System.IntPtr vRaw);
[DllImport("egueb-svg.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void egueb_svg_element_video_play(System.IntPtr selfRaw);
[DllImport("egueb-svg.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void egueb_svg_element_video_pause(System.IntPtr selfRaw);
[DllImport("egueb-svg.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void egueb_svg_element_video_x_get(System.IntPtr selfRaw, System.IntPtr xRaw);
[DllImport("egueb-svg.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void egueb_svg_element_video_y_get(System.IntPtr selfRaw, System.IntPtr yRaw);
[DllImport("egueb-svg.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void egueb_svg_element_video_width_get(System.IntPtr selfRaw, System.IntPtr widthRaw);
[DllImport("egueb-svg.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void egueb_svg_element_video_height_get(System.IntPtr selfRaw, System.IntPtr heightRaw);
[DllImport("egueb-svg.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void egueb_svg_element_video_href_get(System.IntPtr selfRaw, System.IntPtr vRaw);
        
        public ElementVideo(System.IntPtr i, bool owned) : 
                base(i, owned) {
            Initialize(i, owned);
        }
        
        public ElementVideo() {
            System.IntPtr ret = egueb_svg_element_video_new();
            Initialize(ret, false);
        }
        
        public Egueb.Svg.LengthAnimated X {
            get {
                Egueb.Svg.LengthAnimated x;
                System.IntPtr xRaw;
                xRaw = Egueb.Svg.LengthAnimated.CreateRaw();
                egueb_svg_element_video_x_get(raw, xRaw);
                x = new Egueb.Svg.LengthAnimated();
                x.Raw = xRaw;
                return x;
            }
        }
        
        public Egueb.Svg.LengthAnimated Y {
            get {
                Egueb.Svg.LengthAnimated y;
                System.IntPtr yRaw;
                yRaw = Egueb.Svg.LengthAnimated.CreateRaw();
                egueb_svg_element_video_y_get(raw, yRaw);
                y = new Egueb.Svg.LengthAnimated();
                y.Raw = yRaw;
                return y;
            }
        }
        
        public Egueb.Svg.LengthAnimated Width {
            get {
                Egueb.Svg.LengthAnimated width;
                System.IntPtr widthRaw;
                widthRaw = Egueb.Svg.LengthAnimated.CreateRaw();
                egueb_svg_element_video_width_get(raw, widthRaw);
                width = new Egueb.Svg.LengthAnimated();
                width.Raw = widthRaw;
                return width;
            }
        }
        
        public Egueb.Svg.LengthAnimated Height {
            get {
                Egueb.Svg.LengthAnimated height;
                System.IntPtr heightRaw;
                heightRaw = Egueb.Svg.LengthAnimated.CreateRaw();
                egueb_svg_element_video_height_get(raw, heightRaw);
                height = new Egueb.Svg.LengthAnimated();
                height.Raw = heightRaw;
                return height;
            }
        }
        
        public Egueb.Svg.String.Animated Href {
            get {
                Egueb.Svg.String.Animated v;
                System.IntPtr vRaw;
                vRaw = Egueb.Svg.String.Animated.CreateRaw();
                egueb_svg_element_video_href_get(raw, vRaw);
                v = new Egueb.Svg.String.Animated();
                v.Raw = vRaw;
                return v;
            }
        }
        
        public void SetX(Egueb.Svg.Length x) {
            System.IntPtr xRaw;
            if ((x == null)) {
                xRaw = IntPtr.Zero;
            }
            else {
                xRaw = x.Raw;
            }
            egueb_svg_element_video_x_set_simple(raw, xRaw);
            if ((xRaw != IntPtr.Zero)) {
                Marshal.FreeHGlobal(xRaw);
            }
        }
        
        public void SetY(Egueb.Svg.Length y) {
            System.IntPtr yRaw;
            if ((y == null)) {
                yRaw = IntPtr.Zero;
            }
            else {
                yRaw = y.Raw;
            }
            egueb_svg_element_video_y_set_simple(raw, yRaw);
            if ((yRaw != IntPtr.Zero)) {
                Marshal.FreeHGlobal(yRaw);
            }
        }
        
        public void SetWidth(Egueb.Svg.Length width) {
            System.IntPtr widthRaw;
            if ((width == null)) {
                widthRaw = IntPtr.Zero;
            }
            else {
                widthRaw = width.Raw;
            }
            egueb_svg_element_video_width_set_simple(raw, widthRaw);
            if ((widthRaw != IntPtr.Zero)) {
                Marshal.FreeHGlobal(widthRaw);
            }
        }
        
        public void SetHeight(Egueb.Svg.Length height) {
            System.IntPtr heightRaw;
            if ((height == null)) {
                heightRaw = IntPtr.Zero;
            }
            else {
                heightRaw = height.Raw;
            }
            egueb_svg_element_video_height_set_simple(raw, heightRaw);
            if ((heightRaw != IntPtr.Zero)) {
                Marshal.FreeHGlobal(heightRaw);
            }
        }
        
        public void SetHref(out Egueb.Dom.String v) {
            System.IntPtr vRaw;
            egueb_svg_element_video_href_set_simple(raw, out  vRaw);
            v = new Egueb.Dom.String(vRaw, false);
        }
        
        public void Play() {
            egueb_svg_element_video_play(raw);
        }
        
        public void Pause() {
            egueb_svg_element_video_pause(raw);
        }
    }
    
    public class ElementImage : Egueb.Svg.Element {
        
[DllImport("egueb-svg.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern System.IntPtr egueb_svg_element_image_new();
[DllImport("egueb-svg.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void egueb_svg_element_image_x_set_simple(System.IntPtr selfRaw, System.IntPtr xRaw);
[DllImport("egueb-svg.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void egueb_svg_element_image_y_set_simple(System.IntPtr selfRaw, System.IntPtr yRaw);
[DllImport("egueb-svg.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void egueb_svg_element_image_width_set_simple(System.IntPtr selfRaw, System.IntPtr widthRaw);
[DllImport("egueb-svg.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void egueb_svg_element_image_height_set_simple(System.IntPtr selfRaw, System.IntPtr heightRaw);
[DllImport("egueb-svg.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void egueb_svg_element_image_href_set_simple(System.IntPtr selfRaw, out System.IntPtr vRaw);
[DllImport("egueb-svg.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void egueb_svg_element_image_svg_set(System.IntPtr selfRaw, System.IntPtr svgRaw);
[DllImport("egueb-svg.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void egueb_svg_element_image_x_get(System.IntPtr selfRaw, System.IntPtr xRaw);
[DllImport("egueb-svg.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void egueb_svg_element_image_y_get(System.IntPtr selfRaw, System.IntPtr yRaw);
[DllImport("egueb-svg.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void egueb_svg_element_image_width_get(System.IntPtr selfRaw, System.IntPtr widthRaw);
[DllImport("egueb-svg.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void egueb_svg_element_image_height_get(System.IntPtr selfRaw, System.IntPtr heightRaw);
[DllImport("egueb-svg.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void egueb_svg_element_image_href_get(System.IntPtr selfRaw, System.IntPtr vRaw);
        
        public ElementImage(System.IntPtr i, bool owned) : 
                base(i, owned) {
            Initialize(i, owned);
        }
        
        public ElementImage() {
            System.IntPtr ret = egueb_svg_element_image_new();
            Initialize(ret, false);
        }
        
        public Egueb.Svg.LengthAnimated X {
            get {
                Egueb.Svg.LengthAnimated x;
                System.IntPtr xRaw;
                xRaw = Egueb.Svg.LengthAnimated.CreateRaw();
                egueb_svg_element_image_x_get(raw, xRaw);
                x = new Egueb.Svg.LengthAnimated();
                x.Raw = xRaw;
                return x;
            }
        }
        
        public Egueb.Svg.LengthAnimated Y {
            get {
                Egueb.Svg.LengthAnimated y;
                System.IntPtr yRaw;
                yRaw = Egueb.Svg.LengthAnimated.CreateRaw();
                egueb_svg_element_image_y_get(raw, yRaw);
                y = new Egueb.Svg.LengthAnimated();
                y.Raw = yRaw;
                return y;
            }
        }
        
        public Egueb.Svg.LengthAnimated Width {
            get {
                Egueb.Svg.LengthAnimated width;
                System.IntPtr widthRaw;
                widthRaw = Egueb.Svg.LengthAnimated.CreateRaw();
                egueb_svg_element_image_width_get(raw, widthRaw);
                width = new Egueb.Svg.LengthAnimated();
                width.Raw = widthRaw;
                return width;
            }
        }
        
        public Egueb.Svg.LengthAnimated Height {
            get {
                Egueb.Svg.LengthAnimated height;
                System.IntPtr heightRaw;
                heightRaw = Egueb.Svg.LengthAnimated.CreateRaw();
                egueb_svg_element_image_height_get(raw, heightRaw);
                height = new Egueb.Svg.LengthAnimated();
                height.Raw = heightRaw;
                return height;
            }
        }
        
        public Egueb.Svg.String.Animated Href {
            get {
                Egueb.Svg.String.Animated v;
                System.IntPtr vRaw;
                vRaw = Egueb.Svg.String.Animated.CreateRaw();
                egueb_svg_element_image_href_get(raw, vRaw);
                v = new Egueb.Svg.String.Animated();
                v.Raw = vRaw;
                return v;
            }
        }
        
        public void SetX(Egueb.Svg.Length x) {
            System.IntPtr xRaw;
            if ((x == null)) {
                xRaw = IntPtr.Zero;
            }
            else {
                xRaw = x.Raw;
            }
            egueb_svg_element_image_x_set_simple(raw, xRaw);
            if ((xRaw != IntPtr.Zero)) {
                Marshal.FreeHGlobal(xRaw);
            }
        }
        
        public void SetY(Egueb.Svg.Length y) {
            System.IntPtr yRaw;
            if ((y == null)) {
                yRaw = IntPtr.Zero;
            }
            else {
                yRaw = y.Raw;
            }
            egueb_svg_element_image_y_set_simple(raw, yRaw);
            if ((yRaw != IntPtr.Zero)) {
                Marshal.FreeHGlobal(yRaw);
            }
        }
        
        public void SetWidth(Egueb.Svg.Length width) {
            System.IntPtr widthRaw;
            if ((width == null)) {
                widthRaw = IntPtr.Zero;
            }
            else {
                widthRaw = width.Raw;
            }
            egueb_svg_element_image_width_set_simple(raw, widthRaw);
            if ((widthRaw != IntPtr.Zero)) {
                Marshal.FreeHGlobal(widthRaw);
            }
        }
        
        public void SetHeight(Egueb.Svg.Length height) {
            System.IntPtr heightRaw;
            if ((height == null)) {
                heightRaw = IntPtr.Zero;
            }
            else {
                heightRaw = height.Raw;
            }
            egueb_svg_element_image_height_set_simple(raw, heightRaw);
            if ((heightRaw != IntPtr.Zero)) {
                Marshal.FreeHGlobal(heightRaw);
            }
        }
        
        public void SetHref(out Egueb.Dom.String v) {
            System.IntPtr vRaw;
            egueb_svg_element_image_href_set_simple(raw, out  vRaw);
            v = new Egueb.Dom.String(vRaw, false);
        }
        
        public void SetSvg(Egueb.Dom.Node svg) {
            System.IntPtr svgRaw;
            if ((svg == null)) {
                svgRaw = IntPtr.Zero;
            }
            else {
                svgRaw = svg.Raw;
            }
            egueb_svg_element_image_svg_set(raw, svgRaw);
        }
    }
    
    public class ElementUse : Egueb.Svg.Element {
        
[DllImport("egueb-svg.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern System.IntPtr egueb_svg_element_use_new();
[DllImport("egueb-svg.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern System.Boolean egueb_svg_element_use_egueb_svg_element_is_use(System.IntPtr selfRaw);
[DllImport("egueb-svg.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void egueb_svg_element_use_x_set_simple(System.IntPtr selfRaw, System.IntPtr xRaw);
[DllImport("egueb-svg.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void egueb_svg_element_use_y_set_simple(System.IntPtr selfRaw, System.IntPtr yRaw);
[DllImport("egueb-svg.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void egueb_svg_element_use_width_set_simple(System.IntPtr selfRaw, System.IntPtr widthRaw);
[DllImport("egueb-svg.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void egueb_svg_element_use_height_set_simple(System.IntPtr selfRaw, System.IntPtr heightRaw);
[DllImport("egueb-svg.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void egueb_svg_element_use_href_set_simple(System.IntPtr selfRaw, out System.IntPtr vRaw);
[DllImport("egueb-svg.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void egueb_svg_element_use_x_get(System.IntPtr selfRaw, System.IntPtr xRaw);
[DllImport("egueb-svg.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void egueb_svg_element_use_y_get(System.IntPtr selfRaw, System.IntPtr yRaw);
[DllImport("egueb-svg.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void egueb_svg_element_use_width_get(System.IntPtr selfRaw, System.IntPtr widthRaw);
[DllImport("egueb-svg.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void egueb_svg_element_use_height_get(System.IntPtr selfRaw, System.IntPtr heightRaw);
[DllImport("egueb-svg.dll", CallingConvention=CallingConvention.Cdecl)]
private static extern void egueb_svg_element_use_href_get(System.IntPtr selfRaw, System.IntPtr vRaw);
        
        public ElementUse(System.IntPtr i, bool owned) : 
                base(i, owned) {
            Initialize(i, owned);
        }
        
        public ElementUse() {
            System.IntPtr ret = egueb_svg_element_use_new();
            Initialize(ret, false);
        }
        
        public Egueb.Svg.LengthAnimated X {
            get {
                Egueb.Svg.LengthAnimated x;
                System.IntPtr xRaw;
                xRaw = Egueb.Svg.LengthAnimated.CreateRaw();
                egueb_svg_element_use_x_get(raw, xRaw);
                x = new Egueb.Svg.LengthAnimated();
                x.Raw = xRaw;
                return x;
            }
        }
        
        public Egueb.Svg.LengthAnimated Y {
            get {
                Egueb.Svg.LengthAnimated y;
                System.IntPtr yRaw;
                yRaw = Egueb.Svg.LengthAnimated.CreateRaw();
                egueb_svg_element_use_y_get(raw, yRaw);
                y = new Egueb.Svg.LengthAnimated();
                y.Raw = yRaw;
                return y;
            }
        }
        
        public Egueb.Svg.LengthAnimated Width {
            get {
                Egueb.Svg.LengthAnimated width;
                System.IntPtr widthRaw;
                widthRaw = Egueb.Svg.LengthAnimated.CreateRaw();
                egueb_svg_element_use_width_get(raw, widthRaw);
                width = new Egueb.Svg.LengthAnimated();
                width.Raw = widthRaw;
                return width;
            }
        }
        
        public Egueb.Svg.LengthAnimated Height {
            get {
                Egueb.Svg.LengthAnimated height;
                System.IntPtr heightRaw;
                heightRaw = Egueb.Svg.LengthAnimated.CreateRaw();
                egueb_svg_element_use_height_get(raw, heightRaw);
                height = new Egueb.Svg.LengthAnimated();
                height.Raw = heightRaw;
                return height;
            }
        }
        
        public Egueb.Svg.String.Animated Href {
            get {
                Egueb.Svg.String.Animated v;
                System.IntPtr vRaw;
                vRaw = Egueb.Svg.String.Animated.CreateRaw();
                egueb_svg_element_use_href_get(raw, vRaw);
                v = new Egueb.Svg.String.Animated();
                v.Raw = vRaw;
                return v;
            }
        }
        
        public bool EguebSvgElementIsUse() {
            bool ret = egueb_svg_element_use_egueb_svg_element_is_use(raw);
            return ret;
        }
        
        public void SetX(Egueb.Svg.Length x) {
            System.IntPtr xRaw;
            if ((x == null)) {
                xRaw = IntPtr.Zero;
            }
            else {
                xRaw = x.Raw;
            }
            egueb_svg_element_use_x_set_simple(raw, xRaw);
            if ((xRaw != IntPtr.Zero)) {
                Marshal.FreeHGlobal(xRaw);
            }
        }
        
        public void SetY(Egueb.Svg.Length y) {
            System.IntPtr yRaw;
            if ((y == null)) {
                yRaw = IntPtr.Zero;
            }
            else {
                yRaw = y.Raw;
            }
            egueb_svg_element_use_y_set_simple(raw, yRaw);
            if ((yRaw != IntPtr.Zero)) {
                Marshal.FreeHGlobal(yRaw);
            }
        }
        
        public void SetWidth(Egueb.Svg.Length width) {
            System.IntPtr widthRaw;
            if ((width == null)) {
                widthRaw = IntPtr.Zero;
            }
            else {
                widthRaw = width.Raw;
            }
            egueb_svg_element_use_width_set_simple(raw, widthRaw);
            if ((widthRaw != IntPtr.Zero)) {
                Marshal.FreeHGlobal(widthRaw);
            }
        }
        
        public void SetHeight(Egueb.Svg.Length height) {
            System.IntPtr heightRaw;
            if ((height == null)) {
                heightRaw = IntPtr.Zero;
            }
            else {
                heightRaw = height.Raw;
            }
            egueb_svg_element_use_height_set_simple(raw, heightRaw);
            if ((heightRaw != IntPtr.Zero)) {
                Marshal.FreeHGlobal(heightRaw);
            }
        }
        
        public void SetHref(out Egueb.Dom.String v) {
            System.IntPtr vRaw;
            egueb_svg_element_use_href_set_simple(raw, out  vRaw);
            v = new Egueb.Dom.String(vRaw, false);
        }
    }
    
    public enum LengthUnit {
        
        Unknown = 0,
        
        Em = 1,
        
        Ex = 2,
        
        Px = 3,
        
        Pt = 4,
        
        Pc = 5,
        
        Cm = 6,
        
        Mm = 7,
        
        In = 8,
        
        Percent = 9,
        
        EguebSvgLengthUnits = 10,
    }
    
    public enum PaintType {
        
        None = 0,
        
        CurrentColor = 1,
        
        Color = 2,
        
        Server = 3,
        
        EguebSvgPaintTypes = 4,
    }
    
    public class LengthAnimated {
        
        private Struct rawStruct;
        
        private Egueb.Svg.Length _base;
        
        private Egueb.Svg.Length anim;
        
        public LengthAnimated() {
            _base = new Egueb.Svg.Length();
            anim = new Egueb.Svg.Length();
        }
        
        public LengthAnimated(System.IntPtr i, bool owned) {
            rawStruct = ((Struct)(Marshal.PtrToStructure(i, typeof(Struct))));
            System.IntPtr _baseRaw = Egueb.Svg.Length.CreateRaw();
            Marshal.StructureToPtr(rawStruct._base, _baseRaw, false);
            _base = new Egueb.Svg.Length(_baseRaw, true);
            System.IntPtr animRaw = Egueb.Svg.Length.CreateRaw();
            Marshal.StructureToPtr(rawStruct.anim, animRaw, false);
            anim = new Egueb.Svg.Length(animRaw, true);
        }
        
        public IntPtr Raw {
            get {
                System.IntPtr raw;
                raw = CreateRaw();
                Marshal.StructureToPtr(rawStruct, raw, false);
                return raw;
            }
            set {
                rawStruct = ((Struct)(Marshal.PtrToStructure(value, typeof(Struct))));
                DestroyRaw(value);
            }
        }
        
        public Egueb.Svg.Length Base {
            get {
                Egueb.Svg.Length ret;
                ret = this._base;
                return ret;
            }
        }
        
        public Egueb.Svg.Length Anim {
            get {
                Egueb.Svg.Length ret;
                ret = this.anim;
                return ret;
            }
        }
        
        public static System.IntPtr CreateRaw() {
            System.IntPtr raw;
            raw = Marshal.AllocHGlobal(Marshal.SizeOf(typeof(Struct)));
            return raw;
        }
        
        public static void DestroyRaw(System.IntPtr raw) {
            Marshal.FreeHGlobal(raw);
        }
        
        [StructLayout(System.Runtime.InteropServices.LayoutKind.Sequential)]
        public struct Struct {
            
            internal Egueb.Svg.Length.Struct _base;
            
            internal Egueb.Svg.Length.Struct anim;
        }
    }
    
    public class PaintAnimated {
        
        private Struct rawStruct;
        
        private Egueb.Svg.Paint _base;
        
        private Egueb.Svg.Paint anim;
        
        public PaintAnimated() {
            _base = new Egueb.Svg.Paint();
            anim = new Egueb.Svg.Paint();
        }
        
        public PaintAnimated(System.IntPtr i, bool owned) {
            rawStruct = ((Struct)(Marshal.PtrToStructure(i, typeof(Struct))));
            System.IntPtr _baseRaw = Egueb.Svg.Paint.CreateRaw();
            Marshal.StructureToPtr(rawStruct._base, _baseRaw, false);
            _base = new Egueb.Svg.Paint(_baseRaw, true);
            System.IntPtr animRaw = Egueb.Svg.Paint.CreateRaw();
            Marshal.StructureToPtr(rawStruct.anim, animRaw, false);
            anim = new Egueb.Svg.Paint(animRaw, true);
        }
        
        public IntPtr Raw {
            get {
                System.IntPtr raw;
                raw = CreateRaw();
                Marshal.StructureToPtr(rawStruct, raw, false);
                return raw;
            }
            set {
                rawStruct = ((Struct)(Marshal.PtrToStructure(value, typeof(Struct))));
                DestroyRaw(value);
            }
        }
        
        public Egueb.Svg.Paint Base {
            get {
                Egueb.Svg.Paint ret;
                ret = this._base;
                return ret;
            }
        }
        
        public Egueb.Svg.Paint Anim {
            get {
                Egueb.Svg.Paint ret;
                ret = this.anim;
                return ret;
            }
        }
        
        public static System.IntPtr CreateRaw() {
            System.IntPtr raw;
            raw = Marshal.AllocHGlobal(Marshal.SizeOf(typeof(Struct)));
            return raw;
        }
        
        public static void DestroyRaw(System.IntPtr raw) {
            Marshal.FreeHGlobal(raw);
        }
        
        [StructLayout(System.Runtime.InteropServices.LayoutKind.Sequential)]
        public struct Struct {
            
            internal Egueb.Svg.Paint.Struct _base;
            
            internal Egueb.Svg.Paint.Struct anim;
        }
    }
    
    public class Paint {
        
        private Struct rawStruct;
        
        private Egueb.Svg.Color color;
        
        private Egueb.Dom.String uri;
        
        public Paint() {
            color = new Egueb.Svg.Color();
            uri = null;
        }
        
        public Paint(System.IntPtr i, bool owned) {
            rawStruct = ((Struct)(Marshal.PtrToStructure(i, typeof(Struct))));
            System.IntPtr colorRaw = Egueb.Svg.Color.CreateRaw();
            Marshal.StructureToPtr(rawStruct.color, colorRaw, false);
            color = new Egueb.Svg.Color(colorRaw, true);
            System.IntPtr uriRaw = this.rawStruct.uri;
            Egueb.Dom.String uri;
            if ((uriRaw == IntPtr.Zero)) {
                uri = null;
            }
            else {
                uri = new Egueb.Dom.String(uriRaw, false);
            }
            this.uri = uri;
        }
        
        public IntPtr Raw {
            get {
                System.IntPtr raw;
                raw = CreateRaw();
                Marshal.StructureToPtr(rawStruct, raw, false);
                return raw;
            }
            set {
                rawStruct = ((Struct)(Marshal.PtrToStructure(value, typeof(Struct))));
                DestroyRaw(value);
            }
        }
        
        public Egueb.Svg.PaintType Type {
            get {
                Egueb.Svg.PaintType ret;
                ret = this.rawStruct.type;
                return ret;
            }
            set {
                this.rawStruct.type = value;
            }
        }
        
        public Egueb.Svg.Color Color {
            get {
                Egueb.Svg.Color ret;
                ret = this.color;
                return ret;
            }
        }
        
        public Egueb.Dom.String Uri {
            get {
                Egueb.Dom.String ret;
                ret = this.uri;
                return ret;
            }
            set {
                this.uri = value;
            }
        }
        
        public static System.IntPtr CreateRaw() {
            System.IntPtr raw;
            raw = Marshal.AllocHGlobal(Marshal.SizeOf(typeof(Struct)));
            return raw;
        }
        
        public static void DestroyRaw(System.IntPtr raw) {
            Marshal.FreeHGlobal(raw);
        }
        
        [StructLayout(System.Runtime.InteropServices.LayoutKind.Sequential)]
        public struct Struct {
            
            internal Egueb.Svg.PaintType type;
            
            internal Egueb.Svg.Color.Struct color;
            
            internal System.IntPtr uri;
        }
    }
    
    public class RectAnimated {
        
        private Struct rawStruct;
        
        private Egueb.Svg.Rect _base;
        
        private Egueb.Svg.Rect anim;
        
        public RectAnimated() {
            _base = new Egueb.Svg.Rect();
            anim = new Egueb.Svg.Rect();
        }
        
        public RectAnimated(System.IntPtr i, bool owned) {
            rawStruct = ((Struct)(Marshal.PtrToStructure(i, typeof(Struct))));
            System.IntPtr _baseRaw = Egueb.Svg.Rect.CreateRaw();
            Marshal.StructureToPtr(rawStruct._base, _baseRaw, false);
            _base = new Egueb.Svg.Rect(_baseRaw, true);
            System.IntPtr animRaw = Egueb.Svg.Rect.CreateRaw();
            Marshal.StructureToPtr(rawStruct.anim, animRaw, false);
            anim = new Egueb.Svg.Rect(animRaw, true);
        }
        
        public IntPtr Raw {
            get {
                System.IntPtr raw;
                raw = CreateRaw();
                Marshal.StructureToPtr(rawStruct, raw, false);
                return raw;
            }
            set {
                rawStruct = ((Struct)(Marshal.PtrToStructure(value, typeof(Struct))));
                DestroyRaw(value);
            }
        }
        
        public Egueb.Svg.Rect Base {
            get {
                Egueb.Svg.Rect ret;
                ret = this._base;
                return ret;
            }
        }
        
        public Egueb.Svg.Rect Anim {
            get {
                Egueb.Svg.Rect ret;
                ret = this.anim;
                return ret;
            }
        }
        
        public static System.IntPtr CreateRaw() {
            System.IntPtr raw;
            raw = Marshal.AllocHGlobal(Marshal.SizeOf(typeof(Struct)));
            return raw;
        }
        
        public static void DestroyRaw(System.IntPtr raw) {
            Marshal.FreeHGlobal(raw);
        }
        
        [StructLayout(System.Runtime.InteropServices.LayoutKind.Sequential)]
        public struct Struct {
            
            internal Egueb.Svg.Rect.Struct _base;
            
            internal Egueb.Svg.Rect.Struct anim;
        }
    }
    
    public class Length {
        
        private Struct rawStruct;
        
        public Length() {
        }
        
        public Length(System.IntPtr i, bool owned) {
            rawStruct = ((Struct)(Marshal.PtrToStructure(i, typeof(Struct))));
        }
        
        public IntPtr Raw {
            get {
                System.IntPtr raw;
                raw = CreateRaw();
                Marshal.StructureToPtr(rawStruct, raw, false);
                return raw;
            }
            set {
                rawStruct = ((Struct)(Marshal.PtrToStructure(value, typeof(Struct))));
                DestroyRaw(value);
            }
        }
        
        public double Value {
            get {
                double ret;
                ret = this.rawStruct.value;
                return ret;
            }
            set {
                this.rawStruct.value = value;
            }
        }
        
        public Egueb.Svg.LengthUnit Unit {
            get {
                Egueb.Svg.LengthUnit ret;
                ret = this.rawStruct.unit;
                return ret;
            }
            set {
                this.rawStruct.unit = value;
            }
        }
        
        public static System.IntPtr CreateRaw() {
            System.IntPtr raw;
            raw = Marshal.AllocHGlobal(Marshal.SizeOf(typeof(Struct)));
            return raw;
        }
        
        public static void DestroyRaw(System.IntPtr raw) {
            Marshal.FreeHGlobal(raw);
        }
        
        [StructLayout(System.Runtime.InteropServices.LayoutKind.Sequential)]
        public struct Struct {
            
            internal double value;
            
            internal Egueb.Svg.LengthUnit unit;
        }
    }
    
    public class NumberAnimated {
        
        private Struct rawStruct;
        
        public NumberAnimated() {
        }
        
        public NumberAnimated(System.IntPtr i, bool owned) {
            rawStruct = ((Struct)(Marshal.PtrToStructure(i, typeof(Struct))));
        }
        
        public IntPtr Raw {
            get {
                System.IntPtr raw;
                raw = CreateRaw();
                Marshal.StructureToPtr(rawStruct, raw, false);
                return raw;
            }
            set {
                rawStruct = ((Struct)(Marshal.PtrToStructure(value, typeof(Struct))));
                DestroyRaw(value);
            }
        }
        
        public Egueb.Svg.Number Base {
            get {
                Egueb.Svg.Number ret;
                ret = this.rawStruct._base;
                return ret;
            }
            set {
                this.rawStruct._base = value;
            }
        }
        
        public Egueb.Svg.Number Anim {
            get {
                Egueb.Svg.Number ret;
                ret = this.rawStruct.anim;
                return ret;
            }
            set {
                this.rawStruct.anim = value;
            }
        }
        
        public static System.IntPtr CreateRaw() {
            System.IntPtr raw;
            raw = Marshal.AllocHGlobal(Marshal.SizeOf(typeof(Struct)));
            return raw;
        }
        
        public static void DestroyRaw(System.IntPtr raw) {
            Marshal.FreeHGlobal(raw);
        }
        
        [StructLayout(System.Runtime.InteropServices.LayoutKind.Sequential)]
        public struct Struct {
            
            internal double _base;
            
            internal double anim;
        }
    }
    
    public class ColorAnimated {
        
        private Struct rawStruct;
        
        private Egueb.Svg.Color _base;
        
        private Egueb.Svg.Color anim;
        
        public ColorAnimated() {
            _base = new Egueb.Svg.Color();
            anim = new Egueb.Svg.Color();
        }
        
        public ColorAnimated(System.IntPtr i, bool owned) {
            rawStruct = ((Struct)(Marshal.PtrToStructure(i, typeof(Struct))));
            System.IntPtr _baseRaw = Egueb.Svg.Color.CreateRaw();
            Marshal.StructureToPtr(rawStruct._base, _baseRaw, false);
            _base = new Egueb.Svg.Color(_baseRaw, true);
            System.IntPtr animRaw = Egueb.Svg.Color.CreateRaw();
            Marshal.StructureToPtr(rawStruct.anim, animRaw, false);
            anim = new Egueb.Svg.Color(animRaw, true);
        }
        
        public IntPtr Raw {
            get {
                System.IntPtr raw;
                raw = CreateRaw();
                Marshal.StructureToPtr(rawStruct, raw, false);
                return raw;
            }
            set {
                rawStruct = ((Struct)(Marshal.PtrToStructure(value, typeof(Struct))));
                DestroyRaw(value);
            }
        }
        
        public Egueb.Svg.Color Base {
            get {
                Egueb.Svg.Color ret;
                ret = this._base;
                return ret;
            }
        }
        
        public Egueb.Svg.Color Anim {
            get {
                Egueb.Svg.Color ret;
                ret = this.anim;
                return ret;
            }
        }
        
        public static System.IntPtr CreateRaw() {
            System.IntPtr raw;
            raw = Marshal.AllocHGlobal(Marshal.SizeOf(typeof(Struct)));
            return raw;
        }
        
        public static void DestroyRaw(System.IntPtr raw) {
            Marshal.FreeHGlobal(raw);
        }
        
        [StructLayout(System.Runtime.InteropServices.LayoutKind.Sequential)]
        public struct Struct {
            
            internal Egueb.Svg.Color.Struct _base;
            
            internal Egueb.Svg.Color.Struct anim;
        }
    }
    
    public class Color {
        
        private Struct rawStruct;
        
        public Color() {
        }
        
        public Color(System.IntPtr i, bool owned) {
            rawStruct = ((Struct)(Marshal.PtrToStructure(i, typeof(Struct))));
        }
        
        public IntPtr Raw {
            get {
                System.IntPtr raw;
                raw = CreateRaw();
                Marshal.StructureToPtr(rawStruct, raw, false);
                return raw;
            }
            set {
                rawStruct = ((Struct)(Marshal.PtrToStructure(value, typeof(Struct))));
                DestroyRaw(value);
            }
        }
        
        public byte R {
            get {
                byte ret;
                ret = this.rawStruct.r;
                return ret;
            }
            set {
                this.rawStruct.r = value;
            }
        }
        
        public byte G {
            get {
                byte ret;
                ret = this.rawStruct.g;
                return ret;
            }
            set {
                this.rawStruct.g = value;
            }
        }
        
        public byte B {
            get {
                byte ret;
                ret = this.rawStruct.b;
                return ret;
            }
            set {
                this.rawStruct.b = value;
            }
        }
        
        public static System.IntPtr CreateRaw() {
            System.IntPtr raw;
            raw = Marshal.AllocHGlobal(Marshal.SizeOf(typeof(Struct)));
            return raw;
        }
        
        public static void DestroyRaw(System.IntPtr raw) {
            Marshal.FreeHGlobal(raw);
        }
        
        [StructLayout(System.Runtime.InteropServices.LayoutKind.Sequential)]
        public struct Struct {
            
            internal byte r;
            
            internal byte g;
            
            internal byte b;
        }
    }
    
    public class Point {
        
        private Struct rawStruct;
        
        public Point() {
        }
        
        public Point(System.IntPtr i, bool owned) {
            rawStruct = ((Struct)(Marshal.PtrToStructure(i, typeof(Struct))));
        }
        
        public IntPtr Raw {
            get {
                System.IntPtr raw;
                raw = CreateRaw();
                Marshal.StructureToPtr(rawStruct, raw, false);
                return raw;
            }
            set {
                rawStruct = ((Struct)(Marshal.PtrToStructure(value, typeof(Struct))));
                DestroyRaw(value);
            }
        }
        
        public double X {
            get {
                double ret;
                ret = this.rawStruct.x;
                return ret;
            }
            set {
                this.rawStruct.x = value;
            }
        }
        
        public double Y {
            get {
                double ret;
                ret = this.rawStruct.y;
                return ret;
            }
            set {
                this.rawStruct.y = value;
            }
        }
        
        public static System.IntPtr CreateRaw() {
            System.IntPtr raw;
            raw = Marshal.AllocHGlobal(Marshal.SizeOf(typeof(Struct)));
            return raw;
        }
        
        public static void DestroyRaw(System.IntPtr raw) {
            Marshal.FreeHGlobal(raw);
        }
        
        [StructLayout(System.Runtime.InteropServices.LayoutKind.Sequential)]
        public struct Struct {
            
            internal double x;
            
            internal double y;
        }
    }
    
    public class Number {
        
        protected double value;
        
        public Number(double v) {
            value = v;
        }
        
        public double Value {
            get {
                return this.value;
            }
        }
        
        public static   implicit operator Number(double v) {
            return new Number(v);
        }
        
        public static   implicit operator System.Double(Number v) {
            return v.value;
        }
    }
    
    public class Rect : Enesim.Rectangle {
    }
}
namespace Egueb.Svg.String {
    
    
    public class Animated {
        
        private Struct rawStruct;
        
        private Egueb.Dom.String _base;
        
        private Egueb.Dom.String anim;
        
        public Animated() {
            _base = null;
            anim = null;
        }
        
        public Animated(System.IntPtr i, bool owned) {
            rawStruct = ((Struct)(Marshal.PtrToStructure(i, typeof(Struct))));
            System.IntPtr _baseRaw = this.rawStruct._base;
            Egueb.Dom.String _base;
            if ((_baseRaw == IntPtr.Zero)) {
                _base = null;
            }
            else {
                _base = new Egueb.Dom.String(_baseRaw, false);
            }
            this._base = _base;
            System.IntPtr animRaw = this.rawStruct.anim;
            Egueb.Dom.String anim;
            if ((animRaw == IntPtr.Zero)) {
                anim = null;
            }
            else {
                anim = new Egueb.Dom.String(animRaw, false);
            }
            this.anim = anim;
        }
        
        public IntPtr Raw {
            get {
                System.IntPtr raw;
                raw = CreateRaw();
                Marshal.StructureToPtr(rawStruct, raw, false);
                return raw;
            }
            set {
                rawStruct = ((Struct)(Marshal.PtrToStructure(value, typeof(Struct))));
                DestroyRaw(value);
            }
        }
        
        public Egueb.Dom.String Base {
            get {
                Egueb.Dom.String ret;
                ret = this._base;
                return ret;
            }
            set {
                this._base = value;
            }
        }
        
        public Egueb.Dom.String Anim {
            get {
                Egueb.Dom.String ret;
                ret = this.anim;
                return ret;
            }
            set {
                this.anim = value;
            }
        }
        
        public static System.IntPtr CreateRaw() {
            System.IntPtr raw;
            raw = Marshal.AllocHGlobal(Marshal.SizeOf(typeof(Struct)));
            return raw;
        }
        
        public static void DestroyRaw(System.IntPtr raw) {
            Marshal.FreeHGlobal(raw);
        }
        
        [StructLayout(System.Runtime.InteropServices.LayoutKind.Sequential)]
        public struct Struct {
            
            internal System.IntPtr _base;
            
            internal System.IntPtr anim;
        }
    }
}
namespace Egueb.Svg.Enum {
    
    
    public class Animated {
        
        private Struct rawStruct;
        
        public Animated() {
        }
        
        public Animated(System.IntPtr i, bool owned) {
            rawStruct = ((Struct)(Marshal.PtrToStructure(i, typeof(Struct))));
        }
        
        public IntPtr Raw {
            get {
                System.IntPtr raw;
                raw = CreateRaw();
                Marshal.StructureToPtr(rawStruct, raw, false);
                return raw;
            }
            set {
                rawStruct = ((Struct)(Marshal.PtrToStructure(value, typeof(Struct))));
                DestroyRaw(value);
            }
        }
        
        public int Base {
            get {
                int ret;
                ret = this.rawStruct._base;
                return ret;
            }
            set {
                this.rawStruct._base = value;
            }
        }
        
        public int Anim {
            get {
                int ret;
                ret = this.rawStruct.anim;
                return ret;
            }
            set {
                this.rawStruct.anim = value;
            }
        }
        
        public static System.IntPtr CreateRaw() {
            System.IntPtr raw;
            raw = Marshal.AllocHGlobal(Marshal.SizeOf(typeof(Struct)));
            return raw;
        }
        
        public static void DestroyRaw(System.IntPtr raw) {
            Marshal.FreeHGlobal(raw);
        }
        
        [StructLayout(System.Runtime.InteropServices.LayoutKind.Sequential)]
        public struct Struct {
            
            internal int _base;
            
            internal int anim;
        }
    }
}
